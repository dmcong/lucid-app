{"version":3,"file":"static/js/481.e2411e07.chunk.js","mappings":"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","sources":["shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","shared/antd/mint/mintSelection/mintTag.tsx","shared/antd/mint/mintSelection/mintCard.tsx","shared/antd/mint/mintSelection/loadMore.tsx","shared/antd/mint/mintSelection/useAllMintAddresses.ts","shared/hooks/useSortMints.ts","shared/antd/mint/mintSelection/useRecommendedMint.ts","shared/antd/mint/mintSelection/useSearchedMints.ts","shared/antd/mint/mintSelection/index.tsx","app/view/pools/cardContent.tsx","app/components/buttonNeon.tsx","app/lib/lucid.ts","app/lib/constant.ts","app/lib/index.ts","app/lib/utils.ts","app/hooks/useLucid.ts","app/helper/index.ts","app/hooks/useOracles.ts","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/index.ts","shared/hooks/useMintDecimals.ts","shared/hooks/useAccountBalance.ts","app/hooks/useLucidOracles.ts","app/constants/index.ts","app/hooks/pool/usePoolData.ts","app/components/selection/search.tsx","app/components/selection/mint.tsx","app/components/selection/mintSelection.tsx","app/components/selection/index.tsx","shared/antd/numericInput.tsx","app/view/buyAndSell/buy.tsx","app/view/buyAndSell/sell.tsx","app/view/buyAndSell/index.tsx","app/hooks/pool/usePoolAmounts.ts","app/hooks/pool/usePoolDay.ts","app/hooks/pool/usePoolPrices.ts","app/view/depositAndWithdraw/deposit.tsx","app/view/depositAndWithdraw/withdraw.tsx","app/view/depositAndWithdraw/index.tsx","app/hooks/pool/useAPR.ts","app/hooks/pool/useMyLiquidity.ts","app/view/borrowAndRepay/repay.tsx","app/view/borrowAndRepay/borrow.tsx","app/view/borrowAndRepay/index.tsx","app/view/pools/poolCard.tsx","app/hooks/pool/usePoolFees.ts","app/hooks/pool/usePoolTvl.ts","app/view/createPool/modalContent.tsx","app/view/createPool/index.tsx","app/components/joinPool/joinAction.tsx","app/hooks/pool/useBestPoolData.ts","app/components/joinPool/index.tsx","app/static/images/ico-rank.svg","app/view/pools/index.tsx","app/hooks/useAppRouter.ts","app/components/jupiterMarket/index.tsx","app/static/images/bg_lucid.svg","app/view/index.tsx","app/model/main.controller.tsx","app/model/pools.controller.ts","app/model/index.ts","app/watcher/pool.watcher.tsx","app/bootstrap.app.tsx","shared/devTools.ts","shared/runtime.ts","shared/storage.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nimport { Avatar } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\nexport type MintAvatarProps = {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n  ...props\n}: MintAvatarProps) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.logoURI) return token.logoURI\n      return undefined\n    },\n    [tokenProvider],\n  )\n\n  const deriveAvatars = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  if (avatars.length === 1)\n    return (\n      <Avatar\n        src={avatars[0]}\n        size={size}\n        style={{ backgroundColor: '#2D3355', border: 'none' }}\n        {...props}\n      >\n        {icon}\n      </Avatar>\n    )\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }} {...props}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveName = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.name) return token.name\n      return DEFAULT_NAME\n    },\n    [tokenProvider],\n  )\n\n  const deriveNames = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.symbol) return token.symbol\n      return address.substring(0, 4)\n    },\n    [tokenProvider],\n  )\n\n  const deriveSymbols = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { Card, Space, Typography } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintAvatar } from 'shared/antd/mint'\nimport MintSymbol from '../mintSymbol'\n\nimport './index.less'\n\nexport type MintTagProps = {\n  mintAddress: string\n  onClick?: (mintAddress: string) => void\n  active?: boolean\n}\n\nconst MintTag = ({\n  mintAddress,\n  onClick = () => {},\n  active = false,\n}: MintTagProps) => {\n  return (\n    <Card\n      bodyStyle={{\n        padding: 8,\n        cursor: 'pointer',\n      }}\n      style={{\n        borderRadius: 8,\n      }}\n      className=\"mint-tag\"\n      bordered={Boolean(active)}\n      onClick={() => onClick(mintAddress)}\n    >\n      <Space size={8} style={{ width: '100%', justifyContent: 'center' }}>\n        <MintAvatar mintAddress={mintAddress} />\n        <Typography.Text ellipsis={true}>\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Text>\n        {active && <IonIcon name=\"checkmark-outline\" />}\n      </Space>\n    </Card>\n  )\n}\nexport default MintTag\n","import { Card, Col, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nexport type MintSelectionProps = {\n  mintAddress: string\n  onClick?: (mintAddress: string) => void\n}\n\nconst MintCard = ({ mintAddress, onClick = () => {} }: MintSelectionProps) => {\n  return (\n    <Card\n      bodyStyle={{ padding: 8 }}\n      style={{ boxShadow: 'unset', cursor: 'pointer' }}\n      bordered={false}\n      onClick={() => onClick(mintAddress)}\n    >\n      <Row gutter={[16, 16]} align=\"middle\">\n        <Col>\n          <MintAvatar mintAddress={mintAddress} size={36} />\n        </Col>\n        <Col>\n          <Space direction=\"vertical\" size={0}>\n            <Typography.Text>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n            <Typography.Text type=\"secondary\" className=\"caption\">\n              <MintName mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default MintCard\n","import { Fragment, useEffect } from 'react'\nimport LazyLoad from '@sentre/react-lazyload'\n\ntype PropsLoadMore = { callback: () => void }\n\nconst LoadMore = ({ callback }: PropsLoadMore) => {\n  useEffect(() => {\n    callback()\n  }, [callback])\n\n  return <Fragment />\n}\nconst WrapLoadMore = (props: PropsLoadMore) => {\n  return (\n    <LazyLoad overflow>\n      <LoadMore {...props} />\n    </LazyLoad>\n  )\n}\nexport default WrapLoadMore\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\nexport const useAllMintAddresses = () => {\n  const [allMintAddresses, setAllMintAddresses] = useState<string[]>([])\n  const { tokenProvider } = useMint()\n\n  const getRecommendedMintAddresses = useCallback(async () => {\n    const allMintAddresses = (await tokenProvider.all()).map(\n      ({ address }) => address,\n    )\n    const addresses = allMintAddresses.filter((mintAddress) =>\n      allMintAddresses.includes(mintAddress),\n    )\n    return setAllMintAddresses(addresses)\n  }, [tokenProvider])\n\n  useEffect(() => {\n    getRecommendedMintAddresses()\n  }, [getRecommendedMintAddresses])\n\n  return allMintAddresses\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useAccount } from '@senhub/providers'\n\nexport const useSortMints = (mints: string[]) => {\n  const [sortedMints, setSortedMints] = useState<string[]>([])\n  const { accounts } = useAccount()\n\n  const mapMintAmounts = useMemo(() => {\n    const mapMints: Record<string, number> = {}\n    for (const account of Object.values(accounts)) {\n      mapMints[account.mint] = Number(account.amount.toString())\n    }\n    return mapMints\n  }, [accounts])\n\n  const sortMints = useCallback(\n    async (mintAddresses: string[]) => {\n      const sortedMints = mintAddresses.sort((a, b) => {\n        let amountA = mapMintAmounts[a] || -1\n        let amountB = mapMintAmounts[b] || -1\n        return Number(amountB) - Number(amountA)\n      })\n      return setSortedMints(sortedMints)\n    },\n    [mapMintAmounts],\n  )\n  useEffect(() => {\n    sortMints(mints)\n  }, [mints, sortMints])\n\n  return { sortedMints, sortMints }\n}\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { useAllMintAddresses } from './useAllMintAddresses'\nimport { useSortMints } from 'shared/hooks/useSortMints'\nimport { net } from 'shared/runtime'\nimport localStorage from 'shared/storage'\n\nconst LIMIT_ITEM = 8\nconst LOCAL_STORAGE_ID = `${net}:selected_mints`\n\nexport const useRecommendedMint = () => {\n  const [recommendedMints, setRecommendedMints] = useState<string[]>([])\n  const allMintAddresses = useAllMintAddresses()\n  const { sortedMints } = useSortMints(allMintAddresses)\n\n  const getRecommendedMints = useCallback(async () => {\n    let mints: string[] = localStorage.get(LOCAL_STORAGE_ID) || []\n\n    for (const mint of sortedMints) {\n      if (mints.length >= LIMIT_ITEM) break\n      if (mints.includes(mint)) continue\n      mints.push(mint)\n    }\n    return setRecommendedMints(mints.slice(0, LIMIT_ITEM))\n  }, [sortedMints])\n\n  const addRecommendMint = useCallback(\n    async (mintAddress: string) => {\n      const mints = recommendedMints.filter((mint) => mint !== mintAddress)\n      const newMints = [mintAddress, ...mints].slice(0, LIMIT_ITEM)\n      localStorage.set(LOCAL_STORAGE_ID, newMints)\n\n      return setRecommendedMints(newMints)\n    },\n    [recommendedMints],\n  )\n\n  useEffect(() => {\n    getRecommendedMints()\n  }, [getRecommendedMints])\n\n  return {\n    recommendedMints,\n    addRecommendMint,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\nimport { useAllMintAddresses } from './useAllMintAddresses'\n\nlet searching: NodeJS.Timeout\n\nexport const useSearchedMints = (keyword: string = '', limit: number) => {\n  const [loading, setLoading] = useState(false)\n  const [searchedMints, setSearchedMints] = useState<string[]>([])\n  const { tokenProvider } = useMint()\n  const mints = useAllMintAddresses()\n\n  const search = useCallback(async () => {\n    if (!keyword) {\n      setLoading(false)\n      return setSearchedMints(mints)\n    }\n    if (searching) clearTimeout(searching)\n    setLoading(true)\n    searching = setTimeout(async () => {\n      const addresses = (await tokenProvider.find(keyword, limit)).map(\n        ({ address }) => address,\n      )\n      setLoading(false)\n      return setSearchedMints(addresses)\n    }, 500)\n  }, [keyword, limit, mints, tokenProvider])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return { searchedMints, loading }\n}\n","import {\n  CSSProperties,\n  Fragment,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\nimport LazyLoad from '@sentre/react-lazyload'\n\nimport { Button, Empty, Col, Input, Modal, Row, Space } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport MintTag from './mintTag'\nimport MintCard from './mintCard'\nimport LoadMore from './loadMore'\n\nimport { useRecommendedMint } from './useRecommendedMint'\nimport { useSearchedMints } from './useSearchedMints'\nimport { useSortMints } from 'shared/hooks/useSortMints'\n\nconst LIMIT = 20\nconst AMOUNT_BEFORE_LOAD_MORE = 5\n\nexport type MintSelectionProps = {\n  value?: string\n  onChange?: (value: string) => void\n  style?: CSSProperties\n  disabled?: boolean\n}\n\nconst MintSelection = ({\n  value = '',\n  onChange = () => {},\n  style = {},\n  disabled = false,\n}: MintSelectionProps) => {\n  const [visible, setVisible] = useState(false)\n  const [keyword, setKeyword] = useState('')\n  const [offset, setOffset] = useState(LIMIT)\n  const { recommendedMints, addRecommendMint } = useRecommendedMint()\n  const { searchedMints, loading } = useSearchedMints(keyword, 0)\n  const { sortedMints } = useSortMints(searchedMints)\n\n  const onSelect = useCallback(\n    (mintAddress: string) => {\n      setVisible(false)\n      onChange(mintAddress)\n      addRecommendMint(mintAddress)\n    },\n    [onChange, addRecommendMint],\n  )\n\n  useEffect(() => {\n    setOffset(LIMIT)\n    const list = document.getElementById('sentre-token-selection-list')\n    if (list) list.scrollTop = 0\n  }, [keyword, visible])\n\n  useEffect(() => {\n    if (!visible) setKeyword('')\n  }, [visible])\n\n  return (\n    <Fragment>\n      <Button\n        type=\"text\"\n        onClick={() => setVisible(true)}\n        style={{ padding: 4, ...style }}\n        disabled={disabled}\n      >\n        <Space>\n          <MintAvatar mintAddress={value} />\n          <MintSymbol mintAddress={value} />\n          <IonIcon name=\"chevron-down-outline\" />\n        </Space>\n      </Button>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        footer={null}\n        closable={false}\n        centered\n      >\n        <Row gutter={[32, 32]}>\n          <Col span={24}>\n            <Input\n              placeholder=\"Search token symbol, name, address, ...\"\n              suffix={\n                <Button\n                  type=\"text\"\n                  style={{ marginRight: -7 }}\n                  icon={\n                    <IonIcon\n                      name={keyword ? 'close-outline' : 'search-outline'}\n                    />\n                  }\n                  onClick={keyword ? () => setKeyword('') : () => {}}\n                  loading={loading}\n                />\n              }\n              value={keyword}\n              onChange={(e) => setKeyword(e.target.value || '')}\n            />\n          </Col>\n          {!keyword.length && (\n            <Col span={24}>\n              <Row gutter={[8, 8]}>\n                {recommendedMints.map((mintAddress) => (\n                  <Col xs={12} sm={8} md={6} key={mintAddress}>\n                    <MintTag\n                      mintAddress={mintAddress}\n                      onClick={onSelect}\n                      active={mintAddress === value}\n                    />\n                  </Col>\n                ))}\n              </Row>\n            </Col>\n          )}\n          <Col span={24}>\n            <Row\n              gutter={[8, 8]}\n              style={{ maxHeight: 360 }}\n              className=\"scrollbar\"\n              id=\"sentre-token-selection-list\"\n              justify=\"center\"\n            >\n              {sortedMints.length ? (\n                sortedMints.slice(0, offset).map((mintAddress, index) => (\n                  <Col span={24} key={mintAddress}>\n                    <LazyLoad height={60} overflow>\n                      <MintCard mintAddress={mintAddress} onClick={onSelect} />\n                    </LazyLoad>\n                    {index === offset - AMOUNT_BEFORE_LOAD_MORE && (\n                      <LoadMore callback={() => setOffset(offset + LIMIT)} />\n                    )}\n                  </Col>\n                ))\n              ) : (\n                <Col>\n                  <Empty style={{ padding: 40 }} />\n                </Col>\n              )}\n            </Row>\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default MintSelection\n","import { Button, Space, Tooltip, Typography } from 'antd'\n\nimport { ReactNode } from 'react'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintAvatar } from 'shared/antd/mint'\n\ntype CardContentProps = {\n  label?: string\n  tooltip?: ReactNode\n  value?: string\n  mintAddress?: string\n  primary?: boolean\n}\n\nconst CardContent = ({\n  label = '',\n  tooltip,\n  value = '',\n  mintAddress,\n  primary,\n}: CardContentProps) => {\n  const priColor = primary ? { color: '#ABFC47' } : {}\n\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <Space size={4}>\n        <Typography.Text type=\"secondary\">{label}</Typography.Text>\n        {tooltip && (\n          <Tooltip title={tooltip}>\n            <Button\n              type=\"text\"\n              shape=\"circle\"\n              size=\"small\"\n              icon={\n                <Typography.Text type=\"secondary\">\n                  <IonIcon name=\"information-circle-outline\" />\n                </Typography.Text>\n              }\n            />\n          </Tooltip>\n        )}\n      </Space>\n      <Space size={4}>\n        <Typography.Title level={5} style={{ ...priColor }}>\n          {value}\n        </Typography.Title>\n        <div style={{ marginTop: -3 }}>\n          {mintAddress && <MintAvatar mintAddress={mintAddress} size={18} />}\n        </div>\n      </Space>\n    </Space>\n  )\n}\n\nexport default CardContent\n","import { ReactNode } from 'react'\n\nimport { Space, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\n\ntype ButtonNeonProps = {\n  children?: ReactNode\n  loading?: boolean\n  disabled?: boolean\n  preffix?: ReactNode\n  suffix?: ReactNode\n  onClick?: () => void\n}\nconst ButtonNeon = ({\n  preffix,\n  suffix,\n  children,\n  disabled = false,\n  loading = false,\n  onClick = () => {},\n}: ButtonNeonProps) => {\n  return (\n    <button className=\"btn-neon\" onClick={onClick}>\n      <span className=\"btn-neon-child\">\n        <Space size={6}>\n          {loading && <Spin spinning indicator={<LoadingOutlined />} />}\n          {preffix}\n          {children}\n          {suffix}\n        </Space>\n      </span>\n    </button>\n  )\n}\n\nexport default ButtonNeon\n","export type Lucid = {\n  version: '0.1.0'\n  name: 'lucid'\n  instructions: [\n    {\n      name: 'initializePool'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'stableMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'tokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'cert'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'fee'\n          type: 'u64'\n        },\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n        {\n          name: 'stableAmount'\n          type: 'u64'\n        },\n        {\n          name: 'baseAmount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'mintStable'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'stableMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'baseAmount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'burnStable'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'stableMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'stableAmount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'addLiquidity'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'stableMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'tokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n        {\n          name: 'stableAmount'\n          type: 'u64'\n        },\n        {\n          name: 'baseAmount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'removeLiquidity'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'stableMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'tokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'lptAmount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'borrow'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'cheque'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'lptAmount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'repay'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'cheque'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'buy'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'stableMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'tokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'stableAmount'\n          type: 'u64'\n        },\n        {\n          name: 'baseAmount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'sell'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'stableMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'lptMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'tokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'stableTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'lptTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'initializeJupiter'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'jupiter'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'swapJupiter'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'jupiter'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'baseMint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mintTreasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'tokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'baseTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'amountIn'\n          type: 'u64'\n        },\n        {\n          name: 'amountOut'\n          type: 'u64'\n        },\n      ]\n    },\n  ]\n  accounts: [\n    {\n      name: 'cert'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'authority'\n            type: 'publicKey'\n          },\n          {\n            name: 'pool'\n            type: 'publicKey'\n          },\n          {\n            name: 'amount'\n            type: 'u64'\n          },\n        ]\n      }\n    },\n    {\n      name: 'cheque'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'authority'\n            type: 'publicKey'\n          },\n          {\n            name: 'pool'\n            type: 'publicKey'\n          },\n          {\n            name: 'borrowAmount'\n            type: 'u64'\n          },\n          {\n            name: 'baseAmount'\n            type: 'u64'\n          },\n        ]\n      }\n    },\n    {\n      name: 'jupiter'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'baseMint'\n            type: 'publicKey'\n          },\n        ]\n      }\n    },\n    {\n      name: 'pool'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'authority'\n            type: 'publicKey'\n          },\n          {\n            name: 'mint'\n            type: 'publicKey'\n          },\n          {\n            name: 'baseMint'\n            type: 'publicKey'\n          },\n          {\n            name: 'stableMint'\n            type: 'publicKey'\n          },\n          {\n            name: 'lptMint'\n            type: 'publicKey'\n          },\n          {\n            name: 'treasurer'\n            type: 'publicKey'\n          },\n          {\n            name: 'balance'\n            type: 'u64'\n          },\n          {\n            name: 'stableBalance'\n            type: 'u64'\n          },\n          {\n            name: 'baseBalance'\n            type: 'u64'\n          },\n          {\n            name: 'fee'\n            type: 'u64'\n          },\n          {\n            name: 'totalLptFee'\n            type: 'u64'\n          },\n          {\n            name: 'lptSupply'\n            type: 'u64'\n          },\n          {\n            name: 'startTime'\n            type: 'i64'\n          },\n        ]\n      }\n    },\n  ]\n  errors: [\n    {\n      code: 6000\n      name: 'OverBorrow'\n      msg: 'Over borrow limit!'\n    },\n    {\n      code: 6001\n      name: 'AmountZero'\n      msg: 'Required greater than zero'\n    },\n    {\n      code: 6002\n      name: 'Slippage'\n      msg: 'Slippage error'\n    },\n    {\n      code: 6003\n      name: 'InvalidAmount'\n      msg: 'Invalid Amount'\n    },\n  ]\n}\n\nexport const IDL: Lucid = {\n  version: '0.1.0',\n  name: 'lucid',\n  instructions: [\n    {\n      name: 'initializePool',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stableMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'cert',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'fee',\n          type: 'u64',\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'stableAmount',\n          type: 'u64',\n        },\n        {\n          name: 'baseAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'mintStable',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stableMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'baseAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'burnStable',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stableMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'stableAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'addLiquidity',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stableMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'stableAmount',\n          type: 'u64',\n        },\n        {\n          name: 'baseAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'removeLiquidity',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stableMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'lptAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'borrow',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'cheque',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'lptAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'repay',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'cheque',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'buy',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stableMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'stableAmount',\n          type: 'u64',\n        },\n        {\n          name: 'baseAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'sell',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stableMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'lptMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stableTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lptTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'initializeJupiter',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'jupiter',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'swapJupiter',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'jupiter',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'baseMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mintTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amountIn',\n          type: 'u64',\n        },\n        {\n          name: 'amountOut',\n          type: 'u64',\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: 'cert',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'cheque',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'borrowAmount',\n            type: 'u64',\n          },\n          {\n            name: 'baseAmount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'jupiter',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'baseMint',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'pool',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'baseMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'stableMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'lptMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'treasurer',\n            type: 'publicKey',\n          },\n          {\n            name: 'balance',\n            type: 'u64',\n          },\n          {\n            name: 'stableBalance',\n            type: 'u64',\n          },\n          {\n            name: 'baseBalance',\n            type: 'u64',\n          },\n          {\n            name: 'fee',\n            type: 'u64',\n          },\n          {\n            name: 'totalLptFee',\n            type: 'u64',\n          },\n          {\n            name: 'lptSupply',\n            type: 'u64',\n          },\n          {\n            name: 'startTime',\n            type: 'i64',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'OverBorrow',\n      msg: 'Over borrow limit!',\n    },\n    {\n      code: 6001,\n      name: 'AmountZero',\n      msg: 'Required greater than zero',\n    },\n    {\n      code: 6002,\n      name: 'Slippage',\n      msg: 'Slippage error',\n    },\n    {\n      code: 6003,\n      name: 'InvalidAmount',\n      msg: 'Invalid Amount',\n    },\n  ],\n}\n","import { IDL } from './lucid'\n\nexport const DEFAULT_RPC_ENDPOINT = 'https://api.devnet.solana.com'\nexport const DEFAULT_IDL = IDL\nexport const LUCID_ADDRESS = 'HG1dAGfncS2uxij2Dvs16m8QPFy3q8g6DZwrnPK6W7X8'\n","import {\n  Address,\n  Program,\n  utils,\n  web3,\n  AnchorProvider,\n  IdlAccounts,\n  BN,\n} from '@project-serum/anchor'\nimport { TOKEN_PROGRAM_ID } from '@project-serum/anchor/dist/cjs/utils/token'\nimport { ComputeBudgetProgram, Transaction } from '@solana/web3.js'\nimport { PoolsState } from 'app/model/pools.controller'\n\nimport { DEFAULT_IDL } from './constant'\nimport { Lucid } from './lucid'\nimport { isAddress } from './utils'\n\nexport type PoolData = IdlAccounts<Lucid>['pool']\n\nconst DEFAULT_PROGRAMS = {\n  rent: web3.SYSVAR_RENT_PUBKEY,\n  systemProgram: web3.SystemProgram.programId,\n  associatedTokenProgram: utils.token.ASSOCIATED_PROGRAM_ID,\n  tokenProgram: TOKEN_PROGRAM_ID,\n}\n\nexport type BalancerAccountChangeInfo = {\n  type: 'pool'\n  address: string\n  data: Buffer\n}\n\nclass LucidProgram {\n  private _provider: AnchorProvider\n  readonly program: Program<Lucid>\n\n  constructor(provider: AnchorProvider, programId: Address) {\n    if (!isAddress(programId)) throw new Error('Invalid program id')\n    // Private\n    this._provider = provider\n    // Public\n    this.program = new Program<Lucid>(DEFAULT_IDL, programId, this._provider)\n  }\n\n  getPools = async (): Promise<PoolsState> => {\n    let accounts = await this.program.account.pool.all()\n    accounts = accounts.sort(\n      (a, b) =>\n        b.account.totalLptFee.toNumber() - a.account.totalLptFee.toNumber(),\n    )\n    const pools: PoolsState = {}\n    for (const account of accounts) {\n      pools[account.publicKey.toBase58()] = account.account\n    }\n    return pools\n  }\n\n  getPoolPDAs = async (pool: Address, mint: Address, baseMint: Address) => {\n    const poolPublicKey = new web3.PublicKey(pool)\n    const mintPublicKey = new web3.PublicKey(mint)\n    const baseMintPublicKey = new web3.PublicKey(baseMint)\n    const [treasurer] = await web3.PublicKey.findProgramAddress(\n      [Buffer.from('treasurer'), poolPublicKey.toBuffer()],\n      this.program.programId,\n    )\n    const [stableMint] = await web3.PublicKey.findProgramAddress(\n      [Buffer.from('stable_mint'), poolPublicKey.toBuffer()],\n      this.program.programId,\n    )\n    const [lptMint] = await web3.PublicKey.findProgramAddress(\n      [Buffer.from('lpt_mint'), poolPublicKey.toBuffer()],\n      this.program.programId,\n    )\n\n    const treasury = await utils.token.associatedAddress({\n      mint: mintPublicKey,\n      owner: treasurer,\n    })\n    const stableTreasury = await utils.token.associatedAddress({\n      mint: stableMint,\n      owner: treasurer,\n    })\n    const baseTreasury = await utils.token.associatedAddress({\n      mint: baseMintPublicKey,\n      owner: treasurer,\n    })\n    const lptTreasury = await utils.token.associatedAddress({\n      mint: lptMint,\n      owner: treasurer,\n    })\n    return {\n      pool,\n      treasurer,\n      mint,\n      stableMint,\n      baseMint,\n      lptMint,\n      treasury,\n      stableTreasury,\n      baseTreasury,\n      lptTreasury,\n    }\n  }\n\n  getTokenAccounts = async (\n    authority: Address,\n    pool: Address,\n    mint: Address,\n    baseMint: Address,\n  ) => {\n    const walletPublicKey = new web3.PublicKey(authority)\n    const mintPublicKey = new web3.PublicKey(mint)\n    const baseMintPublicKey = new web3.PublicKey(baseMint)\n    const poolPDAs = await this.getPoolPDAs(pool, mint, baseMint)\n\n    const tokenAccount = await utils.token.associatedAddress({\n      mint: mintPublicKey,\n      owner: walletPublicKey,\n    })\n    const baseTokenAccount = await utils.token.associatedAddress({\n      mint: baseMintPublicKey,\n      owner: walletPublicKey,\n    })\n    const stableTokenAccount = await utils.token.associatedAddress({\n      mint: poolPDAs.stableMint,\n      owner: walletPublicKey,\n    })\n    const lptTokenAccount = await utils.token.associatedAddress({\n      mint: poolPDAs.lptMint,\n      owner: walletPublicKey,\n    })\n    const [cheque] = await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('cheque'),\n        new web3.PublicKey(pool).toBuffer(),\n        walletPublicKey.toBuffer(),\n      ],\n      this.program.programId,\n    )\n    const [cert] = await web3.PublicKey.findProgramAddress(\n      [poolPDAs.lptMint.toBuffer(), walletPublicKey.toBuffer()],\n      this.program.programId,\n    )\n    return {\n      cert,\n      cheque,\n      lptTokenAccount,\n      tokenAccount,\n      stableTokenAccount,\n      baseTokenAccount,\n    }\n  }\n\n  initializePool = async (\n    mint: Address,\n    baseMint: Address,\n    fee: BN,\n    amount: BN,\n    stableAmount: BN,\n    baseAmount: BN,\n  ) => {\n    const pool = web3.Keypair.generate()\n    const PDAs = await this.getPoolPDAs(pool.publicKey, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool.publicKey,\n      mint,\n      baseMint,\n    )\n\n    const additionalComputeBudgetInstruction =\n      ComputeBudgetProgram.requestUnits({\n        units: 400000,\n        additionalFee: 0,\n      })\n    const transaction = new Transaction().add(\n      additionalComputeBudgetInstruction,\n    )\n\n    const instruction = await this.program.methods\n      .initializePool(fee, amount, stableAmount, baseAmount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .instruction()\n    transaction.add(instruction)\n    const txId = await this._provider.sendAndConfirm(transaction, [pool])\n    return { txId, address: pool.publicKey }\n  }\n\n  mintStable = async (pool: Address, amount: BN) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .mintStable(amount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  burnStable = async (pool: Address, amount: BN) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .burnStable(amount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  addLiquidity = async (\n    pool: Address,\n    amount: BN,\n    stableAmount: BN,\n    baseAmount: BN,\n  ) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .addLiquidity(amount, stableAmount, baseAmount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  removeLiquidity = async (pool: Address, lpt_amount: BN) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .removeLiquidity(lpt_amount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  borrow = async (pool: Address, lpt_amount: BN) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .borrow(lpt_amount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  repay = async (pool: Address) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .repay()\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  buy = async (pool: Address, stable_amount: BN, base_amount: BN) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .buy(stable_amount, base_amount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  sell = async (pool: Address, amount: BN) => {\n    const { mint, baseMint } = await this.program.account.pool.fetch(pool)\n    const PDAs = await this.getPoolPDAs(pool, mint, baseMint)\n    const wallet = this._provider.wallet\n    const tokenAccounts = await this.getTokenAccounts(\n      wallet.publicKey,\n      pool,\n      mint,\n      baseMint,\n    )\n    const txId = await this.program.methods\n      .sell(amount)\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...tokenAccounts,\n        ...DEFAULT_PROGRAMS,\n      })\n      .rpc()\n    return { txId }\n  }\n\n  /**\n   * Watch account changes\n   * @param callback\n   * @param filters\n   * @returns Watch id\n   */\n  watch = (\n    callback: (\n      error: string | null,\n      data:\n        | (Omit<BalancerAccountChangeInfo, 'data'> & {\n            data: PoolData\n          })\n        | null,\n    ) => void,\n    filters?: web3.GetProgramAccountsFilter[],\n  ): number => {\n    const cb = ({\n      accountId,\n      accountInfo: { data: buf },\n    }: web3.KeyedAccountInfo) => {\n      const address = accountId.toBase58()\n      try {\n        const data = this.program.coder.accounts.decode('pool', buf)\n        return callback(null, {\n          type: 'pool',\n          address,\n          data,\n        })\n      } catch (error) {}\n    }\n    return this.program.provider.connection.onProgramAccountChange(\n      this.program.programId,\n      cb,\n      'confirmed',\n      filters,\n    )\n  }\n\n  /**\n   * Unwatch a watcher by watch id\n   * @param watchId\n   * @returns\n   */\n  unwatch = async (watchId: number): Promise<void> => {\n    if (!watchId) return\n    return await this.program.provider.connection.removeProgramAccountChangeListener(\n      watchId,\n    )\n  }\n\n  getAllJupiter = async () => {\n    return this.program.account.jupiter.all()\n  }\n\n  getJupiterPDAs = async (\n    jupiter: Address,\n    mint: Address = web3.Keypair.generate().publicKey,\n  ) => {\n    const jupiterPublicKey = new web3.PublicKey(jupiter)\n    let mintPublicKey: web3.PublicKey | undefined = undefined\n    let mintTreasury: web3.PublicKey | undefined = undefined\n\n    const [treasurer] = await web3.PublicKey.findProgramAddress(\n      [Buffer.from('treasurer'), jupiterPublicKey.toBuffer()],\n      this.program.programId,\n    )\n    const [baseMint] = await web3.PublicKey.findProgramAddress(\n      [Buffer.from('base_mint'), jupiterPublicKey.toBuffer()],\n      this.program.programId,\n    )\n\n    if (mint) {\n      mintPublicKey = new web3.PublicKey(mint)\n      mintTreasury = await utils.token.associatedAddress({\n        mint: mintPublicKey,\n        owner: treasurer,\n      })\n    }\n\n    return {\n      jupiter: jupiterPublicKey,\n      treasurer,\n      mint: mintPublicKey,\n      mintTreasury,\n      baseMint,\n    }\n  }\n\n  getTokenAccountsJupiter = async (\n    authority: Address,\n    mint: Address,\n    baseMint: Address,\n  ) => {\n    const walletPublicKey = new web3.PublicKey(authority)\n    const mintPublicKey = new web3.PublicKey(mint)\n    const baseMintPublicKey = new web3.PublicKey(baseMint)\n\n    const tokenAccount = await utils.token.associatedAddress({\n      mint: mintPublicKey,\n      owner: walletPublicKey,\n    })\n    const baseTokenAccount = await utils.token.associatedAddress({\n      mint: baseMintPublicKey,\n      owner: walletPublicKey,\n    })\n\n    return {\n      tokenAccount,\n      baseTokenAccount,\n    }\n  }\n\n  initializeJupiter = async () => {\n    const jupiter = web3.Keypair.generate()\n    const wallet = this._provider.wallet\n    const PDAs = await this.getJupiterPDAs(jupiter.publicKey)\n    const txId = await this.program.methods\n      .initializeJupiter()\n      .accounts({\n        authority: wallet.publicKey,\n        ...PDAs,\n        ...DEFAULT_PROGRAMS,\n      })\n      .signers([jupiter])\n      .rpc()\n    return { txId, address: jupiter.publicKey }\n  }\n\n  swapJupiter = async (\n    baseMint: Address,\n    mint: Address,\n    amountIn: BN,\n    amountOut: BN,\n  ) => {\n    const listJupiter = await this.getAllJupiter()\n    const wallet = this._provider.wallet\n    for (const jupiter of listJupiter) {\n      if (jupiter.account.baseMint.toBase58() !== baseMint.toString()) continue\n\n      const PDAs = await this.getJupiterPDAs(jupiter.publicKey, mint)\n      const tokenAccounts = await this.getTokenAccountsJupiter(\n        wallet.publicKey,\n        mint,\n        jupiter.account.baseMint,\n      )\n\n      return this.program.methods\n        .swapJupiter(amountIn, amountOut)\n        .accounts({\n          authority: wallet.publicKey,\n          ...PDAs,\n          ...tokenAccounts,\n          ...DEFAULT_PROGRAMS,\n        })\n        .rpc()\n    }\n    return null\n  }\n}\n\nexport * from './constant'\nexport * from './utils'\nexport default LucidProgram\n","import { Address, AnchorProvider, web3 } from '@project-serum/anchor'\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'\nimport { WalletInterface } from './rawWallet'\n\n/**\n * Validate an address\n * @param address Base58 string\n * @returns true/false\n */\nexport const isAddress = (address?: Address): address is Address => {\n  if (!address) return false\n  try {\n    const publicKey = new web3.PublicKey(address)\n    if (!publicKey) throw new Error('Invalid public key')\n    return true\n  } catch (er) {\n    return false\n  }\n}\n\nexport const getAnchorProvider = (\n  node: string,\n  walletAddress: string,\n  wallet: WalletInterface,\n): AnchorProvider => {\n  const connection = new Connection(node, 'confirmed')\n\n  const signAllTransactions = async (transactions: Transaction[]) => {\n    const signedTransactions = []\n    for (const transaction of transactions) {\n      const signedTransaction = await wallet.signTransaction(transaction)\n      signedTransactions.push(signedTransaction)\n    }\n    return signedTransactions\n  }\n\n  const publicKey = new PublicKey(walletAddress)\n  return new AnchorProvider(\n    connection,\n    {\n      publicKey: new PublicKey(publicKey),\n      signTransaction: wallet.signTransaction,\n      signAllTransactions,\n    },\n    {\n      commitment: 'confirmed',\n      skipPreflight: true,\n    },\n  )\n}\n","import { useMemo } from 'react'\nimport { useWallet } from '@senhub/providers'\n\nimport { rpc } from 'shared/runtime'\nimport { getAnchorProvider, LUCID_ADDRESS } from 'app/lib'\nimport LucidProgram from 'app/lib'\n\nexport const useProvider = () => {\n  const { wallet } = useWallet()\n\n  const provider = useMemo(\n    () => getAnchorProvider(rpc, wallet.address, window.sentre.wallet),\n    [wallet.address],\n  )\n  return provider\n}\nexport const useLucid = (): LucidProgram => {\n  const provider = useProvider()\n\n  const lucidProgram = useMemo(\n    () => new LucidProgram(provider, LUCID_ADDRESS),\n    [provider],\n  )\n  return lucidProgram\n}\n","import { BN } from '@project-serum/anchor'\n\nimport { utils } from '@senswap/sen-js'\nimport { explorer } from 'shared/util'\n\nexport const notifySuccess = (content: string, txId: string) => {\n  return window.notify({\n    type: 'success',\n    description: `${content} successfully. Click to view details.`,\n    onClick: () => window.open(explorer(txId), '_blank'),\n  })\n}\n\nexport const notifyError = (er: any) => {\n  console.log('er', er)\n  return window.notify({\n    type: 'error',\n    description: er.message,\n  })\n}\n\nexport const undecimalizeWrapper = (value: BN, decimals: number) => {\n  const valueInBigInt = BigInt(value.toString())\n\n  return utils.undecimalize(valueInBigInt, decimals)\n}\n","import { useCallback } from 'react'\nimport { Address, BN, web3 } from '@project-serum/anchor'\nimport { useMint } from '@senhub/providers'\nimport util from '@senswap/sen-js/dist/utils'\n\nexport const useOracles = () => {\n  const { getDecimals } = useMint()\n\n  const decimalizeMintAmount = useCallback(\n    async (amount: number | string, mintAddress: Address) => {\n      const decimals = await getDecimals(\n        new web3.PublicKey(mintAddress).toString(),\n      )\n      return new BN(util.decimalize(amount, decimals).toString())\n    },\n    [getDecimals],\n  )\n\n  const undecimalizeMintAmount = useCallback(\n    async (amount: BN, mintAddress: Address) => {\n      const decimals = await getDecimals(\n        new web3.PublicKey(mintAddress).toString(),\n      )\n      return util.undecimalize(BigInt(amount.toString()), decimals)\n    },\n    [getDecimals],\n  )\n\n  const decimalize = useCallback(\n    (amount: number | string, decimals: number) => {\n      return new BN(util.decimalize(amount, decimals).toString())\n    },\n    [],\n  )\n\n  const undecimalize = useCallback((amount: BN, decimals: number) => {\n    return util.undecimalize(BigInt(amount.toString()), decimals)\n  }, [])\n\n  return {\n    decimalize,\n    undecimalize,\n    decimalizeMintAmount,\n    undecimalizeMintAmount,\n  }\n}\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n  baseMint: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    baseMint: '86RG7SrLu1dtuE2Eyg3XqWjEdpUwNUM7hsbMS5MVmv66',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    baseMint: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    baseMint: '',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\n/**\n * Get token decimals from multiple resources. This hook needs MintProvider for working.\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * @param mintAddress Mint address\n * @returns Decimals\n */\nconst useMintDecimals = (mintAddress: string) => {\n  const [decimals, setDecimals] = useState<number | undefined>(undefined)\n  const { getDecimals } = useMint()\n\n  const fetchDecimals = useCallback(async () => {\n    try {\n      const decimals = await getDecimals(mintAddress)\n      return setDecimals(decimals)\n    } catch (er: any) {\n      return setDecimals(undefined)\n    }\n  }, [mintAddress, getDecimals])\n\n  useEffect(() => {\n    fetchDecimals()\n  }, [fetchDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useEffect, useState } from 'react'\nimport { account, DEFAULT_EMPTY_ADDRESS, utils } from '@senswap/sen-js'\nimport { useAccount, useWallet } from '@senhub/providers'\n\nimport useMintDecimals from './useMintDecimals'\n\nexport type AccountBalanceReturn = {\n  amount: bigint\n  decimals: number\n  balance: number\n  mintAddress: string\n}\n\nconst buildResult = (\n  mintAddress?: string,\n  amount?: bigint,\n  decimals?: number,\n) => {\n  if (\n    !account.isAddress(mintAddress) ||\n    amount === undefined ||\n    decimals === undefined\n  )\n    return { amount: BigInt(0), decimals: 0, balance: 0 }\n  return {\n    mintAddress,\n    amount,\n    decimals,\n    balance: Number(utils.undecimalize(amount, decimals)),\n  }\n}\n\n/**\n * Get account balance. This hook needs WalletProvider, MintProvider, and AccountProvider for working.\n * WalletProvider Ref: https://docs.sentre.io/senhub/development/providers/wallet-provider\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * AccountProvider Ref: https://docs.sentre.io/senhub/development/providers/account-provider\n * @param accountAddress Associated account address\n * @returns AccountBalanceReturn\n * - AccountBalanceReturn.amount: The amount with decimals\n * - AccountBalanceReturn.decimals: The corresponding mint decimals\n * - AccountBalanceReturn.balance: The human-readable balance (undecimalized amount)\n * - AccountBalanceReturn.mintAddress: The corresponding mint\n */\nconst useAccountBalance = (accountAddress: string) => {\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const { amount, mint: mintAddress } = accounts[accountAddress] || {}\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  if (!account.isAddress(walletAddress) || !account.isAddress(accountAddress))\n    return buildResult()\n  if (accountAddress === walletAddress)\n    return buildResult(DEFAULT_EMPTY_ADDRESS, lamports, 9)\n\n  return buildResult(mintAddress, amount, decimals)\n}\n\nexport default useAccountBalance\n\n/**\n * The same as useAccountBalance but the input is mint address\n * @param mintAddress Mint address\n * @returns AccountBalanceReturn\n */\nexport const useAccountBalanceByMintAddress = (mintAddress: string) => {\n  const [accountAddress, setAccountAddress] = useState('')\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const data = useAccountBalance(accountAddress)\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(walletAddress) || !account.isAddress(mintAddress))\n        return setAccountAddress('')\n      const {\n        sentre: { splt },\n      } = window\n      try {\n        const address = await splt.deriveAssociatedAddress(\n          walletAddress,\n          mintAddress,\n        )\n        return setAccountAddress(address)\n      } catch (er) {\n        return setAccountAddress('')\n      }\n    })()\n  })\n\n  return data\n}\n","import { BN } from '@project-serum/anchor'\nimport util from '@senswap/sen-js/dist/utils'\n\nimport { GENERAL_DECIMAL, LPT_DECIMAL } from 'app/constants'\n\nexport type PoolPairLpData = {\n  balanceIn: BN\n  balanceOut: BN\n  weightIn: number\n  decimalIn: number\n  swapFee: BN\n}\n\nexport type PoolPairData = {\n  balanceIn: BN\n  balanceOut: BN\n  weightIn: number\n  weightOut: number\n  decimalIn: number\n  decimalOut: number\n  swapFee: BN\n}\n\nexport const useLucidOracles = () => {\n  const calcLPOutGivenExactTokensIn = (\n    tokenAmountIns: BN[],\n    balanceIns: BN[],\n    totalSupply: BN,\n    decimalIns: number[],\n    swapFee: BN,\n  ) => {\n    const fee = Number(\n      util.undecimalize(BigInt(swapFee.toString()), GENERAL_DECIMAL),\n    )\n    const numTotalSupply = Number(\n      util.undecimalize(BigInt(totalSupply.toString()), LPT_DECIMAL),\n    )\n    const numBalanceIns = balanceIns.map((value, idx) =>\n      Number(util.undecimalize(BigInt(value.toString()), decimalIns[idx])),\n    )\n    const numAmountIns = tokenAmountIns.map((value, idx) =>\n      Number(util.undecimalize(BigInt(value.toString()), decimalIns[idx])),\n    )\n\n    console.log(\n      fee,\n      numTotalSupply,\n      numBalanceIns,\n      numAmountIns,\n      'numAmountIns',\n    )\n    const balanceRatiosWithFee = new Array(tokenAmountIns.length)\n    let invariantRatioWithFees = 0\n    for (let i = 0; i < tokenAmountIns.length; i++) {\n      balanceRatiosWithFee[i] =\n        (numBalanceIns[i] + numAmountIns[i]) / numBalanceIns[i]\n\n      invariantRatioWithFees += balanceRatiosWithFee[i] * 0.5\n    }\n\n    let invariantRatio = 1\n\n    for (let i = 0; i < tokenAmountIns.length; i++) {\n      let amountInWithoutFee = numAmountIns[i]\n      if (balanceRatiosWithFee[i] > invariantRatioWithFees) {\n        let nonTaxableAmount = numBalanceIns[i] * (invariantRatioWithFees - 1)\n        let taxableAmount = numAmountIns[i] - nonTaxableAmount\n        amountInWithoutFee = nonTaxableAmount + taxableAmount * (1 - fee)\n      }\n      let balanceRatio =\n        (numBalanceIns[i] + amountInWithoutFee) / numBalanceIns[i]\n      invariantRatio = invariantRatio * balanceRatio ** 0.5\n    }\n    if (invariantRatio > 1) return numTotalSupply * (invariantRatio - 1)\n    return 0\n  }\n\n  const spotPriceAfterSwapTokenInForExactBPTOut = (\n    amount: BN,\n    poolPairData: PoolPairLpData,\n  ) => {\n    const Bo = Number(\n      util.undecimalize(\n        BigInt(poolPairData.balanceOut.toString()),\n        LPT_DECIMAL,\n      ),\n    )\n    const Ao = Number(util.undecimalize(BigInt(amount.toString()), LPT_DECIMAL))\n    const wi = poolPairData.weightIn\n    const Bi = Number(\n      util.undecimalize(\n        BigInt(poolPairData.balanceIn.toString()),\n        poolPairData.decimalIn,\n      ),\n    )\n    const f = Number(\n      util.undecimalize(\n        BigInt(poolPairData.swapFee.toString()),\n        GENERAL_DECIMAL,\n      ),\n    )\n\n    return (\n      (Math.pow((Ao + Bo) / Bo, 1 / wi) * Bi) /\n      ((Ao + Bo) * (1 + f * (-1 + wi)) * wi)\n    )\n  }\n\n  const calcLpForTokensZeroPriceImpact = (\n    tokenAmountIns: BN[],\n    balanceIns: BN[],\n    totalSupply: BN,\n    decimalIns: number[],\n  ) => {\n    const numTokenAmountIns = tokenAmountIns.map((value, idx) => {\n      return Number(\n        util.undecimalize(BigInt(value.toString()), decimalIns[idx]),\n      )\n    })\n\n    const amountLpOut = numTokenAmountIns.reduce((totalBptOut, amountIn, i) => {\n      // Calculate amount of BPT gained per token in\n      const poolPairData: PoolPairLpData = {\n        balanceIn: balanceIns[i],\n        balanceOut: totalSupply,\n        weightIn: 0.5,\n        decimalIn: decimalIns[i],\n        swapFee: new BN(0),\n      }\n      const LpPrice = spotPriceAfterSwapTokenInForExactBPTOut(\n        new BN(0),\n        poolPairData,\n      )\n      // Multiply by amountIn to get contribution to total bpt out\n      const LpOut = amountIn / LpPrice\n      return totalBptOut + LpOut\n    }, 0)\n    return amountLpOut\n  }\n\n  const calcDepositInfo = (\n    amountIns: BN[],\n    balanceIns: BN[],\n    totalSupply: BN,\n    decimalIns: number[],\n    swapFee: BN,\n  ) => {\n    if (decimalIns.length === 0) return { lpOut: 0, impactPrice: 0 }\n\n    const lpOut = Number(\n      calcLPOutGivenExactTokensIn(\n        amountIns,\n        balanceIns,\n        totalSupply,\n        decimalIns,\n        swapFee,\n      ).toFixed(9),\n    )\n\n    const lpOutZeroPriceImpact = Number(\n      calcLpForTokensZeroPriceImpact(\n        amountIns,\n        balanceIns,\n        totalSupply,\n        decimalIns,\n      ).toFixed(9),\n    )\n\n    const impactPrice = 1 - lpOut / lpOutZeroPriceImpact\n\n    return { lpOut, impactPrice: impactPrice || 0 }\n  }\n\n  const calcMintReceivesRemoveFullSide = (\n    lptAmount: BN,\n    lptSupply: BN,\n    reserves: BN[],\n  ) => {\n    const numLptAmount = lptAmount.toNumber()\n    const numLptSupply = lptSupply.toNumber()\n\n    let lpt_rate = numLptAmount / numLptSupply\n    let amounts_out: BN[] = reserves.map((reserve) => {\n      return new BN(lpt_rate * Number(reserve))\n    })\n    return amounts_out\n  }\n\n  const calcOutGivenInSwap = (\n    amountIn: number,\n    balanceOut: number,\n    balanceIn: number,\n    swapFee: number,\n  ): number => {\n    // const numSwapFee = swapFee.toNumber() / GENERAL_NORMALIZED_NUMBER\n    const ratioBeforeAfterBalance = balanceIn / (balanceIn + amountIn)\n\n    return balanceOut * (1 - ratioBeforeAfterBalance) * (1 - swapFee)\n  }\n\n  return { calcDepositInfo, calcMintReceivesRemoveFullSide, calcOutGivenInSwap }\n}\n","export const LPT_DECIMAL = 9\nexport const STABLE_TOKEN_DECIMAL = 9\nexport const BASE_TOKEN_DECIMAL = 9\nexport const GENERAL_DECIMAL = 9\nexport const GENERAL_NORMALIZED_NUMBER = 10 ** 9\n","import { AppState } from 'app/model'\nimport { useSelector } from 'react-redux'\n\nexport const usePoolData = (poolAddress: string) => {\n  const poolData = useSelector((state: AppState) => state.pools[poolAddress])\n  return poolData\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nconst KEYSIZE = 3\n\nconst Search = ({\n  onChange,\n  disabled = false,\n  mints,\n}: {\n  onChange: (data: string[]) => void\n  disabled?: boolean\n  mints: string[]\n}) => {\n  const [keyword, setKeyword] = useState('')\n  const { tokenProvider } = useMint()\n\n  const search = useCallback(async () => {\n    if (!keyword || keyword.length < KEYSIZE) return onChange(mints)\n    const raw = await tokenProvider.find(keyword)\n    const data = raw\n      .filter(({ address }) => mints.includes(address))\n      .map(({ address }) => address)\n    // Search by address\n    mints.forEach((mintAddress) => {\n      if (data.includes(mintAddress)) return\n      if (!mintAddress.toLowerCase().includes(keyword.toLowerCase())) return\n      return data.push(mintAddress)\n    })\n    return onChange(data)\n  }, [keyword, onChange, tokenProvider, mints])\n\n  useEffect(() => {\n    search()\n  }, [search])\n\n  return (\n    <Card\n      className=\"mint-search\"\n      bodyStyle={{ padding: 0 }}\n      style={{ padding: 8 }}\n      bordered={false}\n    >\n      <Input\n        placeholder=\"Search\"\n        value={keyword}\n        size=\"small\"\n        bordered={false}\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            size=\"small\"\n            onClick={keyword ? () => setKeyword('') : () => {}}\n            icon={\n              <IonIcon name={keyword ? 'close-outline' : 'search-outline'} />\n            }\n            disabled={disabled}\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setKeyword(e.target.value)\n        }\n        disabled={disabled}\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { Space, Typography, Card, Divider } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nconst Mint = ({\n  mintAddress,\n  onClick,\n  active = false,\n}: {\n  mintAddress: string\n  onClick: () => void\n  active?: boolean\n}) => {\n  return (\n    <Card\n      bodyStyle={{\n        padding: 0,\n      }}\n      className=\"card-child-balansol mint-select-item\"\n      bordered={active}\n      onClick={onClick}\n      hoverable\n    >\n      <Space size={12} style={{ display: 'flex' }}>\n        <MintAvatar mintAddress={mintAddress} size={32} />\n        <Typography.Text style={{ margin: 0 }}>\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Text>\n        <Divider type=\"vertical\" style={{ margin: 0 }} />\n        <Typography.Text type=\"secondary\" style={{ margin: 0, fontSize: 12 }}>\n          <MintName mintAddress={mintAddress} />\n        </Typography.Text>\n      </Space>\n    </Card>\n  )\n}\n\nexport default Mint\n","import LazyLoad from '@sentre/react-lazyload'\n\nimport { Row, Col, Typography, Modal } from 'antd'\nimport Search from './search'\nimport Mint from './mint'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { useState } from 'react'\n\nconst LIMITATION = 100\n\nconst MintSelection = ({\n  selectedMint,\n  onChange,\n  visible,\n  mints,\n  onClose,\n}: {\n  selectedMint: string\n  onChange: (mint: string) => void\n  visible: boolean\n  mints: string[]\n  onClose: () => void\n}) => {\n  const [mintsSearched, setMintsSearched] = useState(mints)\n\n  return (\n    <Modal\n      visible={visible}\n      closeIcon={<IonIcon name=\"close\" />}\n      footer={null}\n      destroyOnClose={true}\n      centered={true}\n      onCancel={onClose}\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Typography.Title level={4}>Select token</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <Search mints={mints} onChange={setMintsSearched} />\n        </Col>\n        <Col span={24}>\n          <Row gutter={[16, 16]} style={{ height: 300 }} className=\"scrollbar\">\n            <Col span={24}>\n              <Row gutter={[16, 16]}>\n                {mintsSearched.slice(0, LIMITATION).map((mintAddress, i) => (\n                  <Col span={24} key={i}>\n                    <LazyLoad height={48} overflow>\n                      <Mint\n                        mintAddress={mintAddress}\n                        onClick={() => onChange(mintAddress)}\n                        active={selectedMint === mintAddress}\n                      />\n                    </LazyLoad>\n                  </Col>\n                ))}\n              </Row>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Modal>\n  )\n}\n\nexport default MintSelection\n","import { useState, Fragment, ReactNode } from 'react'\n\nimport { Typography, Space } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport MintSelection from './mintSelection'\n\nimport './index.less'\n\nconst Selection = ({\n  selectedMint,\n  mints = [],\n  onChange = () => {},\n  mintLabel,\n  mintAvatar,\n}: {\n  selectedMint: string\n  mints?: string[]\n  onChange?: (mint: string) => void\n  mintLabel?: ReactNode\n  mintAvatar?: ReactNode\n}) => {\n  const [visible, setVisible] = useState(false)\n\n  const onSelection = (selectedMint: string) => {\n    if (onChange) onChange(selectedMint)\n    return setVisible(false)\n  }\n\n  return (\n    <Fragment>\n      {/* Mint selected */}\n\n      <Space\n        className=\"mint-select\"\n        onClick={() => setVisible(mints.length > 0)}\n      >\n        {mintAvatar || <MintAvatar mintAddress={selectedMint} />}\n        {mintLabel || (\n          <Fragment>\n            <Typography.Text type=\"secondary\">\n              <MintSymbol mintAddress={selectedMint} />\n            </Typography.Text>\n            {mints.length ? (\n              <Typography.Text type=\"secondary\">\n                <IonIcon name=\"chevron-down-outline\" />\n              </Typography.Text>\n            ) : null}\n          </Fragment>\n        )}\n      </Space>\n\n      {/* Modal select tokens */}\n      {visible && (\n        <MintSelection\n          selectedMint={selectedMint}\n          visible={visible}\n          onChange={onSelection}\n          mints={mints}\n          onClose={() => setVisible(false)}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default Selection\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on the max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n\n    // Handle cursor jumping\n    // To prevent autofocus on mobile, we must strictly check cursor different from null\n    if (cursor !== null) innerRef?.current?.setSelectionRange(cursor, cursor)\n\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Card, Col, Row, Space, Typography } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { useLucid } from 'app/hooks/useLucid'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { AppState } from 'app/model'\nimport configs from 'app/configs'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\nimport { useLucidOracles } from 'app/hooks/useLucidOracles'\nimport { usePoolData } from 'app/hooks/pool/usePoolData'\nimport Selection from 'app/components/selection'\nimport { MintAvatar } from 'shared/antd/mint'\nimport NumericInput from 'shared/antd/numericInput'\n\ntype BuyProps = {\n  poolAddress: string\n}\n\nconst {\n  sol: { baseMint },\n} = configs\n\nconst Buy = ({ poolAddress }: BuyProps) => {\n  const [amount, setAmount] = useState('0')\n  const [receive, setReceive] = useState('0')\n  const [loading, setLoading] = useState(false)\n  const pools = useSelector((state: AppState) => state.pools)\n  const { mint } = pools[poolAddress]\n  const mintAddress = mint.toBase58()\n  const lucid = useLucid()\n  const { decimalizeMintAmount, undecimalizeMintAmount } = useOracles()\n  const { calcOutGivenInSwap } = useLucidOracles()\n  const poolData = usePoolData(poolAddress)\n\n  const { balance } = useAccountBalanceByMintAddress(baseMint)\n\n  const onBuy = async () => {\n    setLoading(true)\n    try {\n      console.log(amount, 'so luong amount')\n      const amountBN = await decimalizeMintAmount(amount, baseMint)\n      const { txId } = await lucid.buy(poolAddress, amountBN, amountBN)\n      return notifySuccess('Deposited', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const onChangeAmount = async (amount: string) => {\n    setAmount(amount)\n    const { balance, stableBalance, fee, stableMint, mint } = poolData\n    const balanceNum = await undecimalizeMintAmount(balance, mint)\n    const stableNum = await undecimalizeMintAmount(stableBalance, stableMint)\n    // temp to get decimal\n    const numSwapFee = await undecimalizeMintAmount(fee, stableMint)\n    const receiveAmount = calcOutGivenInSwap(\n      Number(amount),\n      Number(balanceNum),\n      Number(stableNum),\n      Number(numSwapFee),\n    )\n    setReceive(`${receiveAmount}`)\n  }\n\n  return (\n    <Row gutter={[24, 24]} justify=\"center\">\n      <Col span={24}>\n        <Row>\n          <Col span={24}>\n            <Card\n              bordered={false}\n              style={{\n                borderRadius: '4px 4px 0 0',\n                background: 'rgb(20 20 20 / 10%)',\n                boxShadow: 'unset',\n              }}\n            >\n              <Row align=\"middle\" justify=\"end\">\n                <Col>\n                  <Space\n                    onClick={() => setAmount(balance.toString())}\n                    style={{ cursor: 'pointer' }}\n                  >\n                    <Typography.Text\n                      type=\"secondary\"\n                      style={{ textDecoration: 'underline' }}\n                    >\n                      Available:\n                    </Typography.Text>\n                    <Typography.Text\n                      style={{ color: '#000', textDecoration: 'underline' }}\n                    >\n                      {balance}\n                    </Typography.Text>\n                  </Space>\n                </Col>\n                <Col span={24} />\n                <Col span={4}>\n                  <Selection\n                    mintAvatar={<MintAvatar mintAddress={baseMint} />}\n                    selectedMint={baseMint}\n                  />\n                </Col>\n                <Col span={20}>\n                  <NumericInput\n                    bordered={false}\n                    style={{\n                      color: '#000',\n                      fontSize: 32,\n                      textAlign: 'right',\n                    }}\n                    value={amount}\n                    onValue={onChangeAmount}\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col span={24} style={{ position: 'relative', minHeight: 2 }}>\n            <IonIcon\n              style={{\n                position: 'absolute',\n                color: '#000000',\n                borderRadius: 99,\n                border: '2px solid #e2f8f4',\n                left: '50%',\n                background: '#c9e3d9',\n                top: -8,\n                zIndex: 99,\n              }}\n              name=\"arrow-down-outline\"\n            />\n          </Col>\n          <Col span={24}>\n            <Card\n              bordered={false}\n              style={{\n                borderRadius: '0 0 4px 4px',\n                background: 'rgb(20 20 20 / 10%)',\n                boxShadow: 'unset',\n              }}\n            >\n              <Row gutter={[24, 24]} align=\"middle\">\n                <Col span={4}>\n                  <Selection\n                    mintAvatar={<MintAvatar mintAddress={mintAddress} />}\n                    selectedMint={mintAddress}\n                  />\n                </Col>\n                <Col span={20} style={{ textAlign: 'right' }}>\n                  <Typography.Text\n                    style={{\n                      color: '#000',\n                      fontSize: 32,\n                      paddingRight: 10,\n                      paddingLeft: 32,\n                    }}\n                    ellipsis\n                  >\n                    {receive}\n                  </Typography.Text>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Button loading={loading} type=\"primary\" block onClick={onBuy}>\n          Buy\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Buy\n","import { useState } from 'react'\n\nimport { Button, Card, Col, Row, Space, Typography } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { useLucid } from 'app/hooks/useLucid'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { useSelector } from 'react-redux'\nimport { AppState } from 'app/model'\nimport configs from 'app/configs'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\nimport { useLucidOracles } from 'app/hooks/useLucidOracles'\nimport { usePoolData } from 'app/hooks/pool/usePoolData'\nimport Selection from 'app/components/selection'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintAvatar } from 'shared/antd/mint'\n\ntype BuyProps = {\n  poolAddress: string\n}\n\nconst {\n  sol: { baseMint },\n} = configs\n\nconst Sell = ({ poolAddress }: BuyProps) => {\n  const [amount, setAmount] = useState('0')\n  const [receive, setReceive] = useState('0')\n  const [loading, setLoading] = useState(false)\n  const pools = useSelector((state: AppState) => state.pools)\n  const { mint } = pools[poolAddress]\n  const mintAddress = mint.toBase58()\n  const lucid = useLucid()\n  const { decimalizeMintAmount, undecimalizeMintAmount } = useOracles()\n  const { calcOutGivenInSwap } = useLucidOracles()\n  const poolData = usePoolData(poolAddress)\n\n  const { balance } = useAccountBalanceByMintAddress(mintAddress)\n\n  const onBuy = async () => {\n    setLoading(true)\n    try {\n      console.log(amount, 'so luong amount')\n      const amountBN = await decimalizeMintAmount(amount, baseMint)\n      const { txId } = await lucid.buy(poolAddress, amountBN, amountBN)\n      return notifySuccess('Deposited', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const onChangeAmount = async (amount: string) => {\n    setAmount(amount)\n    const { balance, stableBalance, fee, stableMint, mint } = poolData\n    const balanceNum = await undecimalizeMintAmount(balance, mint)\n    const stableNum = await undecimalizeMintAmount(stableBalance, stableMint)\n    // temp to get decimal\n    const numSwapFee = await undecimalizeMintAmount(fee, stableMint)\n    const receiveAmount = calcOutGivenInSwap(\n      Number(amount),\n      Number(balanceNum),\n      Number(stableNum),\n      Number(numSwapFee),\n    )\n    setReceive(`${receiveAmount}`)\n  }\n\n  return (\n    <Row gutter={[24, 24]} justify=\"center\">\n      <Col span={24}>\n        <Row>\n          <Col span={24}>\n            <Card\n              bordered={false}\n              style={{\n                borderRadius: '4px 4px 0 0',\n                background: 'rgb(20 20 20 / 10%)',\n                boxShadow: 'unset',\n              }}\n            >\n              <Row align=\"middle\" justify=\"end\">\n                <Col>\n                  <Space\n                    onClick={() => setAmount(balance.toString())}\n                    style={{ cursor: 'pointer' }}\n                  >\n                    <Typography.Text\n                      type=\"secondary\"\n                      style={{ textDecoration: 'underline' }}\n                    >\n                      Available:\n                    </Typography.Text>\n                    <Typography.Text\n                      style={{ color: '#000', textDecoration: 'underline' }}\n                    >\n                      {balance}\n                    </Typography.Text>\n                  </Space>\n                </Col>\n                <Col span={24} />\n                <Col span={4}>\n                  <Selection\n                    mintAvatar={<MintAvatar mintAddress={mintAddress} />}\n                    selectedMint={mintAddress}\n                  />\n                </Col>\n                <Col span={20}>\n                  <NumericInput\n                    bordered={false}\n                    style={{\n                      color: '#000',\n                      fontSize: 32,\n                      textAlign: 'right',\n                    }}\n                    value={amount}\n                    onValue={onChangeAmount}\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col span={24} style={{ position: 'relative', minHeight: 2 }}>\n            <IonIcon\n              style={{\n                position: 'absolute',\n                color: '#000000',\n                borderRadius: 99,\n                border: '2px solid #e2f8f4',\n                left: '50%',\n                background: '#c9e3d9',\n                top: -8,\n                zIndex: 99,\n              }}\n              name=\"arrow-down-outline\"\n            />\n          </Col>\n          <Col span={24}>\n            <Card\n              bordered={false}\n              style={{\n                borderRadius: '0 0 4px 4px',\n                background: 'rgb(20 20 20 / 10%)',\n                boxShadow: 'unset',\n              }}\n            >\n              <Row gutter={[24, 24]} align=\"middle\">\n                <Col span={4}>\n                  <Selection\n                    mintAvatar={<MintAvatar mintAddress={baseMint} />}\n                    selectedMint={baseMint}\n                  />\n                </Col>\n                <Col span={20} style={{ textAlign: 'right' }}>\n                  <Typography.Text\n                    style={{\n                      color: '#000',\n                      fontSize: 32,\n                      paddingRight: 10,\n                      paddingLeft: 32,\n                    }}\n                    ellipsis\n                  >\n                    {receive}\n                  </Typography.Text>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Button loading={loading} type=\"primary\" block onClick={onBuy}>\n          Buy\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Sell\n","import { Fragment, useState } from 'react'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { Col, Modal, Row, Segmented } from 'antd'\nimport { SegmentedValue } from 'antd/lib/segmented'\nimport ButtonNeon from 'app/components/buttonNeon'\nimport Buy from './buy'\nimport Sell from './sell'\n\nconst BuyAndSell = ({ poolAddress }: { poolAddress: string }) => {\n  const [visible, setVisible] = useState(false)\n  const [value, setValue] = useState<SegmentedValue>('Buy')\n\n  return (\n    <Fragment>\n      <ButtonNeon onClick={() => setVisible(true)}>Buy / Sell</ButtonNeon>\n      <Modal\n        visible={visible}\n        closeIcon={<IonIcon name=\"close-outline\" />}\n        onCancel={() => setVisible(false)}\n        footer={null}\n        className=\"lucid-modal-gradient\"\n      >\n        <Row gutter={[24, 24]}>\n          <Col span={24} style={{ textAlign: 'center' }}>\n            <Segmented\n              value={value}\n              onChange={(value) => setValue(value)}\n              options={['Buy', 'Sell']}\n            />\n          </Col>\n          <Col span={24}>\n            {value === 'Buy' ? (\n              <Buy poolAddress={poolAddress} />\n            ) : (\n              <Sell poolAddress={poolAddress} />\n            )}\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default BuyAndSell\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { useOracles } from 'app/hooks/useOracles'\nimport { usePoolData } from './usePoolData'\n\nconst LPT_DECIMALS = 9\nconst STABLE_DECIMALS = 9\n\nexport const usePoolAmounts = (poolAddress: string) => {\n  const [amounts, setAmounts] = useState({\n    amount: 0,\n    stableAmount: 0,\n    baseAmount: 0,\n    lptAmount: 0,\n    lptFeeAmount: 0,\n  })\n  const poolData = usePoolData(poolAddress)\n  const { undecimalize, undecimalizeMintAmount } = useOracles()\n\n  const calcPrices = useCallback(async () => {\n    const {\n      balance,\n      mint,\n      stableBalance,\n      lptSupply,\n      baseBalance,\n      baseMint,\n      totalLptFee,\n    } = poolData\n    const amount = Number(await undecimalizeMintAmount(balance, mint))\n    const stableAmount = Number(undecimalize(stableBalance, STABLE_DECIMALS))\n    const baseAmount = Number(undecimalizeMintAmount(baseBalance, baseMint))\n    const lptAmount = Number(undecimalize(lptSupply, LPT_DECIMALS))\n    const lptFeeAmount = Number(undecimalize(totalLptFee, LPT_DECIMALS))\n    return setAmounts({\n      amount,\n      stableAmount,\n      baseAmount,\n      lptAmount,\n      lptFeeAmount,\n    })\n  }, [poolData, undecimalize, undecimalizeMintAmount])\n\n  useEffect(() => {\n    calcPrices()\n  }, [calcPrices])\n\n  return amounts\n}\n","import { usePoolData } from './usePoolData'\n\nconst SECOND_PER_DATE = 24 * 60 * 60\n\nexport const usePoolDay = (poolAddress: string) => {\n  const pool = usePoolData(poolAddress)\n\n  const currentTime = Math.floor(new Date().getTime() / 1000)\n  const startTime = pool.startTime.toNumber()\n\n  let date = (currentTime - startTime) / SECOND_PER_DATE\n  if (date < 1) date = 1\n\n  return date\n}\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { usePoolAmounts } from './usePoolAmounts'\n\nexport const usePoolPrices = (poolAddress: string) => {\n  const poolAmounts = usePoolAmounts(poolAddress)\n  const [poolPrices, setPoolPrices] = useState({\n    mintPrice: 0,\n    lptPrice: 0,\n  })\n\n  const calcPrices = useCallback(async () => {\n    const { amount, stableAmount, lptAmount } = poolAmounts\n    const mintPrice = stableAmount / amount\n    const lptPrice = (mintPrice * amount + stableAmount) / lptAmount\n    return setPoolPrices({\n      mintPrice,\n      lptPrice,\n    })\n  }, [poolAmounts])\n\n  useEffect(() => {\n    calcPrices()\n  }, [calcPrices])\n\n  return poolPrices\n}\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMint } from '@senhub/providers'\n\nimport { Button, Col, Row, Space, Typography } from 'antd'\nimport { MintSelection } from 'shared/antd/mint'\n\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { useLucid } from 'app/hooks/useLucid'\nimport { AppState } from 'app/model'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\nimport { numeric } from 'shared/util'\nimport NumericInput from 'shared/antd/numericInput'\nimport { BN } from 'bn.js'\nimport { useLucidOracles } from 'app/hooks/useLucidOracles'\nimport { BASE_TOKEN_DECIMAL } from 'app/constants'\n\nconst Deposit = ({\n  poolAddress,\n  closeModal,\n}: {\n  poolAddress: string\n  closeModal: () => void\n}) => {\n  const pools = useSelector((state: AppState) => state.pools)\n  const { baseMint, mint, lptMint, balance, baseBalance, lptSupply, fee } =\n    pools[poolAddress]\n  const [amount, setAmount] = useState('0')\n  const [baseAmount, setBaseAmount] = useState('0')\n  const [loading, setLoading] = useState(false)\n  const [estimatedLP, setEstimatedLP] = useState(0)\n\n  const lucid = useLucid()\n  const { decimalizeMintAmount } = useOracles()\n  const mintBalance = useAccountBalanceByMintAddress(mint.toBase58())\n  const baseBalanceOfAddress = useAccountBalanceByMintAddress(\n    baseMint.toBase58(),\n  )\n  const lptBalance = useAccountBalanceByMintAddress(lptMint.toBase58())\n  const { calcDepositInfo } = useLucidOracles()\n  const { getDecimals } = useMint()\n\n  const onDeposit = async () => {\n    try {\n      setLoading(true)\n      const amountBN = await decimalizeMintAmount(amount, mint)\n      const baseBN = await decimalizeMintAmount(baseAmount, baseMint)\n      const { txId } = await lucid.addLiquidity(\n        poolAddress,\n        amountBN,\n        new BN(0),\n        baseBN,\n      )\n      closeModal()\n      return notifySuccess('Deposited', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const onChangeTokenAmount = async (value: string) => {\n    setAmount(value)\n    const amountBN = await decimalizeMintAmount(value, mint)\n    const baseAmountBN = await decimalizeMintAmount(baseAmount, baseMint)\n    // const amountBN = await decimalizeMintAmount(amount, lptMint)\n    const amountIns = [amountBN, baseAmountBN]\n    const balanceIns = [balance, baseBalance]\n    const tokeDecimals = await getDecimals(mint.toBase58())\n    const decimalIns = [tokeDecimals, BASE_TOKEN_DECIMAL]\n    const lpt = calcDepositInfo(\n      amountIns,\n      balanceIns,\n      lptSupply,\n      decimalIns,\n      fee,\n    )\n    setEstimatedLP(lpt.lpOut)\n  }\n\n  const onChangeBaseAmount = async (value: string) => {\n    setBaseAmount(value)\n    const amountBN = await decimalizeMintAmount(amount, mint)\n    const baseAmountBN = await decimalizeMintAmount(value, baseMint)\n    // const amountBN = await decimalizeMintAmount(amount, lptMint)\n    const amountIns = [amountBN, baseAmountBN]\n    const balanceIns = [balance, baseBalance]\n    const tokeDecimals = await getDecimals(mint.toBase58())\n    const decimalIns = [tokeDecimals, BASE_TOKEN_DECIMAL]\n    const lpt = calcDepositInfo(\n      amountIns,\n      balanceIns,\n      lptSupply,\n      decimalIns,\n      fee,\n    )\n    setEstimatedLP(lpt.lpOut)\n  }\n\n  return (\n    <Row gutter={[16, 16]} style={{ color: '#000000' }}>\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Typography.Text style={{ color: '#000000' }}>\n          Available: {numeric(mintBalance.balance).format('0,0.[000]')}\n        </Typography.Text>\n      </Col>\n      <Col span={24}>\n        <Row justify=\"space-between\">\n          <Col>\n            <Button\n              type=\"primary\"\n              onClick={() => setAmount(mintBalance.balance.toString())}\n            >\n              MAX\n            </Button>\n          </Col>\n          <Col>\n            <NumericInput\n              bordered={false}\n              style={{\n                color: '#000000',\n                textAlign: 'center',\n                fontSize: '20px',\n                fontWeight: 700,\n              }}\n              value={amount}\n              onValue={onChangeTokenAmount}\n            />\n          </Col>\n          <Col>\n            <MintSelection\n              style={{\n                background: '#F4FCEB',\n                color: '#000000',\n                borderRadius: 32,\n                height: 40,\n                width: 135,\n              }}\n              disabled\n              value={mint.toBase58()}\n            />\n          </Col>\n        </Row>\n      </Col>\n      {/* Base Token */}\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Typography.Text style={{ color: '#000000' }}>\n          Available: {numeric(baseBalanceOfAddress.balance).format('0,0.[000]')}\n        </Typography.Text>\n      </Col>\n      <Col span={24}>\n        <Row justify=\"space-between\">\n          <Col>\n            <Button\n              type=\"primary\"\n              onClick={() =>\n                setBaseAmount(baseBalanceOfAddress.balance.toString())\n              }\n            >\n              MAX\n            </Button>\n          </Col>\n          <Col>\n            <NumericInput\n              bordered={false}\n              style={{\n                color: '#000000',\n                textAlign: 'center',\n                fontSize: '20px',\n                fontWeight: 700,\n              }}\n              value={baseAmount}\n              onValue={onChangeBaseAmount}\n            />\n          </Col>\n          <Col>\n            <MintSelection\n              style={{\n                background: '#F4FCEB',\n                color: '#000000',\n                borderRadius: 32,\n                height: 40,\n                width: 135,\n              }}\n              disabled\n              value={baseMint.toBase58()}\n            />\n          </Col>\n        </Row>\n      </Col>\n      {/* Review */}\n      <Col span={24}>\n        <Typography.Title style={{ color: '#000000' }} level={4}>\n          Review\n        </Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Row>\n            <Col flex=\"auto\">\n              <Typography.Text style={{ color: '#000000' }}>\n                My supply\n              </Typography.Text>\n            </Col>\n            <Col>\n              <Typography.Title level={4} style={{ color: '#000000' }}>\n                {numeric(lptBalance.balance).format('0,0.[000]')}\n              </Typography.Title>\n            </Col>\n          </Row>\n          <Row>\n            <Col flex=\"auto\">\n              <Typography.Text style={{ color: '#000000' }}>\n                You will receive\n              </Typography.Text>\n            </Col>\n            <Col>\n              <Typography.Title level={4} style={{ color: '#000000' }}>\n                {numeric(estimatedLP).format('0,0.[000]')}\n              </Typography.Title>\n            </Col>\n          </Row>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Button loading={loading} block onClick={onDeposit} type=\"primary\">\n          Deposit\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Deposit\n","import { useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Card, Col, Row, Space, Typography } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { AppState } from 'app/model'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\nimport { numeric } from 'shared/util'\nimport { useLucid } from 'app/hooks/useLucid'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport { usePoolAmounts } from 'app/hooks/pool/usePoolAmounts'\n\nconst Withdraw = ({ poolAddress }: { poolAddress: string }) => {\n  const [amount, setAmount] = useState('0')\n  const [loading, setLoading] = useState(false)\n  const pools = useSelector((state: AppState) => state.pools)\n  const { lptMint, baseMint, mint } = pools[poolAddress]\n  const { balance } = useAccountBalanceByMintAddress(lptMint.toBase58())\n  const lucid = useLucid()\n  const { decimalizeMintAmount } = useOracles()\n  const {\n    lptAmount,\n    stableAmount,\n    amount: poolAmount,\n  } = usePoolAmounts(poolAddress)\n  const ratio = useMemo(() => Number(amount) / lptAmount, [amount, lptAmount])\n  const usdReceive = stableAmount * ratio\n  const tokenReceive = poolAmount * ratio\n\n  const onWithdraw = async () => {\n    try {\n      setLoading(true)\n      const amountBN = await decimalizeMintAmount(amount, lptMint)\n      const { txId } = await lucid.removeLiquidity(poolAddress, amountBN)\n      return notifySuccess('Deposited', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Card\n          bordered={false}\n          style={{\n            borderRadius: 4,\n            background: 'rgb(20 20 20 / 10%)',\n            boxShadow: 'unset',\n          }}\n        >\n          <Row justify=\"end\">\n            <Col>\n              <Space\n                onClick={() => setAmount(balance.toString())}\n                size={6}\n                style={{ cursor: 'pointer' }}\n              >\n                <Typography.Text\n                  type=\"secondary\"\n                  style={{ textDecoration: 'underline' }}\n                >\n                  Available:\n                </Typography.Text>\n                <Typography.Text\n                  style={{ color: '#000000', textDecoration: 'underline' }}\n                >\n                  {numeric(balance).format('0,0')}\n                </Typography.Text>\n              </Space>\n            </Col>\n            <Col span={24}>\n              <NumericInput\n                bordered={false}\n                onValue={setAmount}\n                style={{\n                  fontSize: 35,\n                  fontWeight: 700,\n                  textAlign: 'right',\n                  color: '#000000',\n                }}\n                value={amount}\n              />\n            </Col>\n          </Row>\n        </Card>\n      </Col>\n      <Col span={24}>\n        <Typography.Title level={5} style={{ color: '#000000' }}>\n          You will receive\n        </Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]}>\n          <Col span={12}>\n            <Card\n              bordered={false}\n              style={{\n                borderRadius: '4px 0 0 4px',\n                background: 'rgb(20 20 20 / 10%)',\n                boxShadow: 'unset',\n              }}\n            >\n              <Space direction=\"vertical\">\n                <Space>\n                  <MintAvatar mintAddress={baseMint.toBase58()} />\n                  <Typography.Text style={{ color: '#000000' }}>\n                    <MintSymbol mintAddress={baseMint.toBase58()} />\n                  </Typography.Text>\n                </Space>\n                <Typography.Text style={{ color: '#000000' }}>\n                  {numeric(usdReceive).format('0,0.[000]')}\n                </Typography.Text>\n              </Space>\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card\n              bordered={false}\n              style={{\n                borderRadius: '0 4px 4px 0',\n                background: 'rgb(20 20 20 / 10%)',\n                boxShadow: 'unset',\n              }}\n              bodyStyle={{ textAlign: 'right' }}\n            >\n              <Space direction=\"vertical\">\n                <Space>\n                  <Typography.Text style={{ color: '#000000' }}>\n                    <MintSymbol mintAddress={mint.toBase58()} />\n                  </Typography.Text>\n                  <MintAvatar mintAddress={mint.toBase58()} />\n                </Space>\n                <Typography.Text style={{ color: '#000000' }}>\n                  {numeric(tokenReceive).format('0,0.[000]')}\n                </Typography.Text>\n              </Space>\n            </Card>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Button block loading={loading} onClick={onWithdraw} type=\"primary\">\n          Withdraw\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Withdraw\n","import { Fragment, useState } from 'react'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { Col, Modal, Row, Segmented } from 'antd'\nimport Deposit from './deposit'\nimport Withdraw from './withdraw'\nimport { SegmentedValue } from 'antd/lib/segmented'\nimport ButtonNeon from 'app/components/buttonNeon'\n\nconst DepositAndWithdraw = ({ poolAddress }: { poolAddress: string }) => {\n  const [visible, setVisible] = useState(false)\n  const [value, setValue] = useState<SegmentedValue>('Deposit')\n\n  return (\n    <Fragment>\n      <ButtonNeon onClick={() => setVisible(true)}>\n        Deposit / Withdraw\n      </ButtonNeon>\n      <Modal\n        visible={visible}\n        closeIcon={<IonIcon name=\"close-outline\" />}\n        onCancel={() => setVisible(false)}\n        footer={null}\n        className=\"lucid-modal-gradient\"\n      >\n        <Row gutter={[24, 24]}>\n          <Col span={24} style={{ textAlign: 'center' }}>\n            <Segmented\n              value={value}\n              onChange={(value) => setValue(value)}\n              options={['Deposit', 'Withdraw']}\n            />\n          </Col>\n          <Col span={24}>\n            {value === 'Deposit' ? (\n              <Deposit\n                poolAddress={poolAddress}\n                closeModal={() => setVisible(false)}\n              />\n            ) : (\n              <Withdraw poolAddress={poolAddress} />\n            )}\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default DepositAndWithdraw\n","import { useMemo } from 'react'\nimport { usePoolAmounts } from './usePoolAmounts'\nimport { usePoolDay } from './usePoolDay'\n\nconst useAPR = (poolAddress: string) => {\n  const amounts = usePoolAmounts(poolAddress)\n  const day = usePoolDay(poolAddress)\n\n  const apr = useMemo(() => {\n    const feePerDay = amounts.lptFeeAmount / day\n    const roi = feePerDay / amounts.lptAmount\n    return Number(Number(roi * 365 * 100).toFixed(6))\n  }, [amounts.lptAmount, amounts.lptFeeAmount, day])\n\n  return apr\n}\nexport default useAPR\n","import { usePoolData } from './usePoolData'\nimport { usePoolPrices } from './usePoolPrices'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\n\nexport const useMyLiquidity = (poolAddress: string) => {\n  const poolData = usePoolData(poolAddress)\n  const poolPrices = usePoolPrices(poolAddress)\n  const myLpt =\n    useAccountBalanceByMintAddress(poolData.lptMint.toBase58()) || {}\n  return (myLpt?.balance || 0) * poolPrices.lptPrice\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Button, Col, Row } from 'antd'\n\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { useLucid } from 'app/hooks/useLucid'\n\nimport { useOracles } from 'app/hooks/useOracles'\nimport { CardValue } from '../pools'\nimport { useWallet } from '@senhub/providers'\nimport { usePoolData } from 'app/hooks/pool/usePoolData'\nimport { numeric } from 'shared/util'\nimport { usePoolPrices } from 'app/hooks/pool/usePoolPrices'\n\nconst Deposit = ({ poolAddress }: { poolAddress: string }) => {\n  const poolData = usePoolData(poolAddress)\n  const poolPrices = usePoolPrices(poolAddress)\n  const [loading, setLoading] = useState(false)\n  const lucid = useLucid()\n  const { undecimalize } = useOracles()\n  const [lptLocked, setLptLocked] = useState('0')\n  const [baseAmount, setBaseAmout] = useState('0')\n  const { wallet } = useWallet()\n\n  const fetchDebt = useCallback(async () => {\n    const accouts = await lucid.getTokenAccounts(\n      wallet.address,\n      poolAddress,\n      poolData.mint,\n      poolData.baseMint,\n    )\n    let debt = 0\n    let baseAmount = 0\n    try {\n      const debtAccount = await lucid.program.account.cheque.fetch(\n        accouts.cheque,\n      )\n      //@ts-ignore\n      debt = Number(undecimalize(debtAccount.borrowAmount, 9))\n      baseAmount = Number(undecimalize(debtAccount.baseAmount, 9))\n    } catch (error) {}\n    setLptLocked(String(debt))\n    setBaseAmout(String(baseAmount))\n  }, [\n    lucid,\n    poolAddress,\n    poolData.baseMint,\n    poolData.mint,\n    undecimalize,\n    wallet.address,\n  ])\n  useEffect(() => {\n    fetchDebt()\n  }, [fetchDebt])\n\n  const onDeposit = async () => {\n    try {\n      setLoading(true)\n      const { txId } = await lucid.repay(poolAddress)\n      return notifySuccess('Replay', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Row gutter={[16, 16]} style={{ color: '#000000' }}>\n      <Col span={12}>\n        <CardValue\n          label=\"DEBT\"\n          value={<span>{numeric(baseAmount).format('$0,0.[00]')}</span>}\n        />\n      </Col>\n      <Col span={12}>\n        <CardValue\n          label=\"TOTAL LOCKED\"\n          value={\n            <span>\n              {numeric(Number(lptLocked) * poolPrices.lptPrice).format(\n                '$0,0.[00]',\n              )}\n            </span>\n          }\n        />\n      </Col>\n\n      <Col span={24}>\n        <Button loading={loading} block onClick={onDeposit} type=\"primary\">\n          Repay\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Deposit\n","import { useState } from 'react'\n\nimport { Button, Col, Row, Space, Typography } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\nimport { numeric } from 'shared/util'\nimport { useLucid } from 'app/hooks/useLucid'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { usePoolData } from 'app/hooks/pool/usePoolData'\nimport { usePoolPrices } from 'app/hooks/pool/usePoolPrices'\n\nconst Borrow = ({ poolAddress }: { poolAddress: string }) => {\n  const [amount, setAmount] = useState('0')\n  const [loading, setLoading] = useState(false)\n  const { lptMint } = usePoolData(poolAddress)\n  const poolPrices = usePoolPrices(poolAddress)\n  const { balance } = useAccountBalanceByMintAddress(lptMint.toBase58())\n  const lucid = useLucid()\n  const { decimalizeMintAmount } = useOracles()\n\n  const onWithdraw = async () => {\n    try {\n      setLoading(true)\n      const amountBN = await decimalizeMintAmount(amount, lptMint)\n      const { txId } = await lucid.borrow(poolAddress, amountBN)\n      return notifySuccess('Deposited', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <Row>\n          <Col flex=\"auto\">\n            <Typography.Text style={{ color: '#292321', fontSize: 12 }}>\n              You don't have to fear liquidation risk\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Typography.Text style={{ color: '#000000' }}>\n              Available: {numeric(balance).format('0,0.[000]')}\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row align=\"middle\">\n          <Col flex=\"auto\">\n            <Button\n              type=\"primary\"\n              onClick={() => setAmount(balance.toString())}\n            >\n              Max\n            </Button>\n          </Col>\n          <Col>\n            <Space>\n              <NumericInput\n                bordered={false}\n                onValue={setAmount}\n                style={{\n                  color: '#000000',\n                  fontSize: 30,\n                  fontWeight: 700,\n                  width: 150,\n                  textAlign: 'right',\n                }}\n                value={amount}\n              />\n              <Typography.Title level={4} style={{ color: '#000000' }}>\n                LPT\n              </Typography.Title>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Typography.Title level={5} style={{ color: '#000000' }}>\n          Review\n        </Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Row>\n          <Col flex=\"auto\">\n            <Typography.Text style={{ color: '#000000' }}>\n              Total Borrow\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Typography.Title level={4} style={{ color: '#000000' }}>\n              {numeric((Number(amount) * poolPrices.lptPrice) / 2).format(\n                '$0,0.[000]',\n              )}\n            </Typography.Title>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Button block loading={loading} onClick={onWithdraw} type=\"primary\">\n          Borrow\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Borrow\n","import { Fragment, useState } from 'react'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { Col, Modal, Row, Segmented } from 'antd'\nimport Repay from './repay'\nimport Borrow from './borrow'\n\nimport { SegmentedValue } from 'antd/lib/segmented'\nimport ButtonNeon from 'app/components/buttonNeon'\n\nconst BorrowAnhRepay = ({ poolAddress }: { poolAddress: string }) => {\n  const [visible, setVisible] = useState(false)\n  const [value, setValue] = useState<SegmentedValue>('Borrow')\n\n  return (\n    <Fragment>\n      <ButtonNeon onClick={() => setVisible(true)}>Borrow / Repay</ButtonNeon>\n      <Modal\n        visible={visible}\n        closeIcon={<IonIcon name=\"close-outline\" />}\n        onCancel={() => setVisible(false)}\n        footer={null}\n        className=\"lucid-modal-gradient\"\n      >\n        <Row gutter={[24, 24]}>\n          <Col span={24} style={{ textAlign: 'center' }}>\n            <Segmented\n              value={value}\n              onChange={(value) => setValue(value)}\n              options={['Borrow', 'Repay']}\n            />\n          </Col>\n          <Col span={24}>\n            {value === 'Borrow' ? (\n              <Borrow poolAddress={poolAddress} />\n            ) : (\n              <Repay poolAddress={poolAddress} />\n            )}\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default BorrowAnhRepay\n","import { useSelector } from 'react-redux'\nimport { Fragment, useState } from 'react'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { Button, Card, Col, Collapse, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\nimport CardContent from './cardContent'\nimport BuyAndSell from '../buyAndSell'\n\nimport { AppState } from 'app/model'\nimport { usePoolFees } from 'app/hooks/pool/usePoolFees'\nimport { numeric } from 'shared/util'\n\nimport './style.less'\nimport DepositAndWithdraw from '../depositAndWithdraw'\nimport { usePoolTvl } from 'app/hooks/pool/usePoolTvl'\nimport useAPR from 'app/hooks/pool/useAPR'\nimport { useMyLiquidity } from 'app/hooks/pool/useMyLiquidity'\nimport BorrowAnhRepay from '../borrowAndRepay'\n\ntype PoolCardProps = { rank: number; poolAddress: string }\n\nconst PoolCard = ({ rank, poolAddress }: PoolCardProps) => {\n  const [activeKey, setActiveKey] = useState<string>()\n  const poolData = useSelector((state: AppState) => state.pools[poolAddress])\n  const fee = usePoolFees(poolAddress)\n  const tvl = usePoolTvl(poolAddress)\n  const apr = useAPR(poolAddress)\n  const myLiquidity = useMyLiquidity(poolAddress)\n\n  const onActive = () => {\n    if (activeKey) return setActiveKey(undefined)\n    return setActiveKey(poolAddress)\n  }\n\n  return (\n    <Fragment>\n      <Card\n        bordered={false}\n        className={`pool-card top-${rank + 1}`}\n        onClick={onActive}\n      >\n        <Row gutter={[24, 24]} align=\"middle\">\n          <Col>\n            <Typography.Title level={5}>{rank + 1}</Typography.Title>\n          </Col>\n          <Col>\n            <MintAvatar mintAddress={poolData.mint.toBase58()} size={48} />\n          </Col>\n          <Col span={4}>\n            <Space direction=\"vertical\">\n              <Typography.Title level={5} ellipsis>\n                <MintName mintAddress={poolData.mint.toBase58()} />\n              </Typography.Title>\n              <Typography.Title\n                level={5}\n                className=\"symbol\"\n                style={{ color: '#000' }}\n              >\n                <MintSymbol mintAddress={poolData.mint.toBase58()} />\n              </Typography.Title>\n            </Space>\n          </Col>\n          <Col span={3}>\n            <CardContent\n              primary\n              label=\"APY\"\n              value={numeric(apr).format('0.00[00]%')}\n            />\n          </Col>\n          <Col span={4}>\n            <CardContent\n              label=\"Total Fee\"\n              value={numeric(fee.totalFee).format('0,0.00[00]')}\n              mintAddress={poolData.baseMint.toBase58()}\n            />\n          </Col>\n          <Col span={4}>\n            <CardContent\n              label=\"Total Value Locked\"\n              value={numeric(tvl).format('0,0.00[00]a')}\n              mintAddress={poolData.baseMint.toBase58()}\n            />\n          </Col>\n          <Col span={4}>\n            <CardContent\n              label=\"Your Liquidity\"\n              value={numeric(Number(myLiquidity)).format('0,0.00[00]')}\n              mintAddress={poolData.baseMint.toBase58()}\n            />\n          </Col>\n          <Col>\n            <Button\n              type=\"text\"\n              style={{ padding: 0, background: 'transparent' }}\n              onClick={() => {}}\n            >\n              <IonIcon\n                name={activeKey ? 'chevron-up-outline' : 'chevron-down-outline'}\n                style={{ fontSize: 32 }}\n              />\n            </Button>\n          </Col>\n        </Row>\n      </Card>\n      <Collapse activeKey={activeKey} className=\"lucid-expand-card\">\n        <Collapse.Panel header={null} key={poolAddress} showArrow={false}>\n          <Row gutter={[24, 24]}>\n            <Col>\n              <BuyAndSell poolAddress={poolAddress} />\n            </Col>\n            <Col>\n              <DepositAndWithdraw poolAddress={poolAddress} />\n            </Col>\n            <Col>\n              <BorrowAnhRepay poolAddress={poolAddress} />\n            </Col>\n          </Row>\n        </Collapse.Panel>\n      </Collapse>\n    </Fragment>\n  )\n}\n\nexport default PoolCard\n","import { useMemo } from 'react'\n\nimport { usePoolAmounts } from './usePoolAmounts'\nimport { usePoolDay } from './usePoolDay'\nimport { usePoolPrices } from './usePoolPrices'\n\nexport const usePoolFees = (poolAddress: string) => {\n  const day = usePoolDay(poolAddress)\n  const poolAmounts = usePoolAmounts(poolAddress)\n  const poolPrices = usePoolPrices(poolAddress)\n\n  const totalFee = useMemo(() => {\n    return poolAmounts.lptFeeAmount * poolPrices.lptPrice\n  }, [poolAmounts.lptFeeAmount, poolPrices.lptPrice])\n  return {\n    totalFee,\n    fee24h: totalFee / day,\n  }\n}\n","import { usePoolAmounts } from './usePoolAmounts'\nimport { usePoolPrices } from './usePoolPrices'\n\nexport const usePoolTvl = (poolAddress: string) => {\n  const poolAmounts = usePoolAmounts(poolAddress)\n  const poolPrices = usePoolPrices(poolAddress)\n  return poolAmounts.amount * poolPrices.mintPrice + poolAmounts.stableAmount\n}\n","import { Button, Col, Row, Space, Typography } from 'antd'\nimport { useState } from 'react'\nimport { MintSelection } from 'shared/antd/mint'\nimport NumericInput from 'shared/antd/numericInput'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { useLucid } from 'app/hooks/useLucid'\nimport { notifyError, notifySuccess } from 'app/helper'\n\nimport config from 'app/configs'\nimport { BN } from 'bn.js'\nimport { numeric } from 'shared/util'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\n\nexport const ModalContent = () => {\n  const [mint, setMint] = useState('')\n  const [amount, setAmount] = useState('0')\n  const [price, setPrice] = useState('0')\n  const [loading, setLoading] = useState(false)\n  const { decimalizeMintAmount, decimalize } = useOracles()\n  const lucid = useLucid()\n  const { balance } = useAccountBalanceByMintAddress(mint)\n\n  const onCreate = async () => {\n    const FEE = new BN(10_000_000) // 1%\n    try {\n      setLoading(true)\n      const stableAmount = Number(amount) * Number(price)\n      const amountBN = await decimalizeMintAmount(amount, mint)\n      const stableAmountBN = decimalize(stableAmount, 9)\n      const { txId } = await lucid.initializePool(\n        mint,\n        config.sol.baseMint,\n        FEE,\n        amountBN,\n        stableAmountBN,\n        new BN(0),\n      )\n      notifySuccess('Create Pool', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24} style={{ textAlign: 'center' }}>\n        <Typography.Title level={5} style={{ color: '#000000' }}>\n          New HackaPool\n        </Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[0, 0]} justify=\"space-between\">\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text type=\"secondary\" className=\"caption\">\n                Token Amount\n              </Typography.Text>\n              <MintSelection\n                style={{\n                  background: '#F4FCEB',\n                  color: '#000000',\n                  borderRadius: 32,\n                  height: 40,\n                  width: 135,\n                }}\n                value={mint}\n                onChange={setMint}\n              />\n            </Space>\n          </Col>\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text type=\"secondary\" className=\"caption\">\n                Enter Price\n              </Typography.Text>\n              <NumericInput\n                bordered={false}\n                style={{\n                  color: '#000000',\n\n                  fontSize: '20px',\n                  fontWeight: 700,\n                  width: 90,\n                }}\n                value={price}\n                onValue={setPrice}\n              />\n            </Space>\n          </Col>\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text type=\"secondary\" className=\"caption\">\n                Amount\n              </Typography.Text>\n              <NumericInput\n                bordered={false}\n                style={{\n                  color: '#000000',\n\n                  fontSize: '20px',\n                  fontWeight: 700,\n                  width: 90,\n                }}\n                value={amount}\n                onValue={setAmount}\n              />\n              <Typography.Text\n                style={{ color: '#000000' }}\n                onClick={() => setAmount(balance.toString())}\n              >\n                Available: {numeric(balance).format('0,0.[000]')}\n              </Typography.Text>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row gutter={[8, 8]}>\n          <Col span={24}>\n            <Typography.Title level={5} style={{ color: '#000000' }}>\n              Review\n            </Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Row>\n              <Col flex=\"auto\">\n                <Typography.Text style={{ color: '#000000' }}>\n                  Total amount in the pool\n                </Typography.Text>\n              </Col>\n              <Col>\n                <Typography.Title level={4} style={{ color: '#000000' }}>\n                  {numeric(amount).format('0,0.[000]')}\n                </Typography.Title>\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Row>\n              <Col flex=\"auto\">\n                <Typography.Text style={{ color: '#000000' }}>\n                  Price token\n                </Typography.Text>\n              </Col>\n              <Col>\n                <Typography.Title level={4} style={{ color: '#000000' }}>\n                  {numeric(price).format('0,0.[000]')}\n                </Typography.Title>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Button type=\"primary\" block onClick={onCreate} disabled={loading}>\n          Create\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n","import { Fragment, useState } from 'react'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { Button, Modal } from 'antd'\nimport { ModalContent } from './modalContent'\n\nconst CreatePool = () => {\n  const [visible, setVisible] = useState(false)\n\n  return (\n    <Fragment>\n      <Button type=\"primary\" onClick={() => setVisible(true)}>\n        New\n      </Button>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        footer={false}\n        closeIcon={<IonIcon name=\"close-outline\" />}\n        className=\"lucid-modal-gradient\"\n      >\n        <ModalContent />\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default CreatePool\n","import { Fragment, ReactNode, useCallback, useEffect, useState } from 'react'\nimport { fetchCGK, numeric } from 'shared/util'\nimport { BN } from 'bn.js'\nimport { useMint } from '@senhub/providers'\n\nimport { Button, Col, Modal, Row, Space, Typography } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintAvatar, MintName, MintSelection } from 'shared/antd/mint'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { useLucid } from 'app/hooks/useLucid'\nimport { useBestPoolAddress } from 'app/hooks/pool/useBestPoolData'\nimport { usePoolData } from 'app/hooks/pool/usePoolData'\n\nimport configs from 'app/configs'\nimport './button.less'\n\nconst {\n  sol: { baseMint },\n} = configs\n\nconst DEFAULT_AMOUNT = new BN(0)\n\ntype RowContentProps = { label?: string; value?: ReactNode }\nconst RowContent = ({ label = '', value }: RowContentProps) => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col flex=\"auto\" style={{ color: '#000000' }}>\n        {label}\n      </Col>\n      <Col>{value}</Col>\n    </Row>\n  )\n}\n\ntype JoinActionProps = { poolAddress?: string }\nconst JoinAction = ({ poolAddress }: JoinActionProps) => {\n  const [visible, setVisible] = useState(false)\n  const [mint, setMint] = useState(baseMint)\n  const [amount, setAmount] = useState('0')\n  const [total, setTotal] = useState('0')\n  const [loading, setLoading] = useState(false)\n  const { balance } = useAccountBalanceByMintAddress(mint)\n  const { decimalizeMintAmount } = useOracles()\n  const { tokenProvider } = useMint()\n  let bestPoolAddress = useBestPoolAddress()\n  if (poolAddress) bestPoolAddress = poolAddress\n  const bestPoolData = usePoolData(bestPoolAddress)\n\n  const lucid = useLucid()\n\n  const disabled = !Number(amount) || Number(amount) > Number(balance)\n\n  const onJoin = useCallback(async () => {\n    if (disabled) return\n    try {\n      setLoading(true)\n      const amountBN = await decimalizeMintAmount(amount, mint)\n      const amountOutBN = await decimalizeMintAmount(total, baseMint)\n      const isBaseMint = mint === baseMint\n\n      if (!isBaseMint)\n        await lucid.swapJupiter(baseMint, mint, amountBN, amountOutBN)\n\n      const { txId } = await lucid.addLiquidity(\n        bestPoolAddress,\n        DEFAULT_AMOUNT,\n        DEFAULT_AMOUNT,\n        isBaseMint ? amountBN : amountOutBN,\n      )\n      setVisible(false)\n      return notifySuccess('Join Hakapool Successfully', txId)\n    } catch (err) {\n      notifyError(err)\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    disabled,\n    decimalizeMintAmount,\n    amount,\n    mint,\n    total,\n    lucid,\n    bestPoolAddress,\n  ])\n\n  const fetchTotal = useCallback(async () => {\n    if (!mint) return\n    const tokenInfo = await tokenProvider.findByAddress(mint)\n    const ticket = tokenInfo?.extensions?.coingeckoId\n    if (ticket) {\n      const info = await fetchCGK(ticket)\n      return setTotal(String(Number(amount) * info.price))\n    }\n    return setTotal('0')\n  }, [amount, mint, tokenProvider])\n  useEffect(() => {\n    fetchTotal()\n  }, [fetchTotal])\n\n  return (\n    <Fragment>\n      <div className=\"btn-bg joinnow\">\n        <div className=\"btn-group\">\n          <div className=\"btn ball\">\n            <button onClick={() => setVisible(true)}>\n              <div className=\"joinnow-ball\"></div>\n              {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n              <a>\n                Join now<span data-letters=\"Go!\"></span>\n                <span data-letters=\"Go!\"></span>\n              </a>\n            </button>\n          </div>\n        </div>\n      </div>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        footer={false}\n        closable={false}\n        className=\"lucid-modal-gradient\"\n      >\n        <Row gutter={[24, 24]} justify=\"end\" align=\"middle\">\n          <Col span={24} style={{ textAlign: 'center' }}>\n            <Typography.Title style={{ color: '#000000' }} level={3}>\n              Join with best pool\n            </Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Row>\n              <Col flex=\"auto\">\n                <MintSelection\n                  style={{\n                    background: '#F4FCEB',\n                    color: '#000000',\n                    borderRadius: 32,\n                    height: 40,\n                    width: 135,\n                  }}\n                  value={mint}\n                  onChange={setMint}\n                />\n              </Col>\n              <Col>\n                <Space size={6}>\n                  <Typography.Text\n                    style={{ color: '#000000' }}\n                    type=\"secondary\"\n                  >\n                    Available:\n                  </Typography.Text>\n                  <Typography.Text\n                    style={{\n                      cursor: 'pointer',\n                      color: '#000000',\n                    }}\n                    onClick={() => setAmount(balance.toString())}\n                  >\n                    {numeric(balance).format('0,0.[0000]')}\n                  </Typography.Text>\n                </Space>\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Row gutter={[24, 24]} wrap={false} align=\"middle\">\n              <Col flex=\"auto\">\n                <NumericInput\n                  bordered={false}\n                  value={amount}\n                  onValue={setAmount}\n                  style={{\n                    fontSize: 40,\n                    fontWeight: 700,\n                    textAlign: 'right',\n                    color: '#000000',\n                  }}\n                />\n              </Col>\n              <Col>\n                <Button\n                  type=\"primary\"\n                  onClick={() => setAmount(balance.toString())}\n                >\n                  Max\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Typography.Title style={{ color: '#000000' }} level={5}>\n              Review\n            </Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Row gutter={[8, 8]}>\n              <Col span={24}>\n                <RowContent\n                  label=\"Total Value\"\n                  value={\n                    <Space>\n                      <Typography.Text style={{ color: '#000000' }}>\n                        ${numeric(total).format('0,0.[0000]')}\n                      </Typography.Text>\n                    </Space>\n                  }\n                />\n              </Col>\n\n              <Col span={24}>\n                <RowContent\n                  label=\"HakaPool will Join\"\n                  value={\n                    <Space style={{ color: '#000000' }}>\n                      <MintName mintAddress={bestPoolData.mint.toBase58()} />\n                      <MintAvatar mintAddress={bestPoolData.mint.toBase58()} />\n                    </Space>\n                  }\n                />\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24}>\n            <Button\n              type=\"primary\"\n              style={{ borderRadius: 999 }}\n              onClick={onJoin}\n              disabled={disabled}\n              loading={loading}\n              block\n            >\n              Deposit\n            </Button>\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default JoinAction\n","export const useBestPoolAddress = () => {\n  return '4VY3v61QFN3S4amq5RpXGNX3UpXK1KzYyG8cLWnZbZH6'\n}\n","import { Card, Col, Divider, Row, Space, Typography } from 'antd'\nimport CreatePool from 'app/view/createPool'\n\nimport './index.less'\nimport JoinAction from './joinAction'\n\ntype RowContentProps = {\n  title?: string\n  label?: string\n  description?: string\n}\n\nconst RowContent = ({\n  title = '',\n  label = '',\n  description = '',\n}: RowContentProps) => {\n  return (\n    <Space direction=\"vertical\" style={{ textAlign: 'center' }}>\n      <Typography.Title level={1} style={{ color: '#283813' }}>\n        {title}\n      </Typography.Title>\n      <Space direction=\"vertical\" size={0}>\n        <Typography.Title\n          level={5}\n          style={{ fontWeight: 300, color: '#283813' }}\n        >\n          {label}\n        </Typography.Title>\n        <Typography.Title level={5} style={{ color: '#283813' }}>\n          {description}\n        </Typography.Title>\n      </Space>\n    </Space>\n  )\n}\n\nconst JoinPool = () => {\n  return (\n    <Card\n      className=\"bg-gradient lucid-card-gradient\"\n      bordered={false}\n      bodyStyle={{ padding: 32 }}\n    >\n      <Row gutter={[48, 48]} justify=\"space-between\">\n        <Col span={12}>\n          <Space size={0} style={{ width: '100%' }} direction=\"vertical\">\n            <Row gutter={[12, 12]}>\n              <Col flex=\"auto\">\n                <Typography.Title\n                  level={2}\n                  style={{ fontWeight: 300, color: '#000' }}\n                >\n                  HAKAPOOL\n                </Typography.Title>\n              </Col>\n              <Col>\n                <CreatePool />\n              </Col>\n            </Row>\n            <Typography.Title style={{ color: '#000' }} level={1}>\n              ALL IN ONE 1 STEP\n            </Typography.Title>\n            <Typography.Title level={1} style={{ fontSize: 60, color: '#000' }}>\n              EASY REWARD\n            </Typography.Title>\n          </Space>\n        </Col>\n        <Col span={12}>\n          <Row gutter={[32, 32]} style={{ height: '100%' }} align=\"middle\">\n            <Col>\n              <Space>\n                <RowContent\n                  title=\"JOIN\"\n                  label=\"DEPOSIT\"\n                  description=\"ANY TOKEN\"\n                />\n                <Divider style={{ minWidth: 80 }} />\n                <RowContent\n                  title=\"CLAIM\"\n                  label=\"RECEIVE\"\n                  description=\"REWARD HIGH\"\n                />\n              </Space>\n            </Col>\n            <Col flex=\"auto\">\n              <JoinAction />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default JoinPool\n","var _path, _path2;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIcoRank(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 86,\n    height: 53,\n    viewBox: \"0 0 86 53\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23 8.5L77 0L86 26.5L77 53L23 44V8.5Z\",\n    fill: \"#F9CF66\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18 16V36H5.07692L11.8462 31.625L2 26L11.8462 20.375L5.07692 16H18Z\",\n    fill: \"#F9CF66\",\n    stroke: \"#F9CF66\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcoRank);\nexport default __webpack_public_path__ + \"static/media/ico-rank.e8bad3d57040eab8fd4652843fbb1318.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Card, Col, Image, Row, Space, Typography } from 'antd'\nimport PoolCard from './poolCard'\nimport JoinPool from 'app/components/joinPool'\n\nimport { AppState } from 'app/model'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport IcoRank from 'app/static/images/ico-rank.svg'\nimport { useBestPoolAddress } from 'app/hooks/pool/useBestPoolData'\nimport { numeric } from 'shared/util'\nimport { useMyLiquidity } from 'app/hooks/pool/useMyLiquidity'\nimport { useOracles } from 'app/hooks/useOracles'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\nimport { usePoolData } from 'app/hooks/pool/usePoolData'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { useLucid } from 'app/hooks/useLucid'\n\ntype CardValueProps = { label?: string; value?: ReactNode; action?: ReactNode }\nexport const CardValue = ({ label = '', value, action }: CardValueProps) => {\n  return (\n    <Card\n      bordered={false}\n      className=\"lucid-card-gradient\"\n      style={{\n        textAlign: 'center',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Space direction=\"vertical\">\n        <Typography.Title level={1} style={{ color: '#579B04' }}>\n          {value}\n        </Typography.Title>\n        <Typography.Text style={{ color: '#000' }}>{label}</Typography.Text>\n        {action}\n      </Space>\n    </Card>\n  )\n}\n\nconst ActionClaim = () => {\n  const bestPoolAddress = useBestPoolAddress()\n  const { lptMint } = usePoolData(bestPoolAddress)\n  const { balance } = useAccountBalanceByMintAddress(lptMint.toBase58())\n  const [loading, setLoading] = useState(false)\n  const { decimalizeMintAmount } = useOracles()\n  const lucid = useLucid()\n\n  const claim = useCallback(async () => {\n    try {\n      setLoading(true)\n      const amountBN = await decimalizeMintAmount(balance, lptMint)\n      const { txId } = await lucid.removeLiquidity(bestPoolAddress, amountBN)\n      return notifySuccess('Deposited', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }, [balance, bestPoolAddress, decimalizeMintAmount, lptMint, lucid])\n\n  return (\n    <Button type=\"text\" onClick={claim} loading={loading}>\n      <Typography.Text style={{ color: '#000', textDecoration: 'underline' }}>\n        CLAIM ALL <IonIcon name=\"chevron-forward-outline\" />\n      </Typography.Text>\n    </Button>\n  )\n}\n\nconst Pools = () => {\n  const pools = useSelector((state: AppState) => state.pools)\n  const betsPool = useBestPoolAddress()\n  const [tvl, setTvl] = useState('0')\n  const myLiquidity = useMyLiquidity(betsPool)\n  const { undecimalize } = useOracles()\n\n  const calcTVL = useCallback(() => {\n    let tvl = 0\n    for (const pool of Object.values(pools)) {\n      tvl += Number(undecimalize(pool.stableBalance, 9)) * 2\n    }\n    setTvl(tvl.toString())\n  }, [pools, undecimalize])\n  useEffect(() => {\n    calcTVL()\n  }, [calcTVL])\n\n  return (\n    <Row gutter={[48, 48]}>\n      <Col span={24}>\n        <Row gutter={[24, 24]}>\n          <Col xs={24} lg={8}>\n            <Space direction=\"vertical\">\n              <Typography.Title level={2} style={{ color: '#ABFC47' }}>\n                THE AUTO\n              </Typography.Title>\n              <Typography.Text>\n                A single deposit generates yield from Hakapool positions, the\n                highest quality yield sources in the Sentre ecosystem.\n              </Typography.Text>\n            </Space>\n          </Col>\n          <Col xs={24} lg={8}>\n            <Row gutter={[12, 12]}>\n              <Col span={24}>\n                <CardValue\n                  label=\"TOTAL VALUE LOCK\"\n                  value={<span>{numeric(tvl).format('$0,0.00[00]a')}</span>}\n                />\n              </Col>\n              <Col span={24}>\n                <CardValue\n                  label=\"TOTAL POOLS\"\n                  value={<span>{Object.keys(pools).length}</span>}\n                />\n              </Col>\n            </Row>\n          </Col>\n          <Col xs={24} lg={8}>\n            <CardValue\n              label=\"YOUR POSITION\"\n              value={<span>${numeric(myLiquidity).format('0,0.00[00]')}</span>}\n              action={<ActionClaim />}\n            />\n          </Col>\n        </Row>\n      </Col>\n\n      {/* Join Pool */}\n      <Col span={24}>\n        <JoinPool />\n      </Col>\n\n      <Col span={18}>\n        <Row gutter={[24, 24]} justify=\"center\" align=\"middle\">\n          {Object.keys(pools).map((poolAddress, i) => (\n            <Col span={24} key={poolAddress} className=\"wrap-card-pool\">\n              {i === 0 && (\n                <Image\n                  className=\"ico-number-one\"\n                  src={IcoRank}\n                  alt=\"number one\"\n                />\n              )}\n              <PoolCard rank={i} poolAddress={poolAddress} />\n            </Col>\n          ))}\n        </Row>\n      </Col>\n      <Col span={6}>\n        <Space direction=\"vertical\" size={12} style={{ textAlign: 'right' }}>\n          <Space direction=\"vertical\" size={4}>\n            <Typography.Title level={5} style={{ color: '#ABFC47' }}>\n              CREATE LIQUIDIY POOL\n            </Typography.Title>\n            <Typography.Title level={4} style={{ color: '#ABFC47' }}>\n              NOT HARDER\n            </Typography.Title>\n          </Space>\n          <Typography.Text>\n            A single deposit generates yield from Hakapool positions, the\n            highest quality yield sources in the Sentre ecosystem.\n          </Typography.Text>\n        </Space>\n      </Col>\n      <Col span={24} />\n    </Row>\n  )\n}\n\nexport default Pools\n","import { useCallback, useMemo } from 'react'\nimport { useHistory, useLocation, useParams } from 'react-router-dom'\n\nimport configs from 'app/configs'\n\nconst {\n  manifest: { appId },\n} = configs\nconst APP_ROUTE = `/app/${appId}`\n\nexport const useAppRouter = () => {\n  const { search, pathname } = useLocation()\n  const history = useHistory()\n  const params = useParams()\n\n  const query = useMemo(() => {\n    return new URLSearchParams(search)\n  }, [search])\n\n  const getQuery = useCallback((queryId: string) => query.get(queryId), [query])\n\n  const getAllQuery = useCallback(<T>() => {\n    const queries: Record<string, string> = {}\n    query.forEach((value, key) => {\n      queries[key] = value\n    })\n    const wrapResult: T = queries as any\n    return wrapResult\n  }, [query])\n\n  /**\n   * @param path is URL parameters\n   * @param newQuery Object all Query\n   * @param force keep prev Query with force=false\n   */\n  const pushHistory = useCallback(\n    (\n      path: string,\n      newQuery: Record<string, string> = {},\n      force: boolean = true,\n    ) => {\n      const currentQuery = getAllQuery<Record<string, string>>()\n      // Keep current query with 'force' === false\n      if (force === false) newQuery = Object.assign(currentQuery, newQuery)\n      const newParams = new URLSearchParams(newQuery)\n      if (newParams) path += `?${newParams.toString()}`\n      history.push(`${APP_ROUTE}${path}`)\n    },\n    [getAllQuery, history],\n  )\n\n  return {\n    getQuery,\n    getAllQuery,\n    pushHistory,\n    appRoute: APP_ROUTE,\n    pathname,\n    params,\n  }\n}\n","import { Fragment, useCallback, useEffect, useState } from 'react'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { Button, Col, Modal, Row } from 'antd'\nimport { useLucid } from 'app/hooks/useLucid'\nimport { notifySuccess } from 'app/helper'\nimport { useAccount } from '@senhub/providers'\nimport BN from 'bn.js'\nimport { MintAvatar } from 'shared/antd/mint'\n\nconst JupiterMarket = () => {\n  const [visible, setVisible] = useState(false)\n  const [jupiters, setJupiters] = useState<any>([])\n  const lucid = useLucid()\n  const { accounts } = useAccount()\n\n  const fetchJupiters = useCallback(async () => {\n    const jupiters = await lucid.program.account.jupiter.all()\n    setJupiters(jupiters)\n  }, [lucid.program.account.jupiter])\n\n  useEffect(() => {\n    fetchJupiters()\n  }, [fetchJupiters])\n\n  const onCreateJupiter = async () => {\n    try {\n      const txid = await lucid.initializeJupiter()\n      notifySuccess('Create', txid.txId)\n    } catch (error) {}\n  }\n\n  const onClaimJupiter = async (jupiter: any) => {\n    try {\n      const account = Object.values(accounts)[0]\n      const txid = await lucid.swapJupiter(\n        jupiter.account.baseMint,\n        account.mint,\n        new BN(0),\n        new BN('1000000000000000'),\n      )\n      if (txid) {\n        notifySuccess('Claim 1000k', txid)\n      }\n    } catch (error) {}\n  }\n\n  return (\n    <Fragment>\n      <Button type=\"primary\" onClick={() => setVisible(true)}>\n        Open Jupiter Market\n      </Button>\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        footer={false}\n        closeIcon={<IonIcon name=\"close-outline\" />}\n        title=\"Create new jupiter\"\n      >\n        <Button type=\"primary\" onClick={() => onCreateJupiter()}>\n          New\n        </Button>{' '}\n        <Row gutter={[16, 16]}>\n          {jupiters.map((jupiter: any) => {\n            return (\n              <Col span={24}>\n                <MintAvatar mintAddress={jupiter.account.baseMint.toBase58()} />\n                {jupiter.account.baseMint.toBase58()}\n                <Button type=\"primary\" onClick={() => onClaimJupiter(jupiter)}>\n                  Claim 1000k\n                </Button>\n              </Col>\n            )\n          })}\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default JupiterMarket\n","var _g, _defs;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgBgLucid(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 1440,\n    height: 811,\n    viewBox: \"0 0 1440 811\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_1386_19896)\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 1440,\n    height: 810,\n    transform: \"translate(0 0.945312)\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter0_f_1386_19896)\"\n  }, /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 772.879,\n    cy: 255.368,\n    rx: 244.935,\n    ry: 194.891,\n    fill: \"#B3FF4C\",\n    fillOpacity: 0.1\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.3\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.554 1.72633C136.794 3.3456 125.711 7.39377 117.419 15.0485C109.72 22.1144 105.067 31.2412 102.021 40.5888C97.7058 54.1317 96.5213 68.2635 96.8597 82.2481C97.3674 99.0296 99.4825 115.958 96.6905 132.666C91.4449 164.242 73.2546 193.83 55.6565 221.358C51.5954 227.761 46.7728 233.944 40.1735 238.655C32.3897 244.249 22.9984 246.236 13.1841 247.266C8.86916 247.708 2.94672 248.223 0.746953 252.051C-1.62202 256.172 2.18526 262.134 4.63884 265.741C11.3227 275.603 23.083 281.271 34.5895 286.055C47.7035 291.428 60.7328 296.728 72.7469 303.793C99.0595 319.324 120.55 341.257 129.179 368.196C134.171 383.8 135.948 401.465 131.633 417.363C127.826 431.421 118.35 443.639 113.527 457.403C107.774 473.743 124.103 483.459 139.501 488.905C158.707 495.603 179.436 498.106 199.487 501.786C237.052 508.705 274.702 516.359 311.337 526.443C327.92 531.006 345.01 535.643 362.608 535.202C377.499 534.834 391.374 530.27 403.304 522.616C425.471 508.557 442.815 485.52 446.284 461.599C448.738 445.038 445.438 428.404 445.861 411.769C446.199 395.356 452.037 380.709 460.244 366.135C467.605 352.887 475.981 339.785 479.957 325.359C483.765 311.375 482.918 296.875 478.942 283.037C474.542 267.654 466.505 253.523 459.821 238.876C452.883 223.64 450.007 207.3 449.499 190.96C448.991 175.062 450.514 159.237 451.868 143.412C452.545 135.537 453.222 127.661 453.56 119.786C453.899 111.837 453.475 103.887 453.56 95.9383C453.645 90.2709 456.014 85.1922 458.89 80.1872C460.582 77.2431 462.782 73.931 462.613 70.5452C462.444 67.0123 459.398 64.289 456.352 62.3017C450.599 58.4743 443.577 56.119 436.47 54.9414C403.812 49.4947 372.423 67.8219 339.934 61.6393C326.82 59.1368 314.298 54.3525 302.284 49.2739C289.593 43.9745 277.24 38.0127 265.057 31.9036C254.735 26.825 244.582 21.452 233.837 17.1094C220.3 11.5891 206.002 7.17296 191.45 4.30244C177.574 1.35831 162.937 -0.0401444 148.554 1.72633C147.962 1.79993 148.216 2.60957 148.808 2.53596C179.182 -1.21779 211.755 8.0562 238.66 19.8327C261.081 29.6219 282.063 41.6192 304.738 50.9668C315.821 55.5302 327.412 59.8728 339.426 62.1545C353.132 64.8042 367.092 62.8905 380.629 60.388C397.297 57.2967 414.134 53.2485 431.309 54.8678C441.461 55.8246 466.082 61.4184 461.175 74.1518C459.652 78.0527 456.944 81.5121 455.252 85.4131C452.883 90.7125 452.883 95.7911 453.052 101.385C453.475 116.915 452.037 132.445 450.768 147.902C448.145 177.932 446.115 208.919 458.636 237.624C464.813 251.83 472.681 265.373 477.334 280.02C482.157 295.182 483.426 310.933 478.857 326.316C474.712 340.595 466.251 353.476 458.975 366.651C451.953 379.457 446.369 392.485 445.353 406.764C444.253 422.736 447.299 438.634 446.284 454.533C445.438 468.002 440.785 480.588 433.001 492.217C417.095 516.065 389.936 535.275 356.94 534.098C339.426 533.435 322.674 528.357 306.091 523.867C288.493 519.083 270.472 515.108 252.535 511.281C225.038 505.392 197.287 500.682 169.621 495.456C159.722 493.542 149.739 491.334 140.263 488.022C131.633 485.004 122.072 480.883 116.742 473.964C109.805 464.984 115.135 454.901 119.619 446.068C125.88 433.556 132.902 421.706 134.425 407.942C137.471 380.709 128.333 353.181 109.043 331.615C91.4449 311.89 67.3321 297.979 41.4426 287.674C29.7669 283.111 17.076 278.327 8.78455 269.274C4.13121 264.195 -3.9064 252.419 6.6694 249.254C13.6071 247.193 21.2217 247.634 28.244 245.5C42.5425 241.157 51.0877 230.558 58.11 219.444C66.4015 206.196 74.5237 192.874 81.4614 178.963C88.2299 165.272 94.0677 151.067 97.1136 136.346C100.329 120.743 98.9749 104.918 98.2135 89.1668C97.5366 74.4462 97.875 59.7992 101.682 45.373C104.39 34.9949 108.874 24.5433 117.165 16.447C125.457 8.42421 136.709 4.15523 148.808 2.46236C149.4 2.46236 149.146 1.65273 148.554 1.72633Z\",\n    fill: \"url(#paint0_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M106.336 65.7615C103.882 81.6598 105.743 97.6317 105.659 113.604C105.574 129.943 101.852 145.4 95.4214 160.71C89.2452 175.504 81.123 189.636 72.9162 203.62C69.1935 209.95 65.5554 216.427 61.5789 222.683C57.7716 228.645 53.2029 234.46 46.519 238.14C39.3274 242.041 30.7822 242.335 22.7446 244.028C17.5836 245.059 13.6071 247.193 12.2534 251.904C10.6459 257.424 14.3686 260.81 17.6682 265.226C21.4755 270.452 26.1289 275.31 31.2898 279.579C41.4426 287.969 53.6259 293.784 65.4708 300.114C78.331 307.033 90.5143 315.055 101.259 324.403C124.695 344.644 139.924 370.773 140.855 399.772C141.109 407.501 140.178 415.155 137.555 422.589C135.186 429.287 131.887 435.691 129.01 442.168C125.541 449.97 121.057 458.876 125.88 466.898C129.687 473.228 137.386 477.276 144.493 480.294C153.546 484.048 163.191 486.477 172.836 488.538C181.043 490.304 189.25 491.629 197.457 493.175C215.055 496.56 232.568 500.314 249.997 504.362C267.172 508.337 284.517 512.164 301.269 517.317C316.498 521.954 331.642 527.621 347.717 529.461C362.524 531.154 376.737 528.651 389.598 521.954C401.189 515.918 411.088 507.454 419.041 497.959C427.078 488.317 433.339 477.35 436.385 465.721C439.938 451.81 439.6 437.089 440.361 422.957C441.207 407.574 442.984 392.412 449.584 377.986C455.591 364.811 464.051 352.593 470.143 339.344C476.319 325.948 478.857 311.89 476.827 297.464C474.881 283.479 469.212 270.084 462.951 257.13C459.567 249.99 455.76 243.071 453.052 235.711C450.26 228.204 448.484 220.549 447.384 212.747C445.269 197.658 445.861 182.349 447.045 167.26C448.23 151.951 450.091 136.641 450.43 121.258C450.599 114.34 449.414 106.979 451.445 100.208C452.799 95.7916 455.337 91.8906 457.198 87.6217C461.005 78.9365 454.237 73.269 445.692 69.2945C433.339 63.5534 418.702 63.1118 405.165 64.7311C387.652 66.792 370.646 72.2386 352.794 72.4594C341.372 72.6066 330.373 69.2945 319.882 65.4671C296.108 56.7819 274.11 44.7846 251.859 33.597C228.676 22.1149 202.702 14.9018 176.051 13.4297C163.276 12.6937 149.485 13.2089 137.725 17.9195C128.164 21.7469 120.803 28.3712 115.981 36.4675C110.566 45.4471 108.028 55.6043 106.42 65.6143C106.336 66.1295 107.266 66.3503 107.351 65.8351C110.735 45.3735 119.027 23.587 143.985 16.7419C157.692 12.9881 172.921 13.5769 186.881 15.1962C201.433 16.9627 215.901 20.2748 229.607 24.9854C251.266 32.4929 270.726 44.711 291.116 54.2794C310.66 63.4798 332.827 74.2995 355.755 73.1954C386.129 71.797 421.24 55.0155 449.499 72.3858C454.575 75.4771 458.636 79.4517 456.944 85.1191C455.76 88.9465 453.306 92.4059 451.699 96.086C449.414 101.312 449.161 106.17 449.33 111.69C449.499 119.124 449.245 126.631 448.737 134.065C446.876 162.844 441.631 192.064 447.638 220.77C453.645 249.475 474.712 273.985 476.404 303.72C477.25 319.03 472.512 333.309 465.236 346.999C458.806 359.143 451.022 370.773 446.199 383.506C441.038 397.049 440.023 411.475 439.262 425.607C438.585 439.592 438.923 454.239 434.777 467.929C427.755 491.114 408.042 513.784 382.914 524.088C351.017 537.116 318.19 520.334 287.647 512.532C256.596 504.583 225.123 497.223 193.396 491.482C175.205 488.17 155.746 485.299 139.501 476.908C132.225 473.155 125.034 467.487 124.695 459.612C124.441 454.165 127.233 448.424 129.518 443.419C132.31 437.089 135.525 430.907 137.978 424.429C147.37 399.478 139.84 370.258 124.526 348.25C110.058 327.568 88.5683 311.154 64.9632 298.642C52.7798 292.165 40.4273 286.129 30.2746 277.297C24.7752 272.513 20.5448 267.14 16.3991 261.472C14.1148 258.307 12.1688 255.952 13.3533 251.977C14.707 247.561 18.3451 245.648 23.1676 244.691C30.0207 243.292 37.2969 242.924 43.8116 240.274C49.4802 237.993 53.9643 234.239 57.6024 229.896C61.9173 224.818 64.9632 219.003 68.2628 213.409C72.1547 206.785 76.0466 200.234 79.8539 193.537C87.13 180.803 93.8985 167.849 98.9749 154.38C104.39 140.027 106.843 125.674 106.759 110.512C106.589 95.4972 105.151 80.4085 107.436 65.4671C107.436 65.1727 106.42 65.1727 106.336 65.7615Z\",\n    fill: \"url(#paint1_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M114.628 73.0484C112.174 88.0634 113.697 103.226 113.105 118.388C112.428 134.213 107.69 149.007 100.921 163.58C94.4066 177.565 86.4536 190.887 78.9237 204.43C73.1704 214.661 68.5171 228.719 56.7568 235.122C50.1575 238.655 42.4583 238.803 35.013 239.98C30.3596 240.716 24.6064 241.673 22.8297 246.016C21.2221 249.917 21.9836 256.32 23.5911 260.147C24.3526 261.914 25.7909 263.165 27.3138 264.343C30.6134 266.845 32.221 270.305 34.5899 273.47C41.7815 282.964 51.6804 290.472 62.1716 297.17C73.8473 304.677 85.6922 311.743 96.5218 320.208C107.69 328.966 118.012 338.682 126.388 349.575C130.618 355.022 134.425 360.763 137.64 366.725C141.279 373.57 143.563 380.783 145.34 388.143C147.116 395.577 148.216 403.306 147.539 410.887C146.863 418.394 144.155 425.534 141.363 432.673C138.148 440.843 131.972 451.368 136.371 460.054C139.502 466.31 146.693 470.358 153.377 473.302C162.176 477.129 171.737 479.558 181.213 481.693C189.42 483.533 197.796 484.931 206.087 486.624C223.008 490.231 239.845 494.205 256.597 498.474C272.334 502.523 288.324 506.423 303.469 511.796C317.344 516.802 331.22 522.763 346.28 524.456C373.777 527.548 397.636 511.06 412.357 492.439C419.803 483.018 425.64 472.272 428.009 461.01C430.886 447.467 432.155 433.556 434.439 419.94C436.724 406.102 438.839 391.823 444.592 378.648C450.176 365.768 458.468 353.844 464.475 341.111C470.566 328.304 473.443 314.835 471.835 300.997C470.228 287.454 464.982 274.574 459.06 262.135C455.76 255.216 452.038 248.518 449.33 241.379C446.454 233.945 444.508 226.29 443.408 218.562C441.293 203.988 441.885 189.268 443.154 174.621C444.338 160.047 446.2 145.547 446.623 130.9C446.792 124.129 445.861 117.21 447.976 110.586C449.33 106.391 451.699 102.563 453.137 98.3678C456.268 89.4619 448.569 83.5 440.193 79.5255C428.348 74.0052 414.303 73.4164 401.189 75.0357C383.76 77.1702 366.839 82.6904 348.987 82.4696C338.411 82.3224 328.005 78.7158 318.444 74.9621C296.362 66.3505 275.887 54.8684 255.074 44.1224C246.021 39.4118 236.968 35.2164 226.816 32.3459C213.617 28.6657 199.741 26.5312 185.866 25.7216C163.022 24.3967 137.302 26.1632 124.611 45.1528C118.858 53.6172 116.404 63.4064 114.628 73.0484C114.543 73.5636 115.474 73.7844 115.558 73.2692C117.335 63.1856 120.042 52.8075 126.388 44.1224C132.649 35.5108 142.378 30.0642 153.8 27.9297C167.506 25.4272 182.143 25.9424 195.934 27.4145C209.64 28.8865 223.431 31.6098 236.207 36.3204C245.26 39.6326 253.551 44.4168 261.927 48.833C272.165 54.206 282.402 59.6526 292.893 64.7312C302.877 69.589 313.029 74.226 323.69 77.9798C332.489 81.0711 341.542 83.5736 351.187 83.3528C381.137 82.8376 414.726 65.7617 442.815 82.1016C447.892 85.0457 453.476 89.2411 452.799 95.0557C452.291 99.2511 449.669 103.152 448.061 106.979C446.031 111.764 445.438 116.401 445.523 121.479C445.608 128.692 445.354 135.832 444.761 143.045C442.815 170.573 437.739 198.468 443.577 225.922C446.623 240.127 453.561 252.714 459.737 266.036C465.744 279.063 470.736 292.606 471.243 306.738C471.751 321.459 466.844 335.075 459.737 348.25C453.476 359.806 446.2 370.994 441.631 383.138C436.893 395.945 435.032 409.709 432.917 422.958C430.801 435.985 429.786 449.381 426.656 462.262C421.072 485.152 402.458 507.38 378.684 518.347C364.385 524.971 349.41 525.266 334.012 521.291C319.882 517.685 306.768 511.502 292.893 507.454C263.196 498.695 232.653 490.967 202.11 484.931C184.343 481.472 165.222 478.675 149.401 470.432C142.378 466.751 135.61 461.158 135.779 453.503C135.948 447.394 138.994 441.064 141.279 435.323C143.732 429.067 146.355 422.81 147.709 416.26C150.416 402.864 147.201 389.174 142.886 376.293C138.994 364.517 131.295 353.55 122.919 343.834C106.59 324.771 85.4383 310.934 63.6099 297.023C52.1881 289.736 41.3584 281.64 33.9977 270.967C32.3056 268.612 31.2903 266.109 28.9213 264.269C25.8755 261.988 24.3526 259.853 23.7603 256.394C23.2527 253.597 22.7451 250.653 23.3373 247.782C24.268 243.219 28.7521 241.968 33.3208 241.011C40.0047 239.686 47.0271 239.759 53.3725 237.478C58.1951 235.711 62.087 232.767 65.2174 229.161C68.8555 224.965 71.3937 220.107 73.8473 215.397C77.1469 209.214 80.6158 203.031 84.1693 196.922C98.2985 172.045 112.935 146.578 114.035 118.314C114.628 103.299 113.02 88.2106 115.558 73.1956C115.727 72.754 114.712 72.5332 114.628 73.0484Z\",\n    fill: \"url(#paint2_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M122.919 80.4807C120.38 94.7597 121.65 109.186 120.38 123.538C119.027 138.774 113.02 152.98 105.997 166.817C99.3981 179.771 91.8681 192.357 85.1842 205.238C80.1924 214.954 76.8082 227.687 65.0479 232.913C58.6178 235.783 51.2571 235.489 44.3193 236.372C40.089 236.887 33.7436 237.77 31.3746 241.377C29.0902 244.763 30.6977 249.621 31.8822 253.08C33.2359 257.275 33.9974 262.648 37.72 265.887C39.4968 267.359 41.6965 268.316 43.5579 269.714C46.6037 272.07 48.5497 276.118 50.9186 278.988C55.149 284.067 59.7177 288.777 64.7095 293.267C74.4392 302.1 85.3534 309.754 95.6754 318.071C106.336 326.683 116.489 335.883 125.372 345.967C134.679 356.419 144.07 368.416 148.385 381.149C150.839 388.289 153.377 395.355 154.308 402.789C155.323 410.296 154.138 417.583 152.023 424.87C150.162 431.42 147.708 437.824 146.439 444.522C145.847 447.834 145.678 450.925 147.201 454.016C150.077 459.978 156.93 463.879 163.276 466.676C171.99 470.503 181.466 472.932 190.858 474.993C199.403 476.907 208.033 478.453 216.493 480.44C232.568 484.267 248.559 488.463 264.38 493.026C279.356 497.369 294.246 501.711 308.376 507.82C320.221 512.972 332.573 518.64 346.026 519.67C371.323 521.584 393.743 503.11 406.265 485.813C413.118 476.392 417.772 466.087 419.718 455.047C421.917 442.166 425.302 429.507 428.771 416.847C432.155 404.408 434.693 391.307 439.6 379.236C444.93 366.281 453.222 354.431 459.313 341.698C465.067 329.701 468.028 317.188 466.759 304.234C465.49 291.206 460.667 278.767 454.998 266.77C448.653 253.227 442.054 240.42 439.6 225.773C437.231 211.2 437.823 196.406 439.177 181.759C440.446 167.553 442.308 153.421 442.731 139.216C442.9 132.886 442.392 126.63 444.507 120.447C445.946 116.252 448.315 112.277 449.161 107.935C450.937 98.8814 441.208 92.4044 432.832 88.8714C421.41 84.0136 408.127 83.7192 395.689 85.3385C379.191 87.6202 362.778 92.9196 345.856 92.1836C336.127 91.742 326.481 88.0618 317.767 84.5288C296.954 75.9909 277.664 64.9504 258.12 54.4252C250.167 50.1562 242.298 45.8136 233.415 43.1639C221.316 39.5574 208.371 38.0853 195.68 37.4965C174.275 36.5396 146.524 36.3188 133.325 53.6892C127.318 61.7119 124.78 71.2803 122.919 80.4807C122.834 80.9959 123.765 81.2167 123.849 80.7015C125.711 71.1331 128.333 61.1967 134.933 53.1739C142.293 44.3416 153.292 40.6614 165.306 39.3366C178.42 37.8645 191.788 37.8645 204.902 39.0421C217.424 40.1462 230.538 42.2071 241.875 47.2121C249.828 50.6714 257.273 55.0876 264.803 59.1358C274.364 64.3616 284.009 69.5874 293.739 74.5188C303.299 79.3766 313.114 84.0136 323.351 87.7674C330.712 90.4907 338.496 92.9932 346.533 93.214C376.145 94.0973 407.45 76.5797 435.708 91.3003C441.208 94.1709 447.892 98.6606 448.399 104.77C448.738 108.818 446.538 112.719 445.015 116.473C440.446 127.513 441.969 139.29 441.123 150.845C439.092 177.637 433.932 204.723 439.685 231.441C442.646 245.131 449.584 257.349 455.421 270.156C461.006 282.521 465.574 295.402 465.997 308.797C466.42 323.003 461.429 336.178 454.575 348.911C448.484 360.099 441.461 370.918 437.231 382.769C433.001 394.692 430.378 407.205 427.078 419.276C423.779 431.494 420.733 443.712 418.533 456.077C414.557 478.379 397.635 500.018 375.553 511.868C362.947 518.64 349.494 520.774 335.196 517.168C321.743 513.782 309.899 507.231 297.123 502.447C283.501 497.369 269.118 493.541 254.989 489.64C240.775 485.666 226.392 481.838 211.924 478.673C194.496 474.846 175.713 472.417 159.976 464.247C153.038 460.641 146.355 455.268 146.947 447.613C147.877 434.585 155.492 422.661 155.661 409.413C155.746 402.936 154.223 396.532 152.362 390.276C150.585 384.461 148.893 378.647 145.932 373.2C139.925 362.233 132.225 352.003 123.426 342.508C114.627 332.939 104.728 324.181 94.3217 315.863C84.6766 308.135 74.4392 300.922 65.3017 292.605C59.8869 287.673 54.8951 282.448 50.411 276.927C48.5497 274.646 47.1113 271.628 44.9962 269.641C43.0502 267.801 40.0044 266.844 37.9739 265.004C35.6895 262.869 35.2665 259.999 34.3358 257.349C33.4051 254.773 32.4745 252.197 31.7976 249.473C31.2054 246.971 30.6131 243.806 32.3898 241.524C34.5896 238.727 39.7506 237.918 43.3041 237.402C49.7341 236.446 56.5027 236.74 62.6789 234.753C67.2477 233.281 71.0549 230.705 74.0162 227.392C77.2312 223.786 79.3464 219.517 81.3769 215.322C84.0843 209.581 86.8763 203.987 89.9222 198.393C102.867 174.472 118.942 150.404 121.396 123.538C122.665 109.259 121.396 94.9069 123.934 80.7015C124.019 80.1863 123.088 79.9655 122.919 80.4807Z\",\n    fill: \"url(#paint3_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M131.21 87.9158C128.334 102.195 129.687 116.768 126.98 131.047C124.273 145.4 116.912 159.016 109.805 172.044C103.375 183.821 96.3525 195.45 91.3607 207.668C87.3842 217.384 83.4923 228.498 70.6322 231.515C64.4559 232.987 58.0258 232.546 51.765 233.282C47.5346 233.797 41.6968 234.828 39.074 238.066C36.8742 240.789 37.8049 244.543 38.8202 247.487C40.3431 252.198 42.9659 256.54 44.9118 261.03C46.604 264.931 47.8731 267.655 52.0188 270.083C57.8566 273.543 62.51 277.37 67.0787 282.081C76.3854 291.576 84.0846 302.174 93.3067 311.743C102.19 321.017 112.005 329.555 120.888 338.902C130.703 349.28 139.84 360.247 147.455 372.024C149.147 374.673 150.924 377.323 152.362 380.12C154.139 383.432 155.239 387.039 156.592 390.498C159.215 397.196 162.007 404.041 161.838 411.254C161.753 418.615 159.638 425.828 158.284 433.114C157.438 437.457 156.169 442.315 157.438 446.584C159.3 452.766 165.899 456.815 171.991 459.611C180.367 463.439 189.589 465.868 198.642 468.002C207.525 470.063 216.409 471.756 225.208 474.038C240.352 478.012 255.412 482.428 270.219 487.286C283.586 491.702 296.447 496.266 308.714 502.596C318.867 507.821 329.697 513.636 341.711 514.667C353.471 515.697 364.639 510.986 373.861 505.025C383.845 498.621 392.221 490.378 398.651 481.177C405.166 471.83 408.804 462.114 411.003 451.441C413.288 439.886 417.687 428.698 421.833 417.658C426.063 406.396 429.701 395.061 433.34 383.653C437.401 370.993 445.1 359.585 451.445 347.735C457.537 336.326 461.936 324.329 461.936 311.596C461.852 298.641 457.706 286.129 452.376 274.132C446.623 261.251 439.516 249.107 436.639 235.416C433.678 221.432 434.016 207.153 435.116 193.095C436.216 179.257 438.247 165.42 439.008 151.509C439.347 144.958 438.839 138.407 440.785 132.004C442.054 127.809 444.169 123.76 444.931 119.418C446.454 110.365 437.739 103.593 429.363 99.6187C418.364 94.4664 405.419 93.804 393.321 95.3497C377.161 97.4106 361.255 102.784 344.672 102.048C335.788 101.68 327.159 98.2202 319.29 94.9817C299.154 86.5909 280.541 75.624 261.758 65.0988C254.905 61.2714 247.967 56.9289 240.437 54.1319C229.523 50.0102 217.086 49.0533 205.325 48.7589C192.465 48.4645 179.521 49.3477 166.83 51.1142C157.015 52.5127 148.132 55.7512 141.955 62.8171C135.694 70.1774 133.072 79.2306 131.21 87.9158C131.126 88.431 132.056 88.6518 132.141 88.1366C134.087 78.789 136.964 68.779 144.409 61.5659C152.616 53.6167 164.291 52.1447 175.882 51.0406C198.726 48.7589 225.8 47.5813 246.36 58.0329C263.365 66.6445 279.441 76.5809 296.362 85.3397C305.415 90.0503 314.637 94.54 324.367 98.1466C331.22 100.723 338.411 103.004 345.941 103.078C374.454 103.446 405.335 86.6645 431.986 102.268C437.485 105.507 443.577 110.217 444 116.4C444.254 120.743 442.054 125.085 440.616 129.133C436.724 140.174 437.993 152.245 436.978 163.727C434.609 189.562 429.786 216.059 436.978 241.673C440.616 254.553 447.976 266.33 453.137 278.769C458.214 290.987 461.683 303.794 460.667 316.895C458.637 342.656 437.824 362.897 431.224 387.554C425.302 409.561 413.88 430.391 409.734 452.766C405.673 474.7 390.106 495.677 368.277 507.38C356.602 513.636 344.418 515.771 331.304 511.796C319.29 508.116 309.053 501.344 297.716 496.339C285.701 491.04 272.588 487.213 259.981 483.238C246.783 479.116 233.415 475.142 219.878 471.903C202.618 467.781 183.328 465.5 168.099 456.741C164.714 454.754 161.415 452.325 159.553 449.086C156.846 444.449 158.2 439.003 159.13 434.071C160.23 428.036 161.838 422.147 162.515 416.038C163.276 409.709 162.345 403.82 160.315 397.711C158.454 392.191 156.677 386.156 153.885 380.93C150.839 375.041 146.947 369.374 142.971 363.927C135.61 353.77 127.234 344.275 118.435 335.149C109.974 326.463 100.583 318.367 92.376 309.535C83.5769 300.04 76.047 289.809 66.8249 280.609C62.8484 276.634 58.9565 273.028 53.7955 270.231C50.6651 268.464 48.1269 266.698 46.8578 263.533C46.0963 261.693 45.3349 259.779 44.4888 257.939C42.3737 253.449 39.6663 248.886 38.9048 244.028C37.8895 237.477 44.4042 235.196 50.8343 234.239C61.6639 232.693 73.3396 234.46 81.631 226.878C88.3995 220.696 90.5147 211.716 94.0681 203.988C105.49 179.11 124.357 155.483 128.503 128.471C130.533 115.075 129.603 101.532 132.226 88.1366C132.31 87.6214 131.38 87.4005 131.21 87.9158Z\",\n    fill: \"url(#paint4_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M139.586 95.3492C136.54 109.039 137.386 123.171 133.325 136.641C129.264 150.184 121.48 162.843 114.543 175.429C108.62 186.175 103.206 196.995 99.1444 208.404C95.4217 218.855 90.0069 227.982 76.3007 229.307C67.5016 230.19 52.6109 227.761 46.4347 235.048C41.8659 240.347 47.873 249.18 50.665 254.038C52.9494 258.012 55.4029 261.839 57.1797 265.961C58.8718 269.789 61.6638 272.07 65.6403 274.131C77.9928 280.535 86.6227 290.397 94.3219 300.849C101.26 310.197 107.774 319.618 115.389 328.597C123.849 338.607 132.395 348.544 140.432 358.848C144.832 364.516 149.062 370.257 153.039 376.145C154.9 378.868 156.677 381.592 158.369 384.315C160.23 387.259 161.161 390.498 162.684 393.663C165.391 399.404 168.691 404.997 169.114 411.254C169.537 418.246 168.268 425.312 168.014 432.304C167.845 436.279 167.506 440.401 169.706 444.007C171.314 446.51 173.767 448.57 176.39 450.263C183.751 454.974 192.888 457.55 201.518 459.832C210.317 462.113 219.37 463.806 228.169 466.162C242.552 469.989 256.766 474.773 270.557 479.925C282.317 484.342 294.077 488.684 304.569 495.161C313.791 500.829 323.351 507.527 334.688 509.514C345.518 511.428 355.84 507.232 364.555 502.006C374.369 496.118 382.66 488.243 389.09 479.484C395.69 470.504 399.751 460.936 401.866 450.484C403.981 440.033 408.888 430.023 413.542 420.233C418.28 410.297 423.525 400.36 426.994 389.982C428.771 384.609 430.124 379.163 432.493 373.863C435.201 367.754 438.585 361.94 441.969 356.125C448.146 345.305 454.153 334.265 456.014 322.12C457.875 309.755 455.422 297.39 451.022 285.613C446.115 272.733 438.331 260.662 434.355 247.56C430.294 234.165 429.871 220.254 430.801 206.49C431.647 193.021 433.762 179.551 434.862 166.082C435.455 159.384 434.947 152.465 436.385 145.915C437.401 141.057 439.6 136.42 440.446 131.562C441.885 122.582 434.778 115.59 426.486 111.027C416.08 105.286 403.389 104.182 391.459 105.506C375.976 107.199 361.17 112.131 345.433 112.131C336.888 112.131 328.766 109.113 321.236 105.948C301.946 97.8517 284.178 87.1057 266.327 76.8012C259.304 72.7531 252.282 68.5577 244.921 64.9511C236.037 60.6086 225.715 59.6517 215.732 59.5781C203.379 59.5045 191.027 60.8294 178.844 62.5958C168.606 63.9943 158.2 65.172 150.839 72.1643C144.07 78.4941 141.532 87.1793 139.586 95.3492C139.417 95.8645 140.432 96.0853 140.517 95.57C142.632 86.6641 145.593 76.8749 153.8 70.6922C162.43 64.2151 175.544 63.6999 186.374 62.375C198.811 60.8294 211.586 59.7253 224.108 60.7558C233.922 61.4918 242.045 64.2887 250.336 68.7785C267.173 77.9053 283.248 87.9889 300.254 96.8949C314.298 104.255 330.627 113.456 347.633 112.94C374.876 112.131 405.335 96.8213 429.786 114.265C434.778 117.872 439.431 122.582 439.516 128.471C439.6 133.108 437.485 137.671 436.216 142.087C434.693 147.387 434.524 152.539 434.27 157.985C433.932 164.536 433.339 171.013 432.578 177.564C429.786 202.883 425.809 229.012 435.285 253.669C439.939 265.814 447.046 277.149 451.191 289.514C455.506 302.248 457.029 315.57 453.476 328.671C450.091 341.036 442.815 352.077 436.554 363.485C433.932 368.343 431.393 373.201 429.448 378.353C427.502 383.358 426.402 388.51 424.54 393.515C417.095 412.947 404.235 431.2 400.512 451.515C396.536 472.712 380.376 493.395 358.801 504.067C353.302 506.791 347.21 509.072 340.78 509.146C334.604 509.219 328.597 507.306 323.182 504.877C313.283 500.387 305.076 493.689 295.346 488.979C283.925 483.458 271.403 479.189 259.304 475.068C247.629 471.019 235.868 467.118 223.77 464.248C214.717 462.113 205.664 460.273 196.78 457.697C188.404 455.268 178.844 452.324 172.752 446.51C169.283 443.124 168.691 439.591 168.691 435.175C168.691 428.33 169.706 421.558 169.875 414.713C170.045 408.825 168.352 403.673 165.73 398.226C163.53 393.736 162.007 388.805 159.384 384.536C145.847 362.749 128.587 343.024 111.751 323.151C97.7061 306.59 88.1456 284.73 66.9094 273.984C64.3712 272.733 61.9176 271.408 60.1409 269.421C58.5334 267.654 57.9411 265.446 56.9259 263.459C54.9799 259.558 52.5263 255.878 50.4112 252.05C48.296 248.223 45.6732 243.807 45.7578 239.464C45.8424 233.576 53.7108 231.662 59.2948 231.073C69.363 229.969 80.531 231.957 89.0763 226.068C96.437 220.916 98.7214 212.305 101.429 204.797C110.059 180.508 128.672 159.237 134.933 134.359C138.148 121.626 137.556 108.524 140.432 95.7908C140.602 95.0548 139.671 94.834 139.586 95.3492Z\",\n    fill: \"url(#paint5_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M147.877 102.783C144.493 115.884 144.493 129.501 138.909 142.087C133.41 154.6 125.795 166.45 119.45 178.668C116.658 184.041 113.95 189.487 111.835 195.081C110.228 199.35 109.128 203.84 107.689 208.183C106.166 212.746 104.22 217.383 100.413 220.842C95.9291 224.891 89.8374 226.289 83.4919 226.51C74.1852 226.878 61.0712 224.817 54.0489 231.662C49.3956 236.225 53.6259 243.659 56.1641 248.223C58.4484 252.344 61.1558 256.245 63.7786 260.146C66.063 263.606 67.6705 267.286 69.7857 270.745C71.9855 274.278 75.8773 276.413 79.8538 278.253C85.6917 280.976 90.5989 284.215 95.1676 288.41C103.967 296.58 109.889 306.59 115.558 316.526C121.311 326.684 127.826 336.473 134.679 346.188C142.716 357.597 150.923 368.932 158.792 380.34C160.738 383.211 162.683 386.008 164.629 388.878C166.322 391.381 167.168 394.03 168.69 396.607C171.906 402.053 175.797 406.617 176.474 412.946C177.151 419.718 177.32 426.489 178.589 433.187C179.182 436.279 180.451 438.855 182.989 441.136C188.827 446.436 197.626 449.159 205.41 451.441C214.716 454.164 224.361 456.078 233.753 458.58C246.867 462.04 259.558 467.045 271.826 472.271C282.655 476.908 293.4 481.471 302.622 488.39C309.983 493.91 317.428 500.313 326.651 503.405C336.634 506.717 346.11 503.552 354.74 498.841C364.639 493.395 373.015 485.887 379.529 477.496C386.129 468.958 390.782 459.464 392.728 449.38C394.505 439.885 399.666 430.979 404.573 422.441C409.734 413.388 415.403 404.556 419.887 395.208C424.625 385.492 426.824 375.114 431.901 365.472C437.654 354.653 444.676 344.275 448.484 332.719C452.291 321.163 452.206 309.092 449.076 297.463C445.692 284.877 439.262 273.469 433.847 261.545C428.009 248.664 426.232 234.753 426.571 220.99C426.909 207.815 428.94 194.713 430.462 181.612C431.224 174.988 431.478 168.363 432.07 161.665C432.578 156.072 434.608 150.846 435.708 145.399C440.023 125.011 413.372 114.339 393.743 115.148C378.768 115.737 364.47 120.742 349.494 121.699C340.188 122.361 332.573 120.521 324.197 117.062C305.584 109.481 288.578 98.882 271.741 88.7984C264.465 84.4558 257.273 80.0396 249.828 75.9178C242.636 71.9433 235.614 69.6616 226.984 69.3672C214.716 68.9255 202.448 71.06 190.519 73.1209C184.85 74.1514 179.266 75.1818 173.598 76.1386C168.86 76.9483 164.46 78.1995 160.653 80.7756C152.785 86.2223 149.993 94.9074 147.877 102.783C147.708 103.298 148.639 103.519 148.808 103.004C151.262 94.0242 154.646 84.0878 164.883 79.598C170.044 77.3163 176.051 76.8011 181.551 75.7706C187.304 74.7402 193.057 73.6361 198.895 72.7529C210.655 70.9128 223.515 68.9991 235.445 71.2808C243.059 72.7529 249.49 76.8747 255.835 80.6284C272.079 90.1232 287.985 100.133 304.737 108.966C312.183 112.94 319.882 116.694 328.004 119.638C335.957 122.509 343.064 123.318 351.694 122.509C365.823 121.184 379.36 116.62 393.574 116.105C406.18 115.59 418.702 118.681 427.586 126.63C432.408 130.973 435.623 135.978 435.031 142.161C434.608 147.166 432.578 152.023 431.562 157.028C430.378 162.77 430.547 168.584 430.039 174.399C429.447 180.655 428.686 186.911 427.924 193.168C424.878 217.898 423.017 242.482 434.608 265.887C440.361 277.443 446.199 289.146 448.907 301.585C451.699 314.539 450.176 327.42 444.676 339.711C439.769 350.605 432.747 360.688 427.755 371.582C425.471 376.587 424.117 381.739 422.34 386.891C420.817 391.234 418.787 395.429 416.587 399.477C407.788 416.038 395.012 432.083 391.459 450.337C387.482 471.019 370.477 491.481 348.902 500.976C343.318 503.405 337.48 505.098 331.135 503.993C326.058 503.11 321.49 500.829 317.259 498.252C309.222 493.321 302.622 486.697 294.331 482.133C283.586 476.245 271.741 471.387 260.15 466.971C249.913 462.997 239.506 459.39 228.676 456.74C219.285 454.459 209.809 452.398 200.672 449.38C193.142 446.877 182.651 443.197 180.028 435.837C177.743 429.434 177.997 422 177.49 415.375C177.067 410.297 175.882 406.396 173.005 401.906C170.044 397.343 168.014 392.485 164.968 388.069C161.161 382.401 157.184 376.734 153.208 371.14C145.593 360.394 137.894 349.721 130.448 338.975C124.357 330.069 118.942 320.869 113.527 311.669C108.197 302.542 102.19 293.636 93.8139 286.423C89.8374 282.963 85.6071 280.314 80.6153 278.032C74.9467 275.382 71.5624 272.806 69.0242 267.654C65.3862 260.441 59.9714 253.964 56.1641 246.824C54.3027 243.365 51.9338 238.875 53.0336 234.974C54.5566 229.822 62.5942 228.276 67.7551 227.835C77.5695 227.025 88.6529 229.233 97.452 224.154C104.728 219.885 107.351 212.157 109.466 205.091C112.85 193.977 117.588 183.526 123.342 173.148C129.349 162.181 136.286 151.361 140.77 139.805C145.424 127.955 145.508 115.295 148.639 103.151C148.977 102.489 147.962 102.268 147.877 102.783Z\",\n    fill: \"url(#paint6_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M156.169 110.217C154.223 116.621 152.954 123.245 151.177 129.649C149.231 136.42 146.27 142.676 142.717 148.933C136.287 160.341 129.18 171.529 124.019 183.379C120.211 192.138 119.112 201.485 115.389 210.244C113.528 214.513 110.651 218.561 105.998 220.916C100.667 223.64 94.3219 223.64 88.3149 223.566C79.4312 223.345 66.9095 222.168 60.6486 229.234C56.6721 233.797 60.2256 240.495 62.6792 244.911C66.9095 252.566 72.7473 259.411 77.4853 266.845C79.5158 269.936 80.7003 273.543 83.4077 276.266C86.792 279.578 91.4453 281.418 95.9294 283.405C119.196 293.931 126.134 316.085 135.441 335.59C140.686 346.557 146.778 357.303 153.293 367.755C156.931 373.569 160.738 379.31 164.63 384.978C166.745 387.995 168.86 390.94 170.975 393.957C172.16 395.65 172.921 397.417 174.106 399.11C176.559 402.643 180.959 404.851 182.905 408.752C183.412 409.782 183.328 410.665 183.582 411.696C183.92 413.021 184.766 414.419 185.274 415.744C186.374 418.909 187.05 422.221 187.981 425.459C188.996 429.066 190.096 432.452 193.058 435.175C195.85 437.751 199.572 439.591 203.295 441.063C212.348 444.817 222.247 446.952 231.807 449.307C243.567 452.251 254.82 456.152 265.734 461.083C271.488 463.733 277.072 466.53 282.571 469.621C287.478 472.345 292.555 474.921 296.785 478.38C303.638 484.121 309.222 490.893 316.921 495.75C324.536 500.535 331.981 501.123 340.526 497.738C351.187 493.542 360.24 486.476 367.431 478.454C374.538 470.578 380.038 461.378 382.745 451.589C383.76 447.688 384.268 443.86 385.875 440.18C387.737 435.764 390.275 431.569 392.898 427.373C398.397 418.688 404.573 410.297 410.242 401.686C415.149 394.178 418.618 386.891 421.325 378.648C425.217 366.798 432.663 356.199 438.416 345.011C444 333.971 447.215 322.489 445.946 310.344C444.677 298.052 439.685 286.423 434.186 275.088C431.14 268.758 427.84 262.576 425.894 255.952C423.948 249.327 423.018 242.409 422.679 235.563C422.171 222.315 424.117 209.14 425.894 196.039C426.74 189.562 427.586 183.084 428.009 176.534C428.432 170.498 429.871 164.684 431.055 158.795C433.001 149.08 430.04 141.204 421.664 134.433C413.88 128.177 403.643 125.38 393.236 125.232C379.107 125.085 365.57 129.649 351.694 131.194C341.711 132.298 334.096 131.268 325.128 127.588C307.361 120.375 291.201 109.923 275.21 100.134C267.765 95.5704 260.404 90.9334 252.874 86.5172C246.867 83.0578 241.199 79.6721 233.838 79.0097C222.754 78.0528 211.332 80.7761 200.757 83.2786C195.173 84.6035 189.589 86.0756 184.005 87.3268C179.351 88.3573 174.275 88.8725 169.96 90.7862C161.584 94.6135 158.538 102.783 156.169 110.217C156 110.733 156.931 110.953 157.1 110.438C160.146 100.796 164.376 92.1846 176.644 89.8293C187.558 87.6948 198.134 84.7507 208.964 82.469C219.032 80.3345 231.469 77.832 241.452 81.6594C247.798 84.0883 253.551 88.0628 259.22 91.5222C275.041 101.164 290.609 111.248 307.107 120.08C314.045 123.834 321.151 127.441 328.766 130.09C336.55 132.814 343.488 133.182 351.864 132.225C365.654 130.679 379.191 126.116 393.236 126.263C405.419 126.41 416.926 130.311 424.71 138.628C429.194 143.412 431.394 148.638 430.717 154.821C430.209 160.047 428.432 165.199 427.586 170.425C426.656 176.534 426.571 182.716 425.81 188.826C425.048 195.082 424.117 201.338 423.356 207.668C421.748 220.254 420.733 233.061 422.594 245.721C424.456 258.16 430.209 268.906 435.539 280.388C440.869 291.796 445.269 303.794 445.269 316.232C445.269 329.481 439.6 341.405 433.001 353.034C427.417 362.897 422.256 372.465 419.041 383.064C416.587 391.234 411.173 398.815 406.265 406.028C400.766 414.125 394.928 422 390.021 430.317C387.99 433.703 386.129 437.089 384.691 440.695C383.168 444.375 382.745 448.129 381.73 451.883C378.684 462.555 372.169 472.565 363.962 480.883C356.432 488.464 346.026 496.339 334.519 498.842C323.859 501.123 314.891 493.763 308.207 487.581C301.946 481.839 296.446 476.393 288.832 471.977C277.918 465.72 266.665 460.053 254.736 455.416C245.598 451.883 236.207 449.38 226.562 447.025C217.086 444.67 207.018 442.388 198.726 437.751C194.327 435.322 191.619 432.452 190.181 428.109C189.25 425.533 188.658 422.81 187.981 420.16C187.135 416.922 185.697 413.83 184.935 410.665C184.089 407.353 182.059 405.145 179.436 402.642C175.798 399.257 173.767 395.503 170.975 391.602C163.022 380.635 155.662 369.374 148.893 357.892C143.055 347.955 137.81 337.798 133.241 327.347C129.349 318.441 125.457 309.387 119.535 301.291C113.697 293.342 105.998 286.644 96.3525 282.301C91.3607 280.093 86.1151 277.959 82.9847 273.69C80.8695 270.746 79.5158 267.286 77.4853 264.269C72.6627 257.129 67.0787 250.358 63.1868 242.85C61.5793 239.685 59.7179 235.711 60.6486 232.178C61.9177 227.32 68.6862 225.259 73.678 224.597C83.7461 223.272 94.5757 226.142 104.305 222.757C112.174 220.033 115.981 213.556 118.181 206.858C121.142 197.731 123.003 188.752 127.149 179.92C132.818 167.849 140.263 156.514 146.609 144.737C152.531 133.77 154.139 121.994 157.607 110.365C157.269 109.923 156.338 109.702 156.169 110.217Z\",\n    fill: \"url(#paint7_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M164.46 117.652C162.091 123.761 160.145 130.017 157.353 135.979C154.392 142.235 150.331 148.05 146.608 153.938C140.009 164.463 133.579 175.504 130.279 187.206C127.995 195.376 127.741 204.577 122.749 212.011C116.488 221.285 104.559 220.917 93.6448 220.475C85.0149 220.107 73.2547 219.665 67.586 226.658C64.0326 231 66.8246 237.109 69.109 241.452C73.1701 249.18 79.0079 256.099 84.3381 263.238C86.5379 266.183 88.8222 269.127 90.599 272.292C92.7141 275.972 94.4908 279.21 98.3827 281.86C102.444 284.583 107.266 286.276 111.751 288.264C117.335 290.766 122.326 294.152 126.557 298.2C134.763 306.075 139.501 316.012 142.97 326.096C146.355 335.958 148.977 346.042 152.869 355.831C157.269 366.798 162.684 377.397 169.283 387.48C172.582 392.486 176.221 397.491 179.859 402.275C181.382 404.336 184.174 405.366 186.458 406.691C190.519 409.12 192.803 413.757 195.088 417.584C197.457 421.559 199.403 426.122 203.21 429.361C209.809 434.954 220.047 437.31 228.592 439.518C239.675 442.462 250.674 444.965 261.081 449.602C272.587 454.68 283.586 461.452 292.977 469.106C299.069 474.111 302.961 481.03 308.376 486.624C312.944 491.261 319.205 496.34 326.82 495.309C336.973 493.984 346.956 486.624 353.809 480.441C361.931 473.081 368.362 464.175 372.169 454.533C373.776 450.485 374.199 446.216 375.638 442.094C376.907 438.34 379.022 434.734 381.306 431.348C391.205 416.112 405.419 402.937 413.88 386.965C415.741 383.432 416.587 379.752 417.856 375.998C419.971 369.963 423.102 364.222 426.317 358.554C432.409 347.735 438.923 336.989 440.7 324.844C442.392 313.289 439.685 301.807 435.285 290.987C430.293 278.622 422.763 267.066 420.31 254.038C417.856 240.937 419.125 227.615 420.902 214.513C422.679 201.412 423.779 188.09 426.317 175.062C428.178 165.199 428.347 156.735 420.987 148.491C414.641 141.352 405.335 137.083 395.097 135.979C381.899 134.58 369.038 138.408 356.178 140.469C349.917 141.499 342.98 142.603 336.634 141.573C333.25 140.984 329.95 139.88 326.735 138.628C309.476 131.783 293.908 121.405 278.679 111.763C271.233 107.053 263.873 102.268 256.427 97.6315C251.351 94.4666 245.598 90.1976 239.421 88.8727C230.369 86.8855 220.131 89.8296 211.586 92.3321C201.349 95.3498 191.365 99.2508 180.789 101.532C170.975 103.52 167.506 109.85 164.46 117.652C164.291 118.167 165.222 118.388 165.391 117.872C167.083 113.456 168.86 108.451 173.175 105.286C177.236 102.269 183.074 101.9 187.981 100.502C198.218 97.6315 208.117 93.7305 218.524 91.228C227.661 89.0199 236.968 87.6215 245.344 92.1113C251.436 95.3498 257.189 99.1036 262.942 102.71C278.34 112.499 293.485 122.509 309.645 131.342C316.159 134.875 322.843 138.26 329.95 140.689C338.326 143.486 346.787 142.75 355.501 141.352C369.038 139.217 382.575 135.022 396.451 136.936C408.296 138.628 419.041 145.032 424.117 154.674C427.163 160.341 426.655 166.45 425.555 172.486C424.625 177.785 423.694 183.011 423.186 188.458C422.002 200.897 419.548 213.262 418.364 225.701C417.264 237.625 417.349 249.769 420.902 261.325C424.54 273.248 431.816 284.142 435.962 295.992C440.362 308.578 441.546 321.679 437.146 334.413C433.17 345.821 425.894 356.052 420.479 366.945C416.587 374.821 415.064 383.285 410.242 390.866C405.419 398.374 399.666 405.44 393.997 412.506C388.413 419.498 382.66 426.564 378.26 434.145C374.199 441.064 373.607 448.571 370.477 455.784C366.077 466.089 358.632 475.51 349.325 482.944C342.134 488.685 329.358 497.591 319.036 493.469C310.829 490.157 305.499 482.281 300.507 476.099C295.431 469.842 289.424 465.205 282.402 460.495C273.095 454.239 262.857 448.792 251.943 445.038C242.129 441.652 231.638 439.739 221.654 436.721C216.832 435.323 212.009 433.703 207.694 431.348C202.956 428.772 200.503 425.165 197.964 420.896C195.68 417.069 193.48 413.094 191.027 409.341C189.419 406.838 185.866 405.513 183.243 403.968C179.351 401.686 176.728 396.607 174.19 393.148C170.552 388.069 167.168 382.77 164.122 377.397C158.284 367.092 153.631 356.346 149.908 345.306C143.986 327.568 140.347 308.136 124.103 294.888C120.211 291.723 115.812 289.147 111.074 287.086C106.336 285.025 101.259 283.259 97.2829 280.02C93.7294 277.149 92.3757 273.396 90.0913 269.863C88.0608 266.698 85.6918 263.68 83.4074 260.662C78.331 253.964 72.8316 247.34 69.1936 239.98C67.6706 236.962 66.0631 233.208 66.9092 229.823C67.9245 225.406 73.5931 222.904 78.0772 221.947C88.1454 219.813 98.4673 222.757 108.62 221.211C116.996 219.886 122.665 215.249 125.626 208.478C128.926 200.897 129.264 192.653 131.887 184.851C136.033 172.486 143.055 161.077 150.162 149.89C153.208 145.032 156.338 140.248 158.707 135.022C161.245 129.428 163.107 123.613 165.222 117.946C165.645 117.357 164.629 117.136 164.46 117.652Z\",\n    fill: \"url(#paint8_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M172.836 125.012C168.944 130.09 166.321 135.831 162.683 141.057C158.791 146.651 154.392 151.95 150.838 157.691C144.831 167.407 140.516 177.638 138.57 188.605C137.132 196.627 136.54 206.417 129.687 212.599C121.649 219.886 109.043 217.678 98.7207 217.236C90.3447 216.868 79.5997 217.236 74.4387 224.008C70.9698 228.498 73.7618 234.607 76.0462 239.023C80.1073 246.751 85.9451 253.67 91.4445 260.662C93.9827 263.901 96.6055 267.066 98.9745 270.378C101.09 273.322 102.528 276.56 104.643 279.505C110.312 287.527 121.226 289.809 130.025 294.225C141.362 299.966 149.061 309.24 153.461 319.913C157.268 329.187 158.791 338.902 160.314 348.544C162.091 359.585 164.967 370.478 169.536 380.93C173.343 389.467 178.927 400.066 186.034 406.249C187.05 407.132 188.15 407.427 189.926 407.868C191.872 408.31 193.818 408.751 195.595 409.488C197.118 410.15 197.964 411.254 199.148 412.284C203.717 415.891 207.609 420.234 212.432 423.546C215.985 426.048 220.3 427.594 224.53 428.992C235.868 432.673 247.966 434.66 259.134 438.855C270.387 443.124 279.778 449.675 287.9 457.55C290.777 460.347 293.484 462.997 295.515 466.309C297.546 469.548 299.322 472.86 301.268 476.098C304.483 481.177 308.714 488.022 315.482 490.009C323.435 492.438 333.503 485.593 339.172 481.471C348.394 474.847 355.839 466.236 360.662 456.741C364.385 449.454 364.723 441.358 369.038 434.365C378.26 419.277 392.643 406.985 403.642 392.927C406.011 389.909 408.211 386.891 409.987 383.579C411.764 380.194 412.441 376.587 413.795 373.054C418.11 361.719 425.64 351.562 430.631 340.448C435.623 329.26 436.638 317.557 433.846 305.781C430.885 293.342 423.947 282.375 419.209 270.451C414.048 257.497 414.048 243.66 415.656 230.19C417.264 216.942 419.294 203.62 421.409 190.445C423.101 179.699 424.455 169.541 417.264 159.973C411.764 152.686 403.303 147.829 393.489 146.283C371.153 142.75 348.394 157.25 326.989 148.859C310.321 142.308 295.346 131.93 280.794 122.435C273.264 117.504 265.818 112.499 258.204 107.641C253.212 104.403 247.966 100.575 242.298 98.2937C235.021 95.3495 226.053 98.2201 219.115 100.649C209.217 104.108 200.079 108.819 190.18 112.205C186.373 113.53 181.889 113.898 178.589 116.032C175.205 118.24 173.597 121.552 172.582 125.085C172.413 125.6 173.343 125.821 173.513 125.306C174.528 121.92 176.051 118.608 179.435 116.547C182.312 114.854 185.95 114.486 189.08 113.456C195.003 111.616 200.587 109.04 206.171 106.684C216.323 102.415 231.891 94.3191 243.228 99.7657C251.435 103.667 258.88 109.187 266.326 114.045C276.479 120.743 286.631 127.514 297.038 133.918C306.175 139.585 315.567 145.252 325.804 149.374C329.104 150.699 332.573 151.95 336.211 152.392C343.994 153.202 352.455 151.435 359.985 150.037C376.399 146.945 394.843 143.192 409.141 153.422C416.164 158.427 421.071 165.935 421.832 173.81C422.594 181.465 420.394 189.193 419.463 196.775C417.433 213.409 413.287 230.117 413.625 246.898C413.795 254.995 415.148 263.017 418.194 270.672C421.24 278.327 425.555 285.614 428.685 293.268C431.9 301.07 434.269 309.24 434.439 317.631C434.692 326.684 432.154 335.296 428.093 343.539C424.54 350.752 420.14 357.524 416.502 364.737C413.625 370.331 412.356 376.293 409.818 381.886C405.249 391.749 396.45 400.287 389.005 408.531C381.644 416.774 373.607 425.018 368.023 434.292C365.738 438.119 364.892 441.799 363.792 445.921C362.016 452.766 358.631 459.243 354.401 465.132C349.832 471.388 344.164 477.055 337.48 481.619C332.403 485.078 323.604 490.966 316.667 489.494C311.167 488.316 307.36 483.385 304.568 479.484C301.691 475.362 299.322 471.02 296.784 466.751C291.285 457.698 281.555 449.675 271.91 444.007C259.134 436.573 244.582 433.777 230.199 429.802C223.261 427.888 216.154 425.68 210.824 421.19C206.34 417.437 202.279 413.168 197.71 409.561C196.103 408.31 188.403 405.513 186.711 406.617C186.965 406.47 187.05 406.175 186.796 405.955C175.797 394.031 168.859 379.826 164.714 365.031C161.245 352.813 160.399 340.153 157.014 327.935C153.884 316.748 148.3 305.928 138.147 298.273C127.656 290.398 110.65 288.558 104.135 277.076C99.3975 268.685 92.8828 261.325 86.8758 253.523C83.5762 249.254 80.2765 244.911 77.6537 240.274C75.5385 236.594 73.1696 232.178 73.6772 227.909C74.3541 222.094 81.7994 219.076 87.6373 218.267C94.4058 217.31 101.259 218.267 108.027 218.561C118.942 219.076 129.433 217.015 134.34 207.741C136.878 202.884 137.809 197.511 138.739 192.285C139.924 185.587 141.278 179.036 143.9 172.633C147.539 163.948 152.615 155.778 158.368 148.049C161.076 144.369 163.868 140.836 166.237 136.935C168.521 133.034 170.721 129.06 173.513 125.453C174.02 124.938 173.174 124.57 172.836 125.012Z\",\n    fill: \"url(#paint9_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M181.212 132.371C168.013 142.823 156.592 155.115 151.431 170.203C147.708 181.096 149.062 193.167 144.07 203.766C137.809 217.015 121.903 215.175 108.366 214.291C99.0593 213.703 82.7302 213.85 80.1074 224.228C78.1615 231.883 85.0146 240.715 89.4141 246.75C96.098 255.951 104.051 264.342 110.735 273.542C113.612 277.443 115.388 282.006 119.026 285.466C123.68 290.029 130.279 292.531 136.54 295.034C144.07 297.978 151.177 301.29 156.93 306.663C162.345 311.742 166.067 317.925 168.352 324.475C173.597 338.975 171.821 354.137 173.597 369.079C175.459 384.535 180.704 399.698 192.888 411.474C193.057 411.253 193.311 411.033 193.48 410.812C194.495 411.401 198.049 410.664 199.572 410.664C201.771 410.664 203.548 410.959 205.494 411.548C213.109 413.756 219.539 418.319 227.069 420.748C243.144 425.974 260.996 427.446 275.294 436.352C285.785 442.903 292.046 453.06 295.938 463.512C298.476 470.357 301.522 481.471 309.475 485.077C313.367 486.844 317.513 485.004 321.066 483.458C328.004 480.44 334.096 476.024 339.257 471.019C344.587 465.867 348.986 459.979 352.201 453.649C354.74 448.644 355.332 443.418 357.278 438.266C360.747 428.992 370.053 420.895 377.245 413.609C385.283 405.512 393.659 397.637 400.85 389.025C403.473 385.86 406.096 382.548 407.534 378.794C408.634 375.997 409.226 373.127 410.326 370.404C412.018 366.208 414.218 362.086 416.502 358.112C424.624 343.612 432.154 329.775 429.785 313.214C428.686 305.559 425.894 298.199 422.678 290.986C419.125 283.11 414.556 275.529 412.526 267.138C408.211 249.253 413.118 231.073 415.995 213.335C418.364 198.761 422.086 182.789 412.272 169.688C405.08 160.046 392.897 155.777 380.037 156.071C371.238 156.219 362.777 158.427 354.232 159.972C347.125 161.224 339.003 162.916 331.811 161.003C322.251 158.5 313.452 152.906 305.33 147.975C285.87 136.125 268.018 122.361 248.474 110.585C245.767 108.965 242.89 106.978 239.506 106.463C235.191 105.8 230.622 107.125 226.646 108.524C214.632 112.866 204.479 120.374 192.718 125.084C187.473 127.145 183.158 127.513 180.789 132.739C180.535 133.254 181.466 133.475 181.72 132.96C184.173 127.44 192.211 126.409 197.795 123.76C203.463 121.036 208.878 117.871 214.547 115.001C220.046 112.13 225.8 109.26 232.06 107.788C237.052 106.684 240.859 107.272 245.09 109.628C263.619 120.006 280.201 133.181 298.053 144.516C306.852 150.11 315.905 155.777 325.72 159.825C328.681 161.003 331.727 162.18 335.026 162.475C343.149 163.358 352.032 161.224 359.901 159.752C375.384 156.734 392.812 154.231 405.757 164.389C420.817 176.239 417.941 193.683 415.656 209.36C413.203 225.994 408.465 242.702 410.241 259.557C411.934 276.118 422.763 290.029 427.247 305.927C429.701 314.686 430.124 323.739 427.755 332.498C425.64 340.374 421.409 347.66 417.264 354.947C413.456 361.571 409.649 368.343 407.534 375.556C406.349 379.53 404.573 382.916 401.865 386.375C394.843 395.502 386.044 403.525 377.837 411.769C370.646 418.982 362.693 426.416 357.785 435.101C355.586 439.002 355.247 443.344 353.809 447.466C351.355 454.458 347.294 460.935 342.218 466.75C336.972 472.638 330.627 477.938 323.181 481.691C317.767 484.415 312.013 487.138 307.022 482.575C299.915 476.098 298.053 466.014 294.584 457.844C290.354 447.908 282.147 439.002 271.741 433.555C257.865 426.342 241.452 424.796 226.646 419.865C219.369 417.436 213.024 413.314 205.748 410.812C202.533 409.708 198.726 409.781 195.257 410.076C194.664 410.149 190.773 410.591 192.718 411.695C193.226 411.989 193.649 411.401 193.311 411.033C181.297 399.477 176.136 384.462 174.359 369.226C172.921 356.861 173.936 344.422 171.313 332.204C168.775 320.574 162.937 309.46 152.107 302.026C140.432 294.004 122.749 292.458 115.557 279.945C110.65 271.481 104.051 264.047 97.7056 256.392C91.2755 248.443 83.2379 239.537 80.9535 229.822C79.769 224.669 81.9688 220.695 87.2144 217.898C93.3906 214.586 101.174 214.954 108.112 215.395C119.365 216.131 133.156 218.34 141.278 209.654C149.062 201.337 148.046 188.751 149.992 178.741C153.63 160.414 166.067 145.62 181.72 133.328C182.397 132.592 181.635 132.003 181.212 132.371Z\",\n    fill: \"url(#paint10_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M189.673 139.659C181.297 142.161 173.429 144.664 167.929 151.067C163.36 156.367 160.822 162.917 159.469 169.395C157.1 180.361 159.13 193.316 152.615 203.326C144.409 215.838 126.303 211.495 112.935 210.833C103.544 210.391 88.23 212.084 86.7917 222.462C85.5226 231.148 93.391 240.642 98.552 247.414C105.828 256.835 114.12 265.594 121.396 275.089C124.357 278.99 126.303 283.553 129.687 287.233C134.34 292.312 140.94 295.329 147.708 297.979C155.492 300.997 163.36 303.72 169.706 308.799C175.628 313.509 179.859 319.618 182.397 326.243C193.565 355.537 170.637 391.823 199.403 416.259C199.826 416.627 200.503 416.038 200.08 415.67C198.472 414.051 210.994 411.622 212.517 411.549C220.385 410.886 229.015 414.493 236.714 415.67C253.466 418.173 275.802 420.528 286.632 433.482C292.893 440.99 293.147 451.221 295.008 460.127C295.939 464.617 297.038 469.18 298.984 473.449C300.169 476.025 301.776 479.337 304.822 480.662C308.545 482.281 313.367 479.411 316.498 477.865C323.013 474.627 328.681 470.21 333.419 465.132C337.988 460.274 341.795 454.901 344.503 449.086C346.702 444.376 346.872 439.15 349.325 434.66C353.725 426.417 362.185 419.424 369.292 412.874C377.753 405.072 386.552 397.564 394.42 389.394C397.297 386.45 400.089 383.432 402.289 380.047C404.996 375.851 405.673 370.846 407.704 366.43C414.387 351.93 425.132 338.976 425.471 322.783C425.64 315.202 423.779 307.695 420.987 300.482C417.941 292.532 413.288 285.099 410.411 277.149C404.15 259.853 409.057 241.673 412.526 224.376C415.403 209.876 417.772 193.61 408.803 180.288C402.458 170.867 391.121 166.23 378.768 166.082C370.561 166.009 362.608 167.849 354.655 169.321C347.548 170.646 339.088 172.707 331.896 170.867C322.928 168.658 314.721 163.212 307.276 158.648C288.155 146.798 270.641 133.108 251.774 120.89C245.852 117.063 240.944 113.456 233.245 115.738C222.246 118.976 213.024 126.631 203.887 132.593C199.234 135.537 194.919 138.04 189.673 139.659C189.081 139.806 189.335 140.689 189.927 140.469C200.418 137.304 208.709 130.09 217.593 124.497C224.954 119.86 235.445 112.647 244.498 117.725C252.536 122.215 259.812 127.662 267.257 132.887C276.564 139.364 285.786 145.915 295.262 152.245C304.061 158.06 312.944 163.948 322.674 168.511C325.635 169.91 328.85 171.308 332.235 171.971C338.157 173.148 344.926 171.897 350.763 170.867C366.5 168.143 384.014 163.212 398.566 171.971C414.218 181.318 415.234 200.087 413.034 214.955C410.58 231.736 404.742 248.371 406.604 265.373C408.296 281.271 419.295 294.741 422.933 310.271C424.963 319.103 424.709 328.083 421.579 336.768C418.787 344.643 414.134 351.783 410.073 359.217C408.465 362.235 406.858 365.252 405.588 368.344C404.404 371.214 403.812 374.158 402.627 377.029C401.104 380.635 398.143 383.8 395.436 386.744C387.99 394.841 379.445 402.127 371.154 409.635C363.793 416.333 356.009 423.104 350.256 430.98C348.141 433.85 347.21 436.5 346.449 439.812C344.926 446.731 341.457 453.282 337.057 459.096C332.319 465.353 326.228 471.094 318.951 475.289C314.721 477.718 307.445 482.502 303.13 478.233C299.915 475.068 298.561 470.21 297.462 466.236C296.277 461.967 295.431 457.698 294.754 453.355C293.147 444.155 291.116 434.586 282.486 428.33C269.457 418.909 251.689 416.922 235.53 414.493C228.169 413.389 220.47 410.077 212.94 410.518C209.302 410.665 205.241 411.622 201.941 412.8C200.333 413.389 197.795 414.493 199.403 416.186C199.657 415.965 199.826 415.818 200.08 415.597C174.19 393.59 190.942 361.425 185.697 334.413C183.412 322.71 177.067 311.816 165.729 304.898C152.785 297.022 135.017 295.55 127.149 282.228C122.157 273.69 115.304 266.183 108.789 258.528C101.513 249.916 93.391 240.937 89.2453 230.779C87.7224 227.099 86.6225 222.757 89.0761 219.15C93.3064 212.968 102.105 211.569 109.635 211.643C121.903 211.79 136.879 216.28 147.878 209.435C158.115 202.958 158.115 189.856 159.046 179.993C159.807 172.412 160.991 164.684 164.714 157.692C166.745 153.791 169.537 150.184 173.344 147.461C178.167 143.928 184.174 142.309 190.096 140.542C190.604 140.321 190.35 139.512 189.673 139.659Z\",\n    fill: \"url(#paint11_linear_1386_19896)\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.3\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1106.14 277.441C1094.38 279.06 1083.3 283.109 1075.01 290.763C1067.31 297.829 1062.66 306.956 1059.61 316.304C1055.3 329.847 1054.11 343.978 1054.45 357.963C1054.96 374.744 1057.07 391.673 1054.28 408.381C1049.03 439.957 1030.84 469.545 1013.25 497.073C1009.19 503.476 1004.36 509.659 997.763 514.37C989.98 519.963 980.588 521.951 970.774 522.981C966.459 523.423 960.537 523.938 958.337 527.765C955.968 531.887 959.775 537.849 962.229 541.456C968.913 551.318 980.673 556.986 992.179 561.77C1005.29 567.143 1018.32 572.442 1030.34 579.508C1056.65 595.039 1078.14 616.972 1086.77 643.911C1091.76 659.515 1093.54 677.18 1089.22 693.078C1085.42 707.136 1075.94 719.354 1071.12 733.118C1065.36 749.458 1081.69 759.174 1097.09 764.62C1116.3 771.318 1137.03 773.821 1157.08 777.501C1194.64 784.419 1232.29 792.074 1268.93 802.158C1285.51 806.721 1302.6 811.358 1320.2 810.917C1335.09 810.549 1348.96 805.985 1360.89 798.33C1383.06 784.272 1400.4 761.234 1403.87 737.313C1406.33 720.753 1403.03 704.118 1403.45 687.484C1403.79 671.071 1409.63 656.424 1417.83 641.85C1425.19 628.602 1433.57 615.5 1437.55 601.074C1441.35 587.089 1440.51 572.59 1436.53 558.752C1432.13 543.369 1424.09 529.237 1417.41 514.59C1410.47 499.355 1407.6 483.015 1407.09 466.675C1406.58 450.776 1408.1 434.952 1409.46 419.127C1410.13 411.252 1410.81 403.376 1411.15 395.501C1411.49 387.551 1411.07 379.602 1411.15 371.653C1411.23 365.986 1413.6 360.907 1416.48 355.902C1418.17 352.958 1420.37 349.646 1420.2 346.26C1420.03 342.727 1416.99 340.004 1413.94 338.017C1408.19 334.189 1401.17 331.834 1394.06 330.656C1361.4 325.21 1330.01 343.537 1297.52 337.354C1284.41 334.852 1271.89 330.067 1259.87 324.989C1247.18 319.689 1234.83 313.728 1222.65 307.618C1212.33 302.54 1202.17 297.167 1191.43 292.824C1177.89 287.304 1163.59 282.888 1149.04 280.017C1135.16 277.073 1120.53 275.675 1106.14 277.441C1105.55 277.515 1105.81 278.324 1106.4 278.251C1136.77 274.497 1169.35 283.771 1196.25 295.548C1218.67 305.337 1239.65 317.334 1262.33 326.682C1273.41 331.245 1285 335.588 1297.02 337.869C1310.72 340.519 1324.68 338.605 1338.22 336.103C1354.89 333.012 1371.72 328.963 1388.9 330.583C1399.05 331.539 1423.67 337.133 1418.76 349.867C1417.24 353.768 1414.53 357.227 1412.84 361.128C1410.47 366.427 1410.47 371.506 1410.64 377.1C1411.07 392.63 1409.63 408.16 1408.36 423.617C1405.74 453.647 1403.7 484.634 1416.23 513.339C1422.4 527.545 1430.27 541.087 1434.92 555.735C1439.75 570.897 1441.02 586.648 1436.45 602.031C1432.3 616.31 1423.84 629.19 1416.56 642.365C1409.54 655.172 1403.96 668.2 1402.94 682.479C1401.84 698.451 1404.89 714.349 1403.87 730.247C1403.03 743.717 1398.37 756.303 1390.59 767.932C1374.68 791.78 1347.53 810.99 1314.53 809.812C1297.02 809.15 1280.26 804.071 1263.68 799.582C1246.08 794.797 1228.06 790.823 1210.13 786.996C1182.63 781.107 1154.88 776.397 1127.21 771.171C1117.31 769.257 1107.33 767.049 1097.85 763.737C1089.22 760.719 1079.66 756.597 1074.33 749.679C1067.39 740.699 1072.72 730.616 1077.21 721.783C1083.47 709.271 1090.49 697.421 1092.01 683.657C1095.06 656.424 1085.92 628.896 1066.63 607.33C1049.03 587.605 1024.92 573.694 999.032 563.389C987.357 558.826 974.666 554.042 966.374 544.988C961.721 539.91 953.683 528.133 964.259 524.968C971.197 522.908 978.812 523.349 985.834 521.215C1000.13 516.872 1008.68 506.273 1015.7 495.159C1023.99 481.911 1032.11 468.588 1039.05 454.677C1045.82 440.987 1051.66 426.782 1054.7 412.061C1057.92 396.457 1056.56 380.633 1055.8 364.882C1055.13 350.161 1055.46 335.514 1059.27 321.088C1061.98 310.71 1066.46 300.258 1074.76 292.162C1083.05 284.139 1094.3 279.87 1106.4 278.177C1106.99 278.177 1106.74 277.368 1106.14 277.441Z\",\n    fill: \"url(#paint12_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1063.93 341.476C1061.47 357.375 1063.33 373.347 1063.25 389.318C1063.16 405.658 1059.44 421.115 1053.01 436.424C1046.84 451.219 1038.71 465.35 1030.51 479.335C1026.78 485.665 1023.15 492.142 1019.17 498.398C1015.36 504.36 1010.79 510.175 1004.11 513.855C996.917 517.756 988.372 518.05 980.334 519.743C975.173 520.774 971.197 522.908 969.843 527.619C968.236 533.139 971.958 536.525 975.258 540.941C979.065 546.167 983.719 551.024 988.88 555.293C999.032 563.684 1011.22 569.499 1023.06 575.829C1035.92 582.747 1048.1 590.77 1058.85 600.118C1082.29 620.359 1097.51 646.488 1098.44 675.487C1098.7 683.216 1097.77 690.87 1095.15 698.304C1092.78 705.002 1089.48 711.406 1086.6 717.883C1083.13 725.685 1078.65 734.591 1083.47 742.613C1087.28 748.943 1094.98 752.991 1102.08 756.009C1111.14 759.763 1120.78 762.192 1130.43 764.253C1138.63 766.019 1146.84 767.344 1155.05 768.89C1172.64 772.275 1190.16 776.029 1207.59 780.077C1224.76 784.052 1242.11 787.879 1258.86 793.031C1274.09 797.668 1289.23 803.336 1305.31 805.176C1320.11 806.869 1334.33 804.366 1347.19 797.668C1358.78 791.633 1368.68 783.169 1376.63 773.674C1384.67 764.032 1390.93 753.065 1393.97 741.436C1397.53 727.525 1397.19 712.804 1397.95 698.672C1398.8 683.289 1400.57 668.127 1407.17 653.701C1413.18 640.526 1421.64 628.308 1427.73 615.059C1433.91 601.663 1436.45 587.605 1434.42 573.179C1432.47 559.194 1426.8 545.799 1420.54 532.844C1417.16 525.705 1413.35 518.786 1410.64 511.426C1407.85 503.918 1406.07 496.264 1404.97 488.462C1402.86 473.373 1403.45 458.064 1404.64 442.975C1405.82 427.666 1407.68 412.356 1408.02 396.973C1408.19 390.054 1407 382.694 1409.03 375.923C1410.39 371.506 1412.93 367.605 1414.79 363.336C1418.6 354.651 1411.83 348.984 1403.28 345.009C1390.93 339.268 1376.29 338.827 1362.76 340.446C1345.24 342.507 1328.24 347.953 1310.38 348.174C1298.96 348.321 1287.96 345.009 1277.47 341.182C1253.7 332.497 1231.7 320.499 1209.45 309.312C1186.27 297.83 1160.29 290.617 1133.64 289.145C1120.87 288.409 1107.07 288.924 1095.31 293.634C1085.75 297.462 1078.39 304.086 1073.57 312.182C1068.16 321.162 1065.62 331.319 1064.01 341.329C1063.93 341.844 1064.86 342.065 1064.94 341.55C1068.33 321.088 1076.62 299.302 1101.58 292.457C1115.28 288.703 1130.51 289.292 1144.47 290.911C1159.02 292.678 1173.49 295.99 1187.2 300.7C1208.86 308.208 1228.32 320.426 1248.71 329.994C1268.25 339.195 1290.42 350.014 1313.34 348.91C1343.72 347.512 1378.83 330.73 1407.09 348.101C1412.17 351.192 1416.23 355.167 1414.53 360.834C1413.35 364.661 1410.9 368.121 1409.29 371.801C1407 377.027 1406.75 381.884 1406.92 387.405C1407.09 394.839 1406.83 402.346 1406.33 409.78C1404.47 438.559 1399.22 467.779 1405.23 496.485C1411.23 525.19 1432.3 549.7 1433.99 579.435C1434.84 594.745 1430.1 609.024 1422.83 622.714C1416.4 634.858 1408.61 646.488 1403.79 659.221C1398.63 672.764 1397.61 687.19 1396.85 701.322C1396.17 715.307 1396.51 729.954 1392.37 743.644C1385.34 766.829 1365.63 789.498 1340.5 799.803C1308.61 812.831 1275.78 796.049 1245.24 788.247C1214.19 780.298 1182.71 772.938 1150.99 767.197C1132.8 763.885 1113.34 761.014 1097.09 752.623C1089.82 748.87 1082.62 743.202 1082.29 735.327C1082.03 729.88 1084.82 724.139 1087.11 719.134C1089.9 712.804 1093.11 706.621 1095.57 700.144C1104.96 675.193 1097.43 645.972 1082.12 623.965C1067.65 603.283 1046.16 586.869 1022.55 574.357C1010.37 567.88 998.017 561.844 987.864 553.012C982.365 548.227 978.135 542.854 973.989 537.187C971.705 534.022 969.759 531.667 970.943 527.692C972.297 523.276 975.935 521.362 980.757 520.406C987.611 519.007 994.887 518.639 1001.4 515.989C1007.07 513.708 1011.55 509.954 1015.19 505.611C1019.51 500.533 1022.55 494.718 1025.85 489.124C1029.74 482.5 1033.64 475.949 1037.44 469.251C1044.72 456.518 1051.49 443.564 1056.56 430.094C1061.98 415.742 1064.43 401.389 1064.35 386.227C1064.18 371.212 1062.74 356.123 1065.03 341.182C1065.03 340.888 1064.01 340.888 1063.93 341.476Z\",\n    fill: \"url(#paint13_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1072.22 348.763C1069.76 363.778 1071.29 378.941 1070.69 394.103C1070.02 409.927 1065.28 424.722 1058.51 439.295C1052 453.28 1044.04 466.602 1036.51 480.145C1030.76 490.376 1026.11 504.434 1014.35 510.837C1007.75 514.37 1000.05 514.517 992.603 515.695C987.949 516.431 982.196 517.388 980.42 521.731C978.812 525.632 979.573 532.035 981.181 535.862C981.942 537.629 983.381 538.88 984.904 540.058C988.203 542.56 989.811 546.02 992.18 549.184C999.371 558.679 1009.27 566.187 1019.76 572.885C1031.44 580.392 1043.28 587.458 1054.11 595.922C1065.28 604.681 1075.6 614.397 1083.98 625.29C1088.21 630.737 1092.02 636.478 1095.23 642.44C1098.87 649.285 1101.15 656.498 1102.93 663.858C1104.71 671.292 1105.81 679.02 1105.13 686.602C1104.45 694.109 1101.74 701.249 1098.95 708.388C1095.74 716.558 1089.56 727.083 1093.96 735.768C1097.09 742.025 1104.28 746.073 1110.97 749.017C1119.77 752.844 1129.33 755.273 1138.8 757.408C1147.01 759.248 1155.39 760.646 1163.68 762.339C1180.6 765.946 1197.43 769.92 1214.19 774.189C1229.92 778.237 1245.91 782.138 1261.06 787.511C1274.93 792.516 1288.81 798.478 1303.87 800.171C1331.37 803.262 1355.23 786.775 1369.95 768.154C1377.39 758.733 1383.23 747.986 1385.6 736.725C1388.48 723.182 1389.74 709.271 1392.03 695.655C1394.31 681.817 1396.43 667.538 1402.18 654.363C1407.77 641.483 1416.06 629.559 1422.06 616.826C1428.16 604.019 1431.03 590.549 1429.43 576.712C1427.82 563.169 1422.57 550.289 1416.65 537.85C1413.35 530.931 1409.63 524.233 1406.92 517.094C1404.04 509.66 1402.1 502.005 1401 494.277C1398.88 479.703 1399.47 464.983 1400.74 450.336C1401.93 435.762 1403.79 421.262 1404.21 406.615C1404.38 399.844 1403.45 392.925 1405.57 386.301C1406.92 382.105 1409.29 378.278 1410.73 374.083C1413.86 365.177 1406.16 359.215 1397.78 355.24C1385.94 349.72 1371.89 349.131 1358.78 350.751C1341.35 352.885 1324.43 358.405 1306.58 358.184C1296 358.037 1285.59 354.431 1276.03 350.677C1253.95 342.065 1233.48 330.583 1212.66 319.837C1203.61 315.127 1194.56 310.931 1184.41 308.061C1171.21 304.381 1157.33 302.246 1143.46 301.436C1120.61 300.112 1094.89 301.878 1082.2 320.868C1076.45 329.332 1073.99 339.121 1072.22 348.763C1072.13 349.278 1073.06 349.499 1073.15 348.984C1074.92 338.9 1077.63 328.522 1083.98 319.837C1090.24 311.226 1099.97 305.779 1111.39 303.645C1125.1 301.142 1139.73 301.657 1153.52 303.129C1167.23 304.601 1181.02 307.325 1193.8 312.035C1202.85 315.347 1211.14 320.132 1219.52 324.548C1229.75 329.921 1239.99 335.367 1250.48 340.446C1260.47 345.304 1270.62 349.941 1281.28 353.695C1290.08 356.786 1299.13 359.288 1308.78 359.068C1338.73 358.552 1372.32 341.477 1400.41 357.816C1405.48 360.761 1411.07 364.956 1410.39 370.771C1409.88 374.966 1407.26 378.867 1405.65 382.694C1403.62 387.478 1403.03 392.115 1403.11 397.194C1403.2 404.407 1402.94 411.547 1402.35 418.76C1400.41 446.287 1395.33 474.183 1401.17 501.637C1404.21 515.842 1411.15 528.428 1417.33 541.751C1423.33 554.778 1428.33 568.321 1428.83 582.453C1429.34 597.174 1424.43 610.79 1417.33 623.965C1411.07 635.521 1403.79 646.709 1399.22 658.853C1394.48 671.66 1392.62 685.424 1390.51 698.672C1388.39 711.7 1387.38 725.096 1384.25 737.976C1378.66 760.867 1360.05 783.095 1336.27 794.062C1321.98 800.686 1307 800.981 1291.6 797.006C1277.47 793.4 1264.36 787.217 1250.48 783.169C1220.79 774.41 1190.24 766.682 1159.7 760.646C1141.93 757.187 1122.81 754.39 1106.99 746.146C1099.97 742.466 1093.2 736.872 1093.37 729.218C1093.54 723.109 1096.58 716.779 1098.87 711.038C1101.32 704.781 1103.94 698.525 1105.3 691.975C1108.01 678.579 1104.79 664.889 1100.48 652.008C1096.58 640.232 1088.88 629.265 1080.51 619.549C1064.18 600.486 1043.03 586.648 1021.2 572.737C1009.78 565.451 998.948 557.354 991.588 546.682C989.895 544.327 988.88 541.824 986.511 539.984C983.465 537.702 981.942 535.568 981.35 532.109C980.843 529.312 980.335 526.368 980.927 523.497C981.858 518.934 986.342 517.682 990.911 516.726C997.595 515.401 1004.62 515.474 1010.96 513.193C1015.78 511.426 1019.68 508.482 1022.81 504.875C1026.45 500.68 1028.98 495.822 1031.44 491.112C1034.74 484.929 1038.21 478.746 1041.76 472.637C1055.89 447.759 1070.53 422.293 1071.63 394.029C1072.22 379.014 1070.61 363.925 1073.15 348.91C1073.32 348.469 1072.3 348.248 1072.22 348.763Z\",\n    fill: \"url(#paint14_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1080.51 356.197C1077.97 370.476 1079.24 384.903 1077.97 399.255C1076.62 414.491 1070.61 428.697 1063.59 442.534C1056.99 455.488 1049.46 468.074 1042.77 480.955C1037.78 490.67 1034.4 503.404 1022.64 508.629C1016.21 511.5 1008.85 511.206 1001.91 512.089C997.679 512.604 991.333 513.487 988.964 517.094C986.68 520.48 988.288 525.337 989.472 528.797C990.826 532.992 991.587 538.365 995.31 541.604C997.087 543.076 999.286 544.033 1001.15 545.431C1004.19 547.786 1006.14 551.834 1008.51 554.705C1012.74 559.784 1017.31 564.494 1022.3 568.984C1032.03 577.816 1042.94 585.471 1053.27 593.788C1063.93 602.4 1074.08 611.6 1082.96 621.684C1092.27 632.135 1101.66 644.133 1105.97 656.866C1108.43 664.006 1110.97 671.072 1111.9 678.505C1112.91 686.013 1111.73 693.3 1109.61 700.586C1107.75 707.137 1105.3 713.541 1104.03 720.238C1103.44 723.551 1103.27 726.642 1104.79 729.733C1107.67 735.695 1114.52 739.596 1120.87 742.393C1129.58 746.22 1139.06 748.649 1148.45 750.71C1156.99 752.624 1165.62 754.169 1174.08 756.157C1190.16 759.984 1206.15 764.179 1221.97 768.743C1236.95 773.085 1251.84 777.428 1265.97 783.537C1277.81 788.689 1290.16 794.357 1303.62 795.387C1328.91 797.301 1351.33 778.826 1363.86 761.53C1370.71 752.109 1375.36 741.804 1377.31 730.764C1379.51 717.883 1382.89 705.223 1386.36 692.564C1389.74 680.125 1392.28 667.023 1397.19 654.952C1402.52 641.998 1410.81 630.148 1416.9 617.415C1422.66 605.418 1425.62 592.905 1424.35 579.951C1423.08 566.923 1418.26 554.484 1412.59 542.487C1406.24 528.944 1399.64 516.137 1397.19 501.49C1394.82 486.917 1395.41 472.122 1396.77 457.475C1398.04 443.27 1399.9 429.138 1400.32 414.933C1400.49 408.603 1399.98 402.347 1402.1 396.164C1403.54 391.969 1405.9 387.994 1406.75 383.651C1408.53 374.598 1398.8 368.121 1390.42 364.588C1379 359.73 1365.72 359.436 1353.28 361.055C1336.78 363.337 1320.37 368.636 1303.45 367.9C1293.72 367.459 1284.07 363.779 1275.36 360.246C1254.54 351.708 1235.25 340.667 1215.71 330.142C1207.76 325.873 1199.89 321.53 1191 318.881C1178.91 315.274 1165.96 313.802 1153.27 313.213C1131.86 312.256 1104.11 312.036 1090.92 329.406C1084.91 337.429 1082.37 346.997 1080.51 356.197C1080.42 356.713 1081.35 356.934 1081.44 356.418C1083.3 346.85 1085.92 336.913 1092.52 328.891C1099.88 320.058 1110.88 316.378 1122.9 315.053C1136.01 313.581 1149.38 313.581 1162.49 314.759C1175.01 315.863 1188.13 317.924 1199.46 322.929C1207.42 326.388 1214.86 330.804 1222.39 334.853C1231.95 340.078 1241.6 345.304 1251.33 350.236C1260.89 355.093 1270.7 359.73 1280.94 363.484C1288.3 366.207 1296.09 368.71 1304.12 368.931C1333.74 369.814 1365.04 352.297 1393.3 367.017C1398.8 369.888 1405.48 374.377 1405.99 380.487C1406.33 384.535 1404.13 388.436 1402.6 392.189C1398.04 403.23 1399.56 415.006 1398.71 426.562C1396.68 453.354 1391.52 480.439 1397.27 507.157C1400.24 520.848 1407.17 533.066 1413.01 545.873C1418.6 558.238 1423.16 571.118 1423.59 584.514C1424.01 598.72 1419.02 611.895 1412.17 624.628C1406.07 635.816 1399.05 646.635 1394.82 658.485C1390.59 670.409 1387.97 682.922 1384.67 694.993C1381.37 707.211 1378.32 719.429 1376.12 731.794C1372.15 754.096 1355.23 775.735 1333.14 787.585C1320.54 794.357 1307.08 796.491 1292.79 792.885C1279.33 789.499 1267.49 782.948 1254.71 778.164C1241.09 773.085 1226.71 769.258 1212.58 765.357C1198.37 761.383 1183.98 757.555 1169.51 754.39C1152.09 750.563 1133.3 748.134 1117.57 739.964C1110.63 736.357 1103.94 730.984 1104.54 723.33C1105.47 710.302 1113.08 698.378 1113.25 685.13C1113.34 678.653 1111.81 672.249 1109.95 665.993C1108.17 660.178 1106.48 654.364 1103.52 648.917C1097.51 637.95 1089.82 627.719 1081.02 618.224C1072.22 608.656 1062.32 599.897 1051.91 591.58C1042.27 583.852 1032.03 576.639 1022.89 568.322C1017.48 563.39 1012.48 558.164 1008 552.644C1006.14 550.362 1004.7 547.345 1002.59 545.357C1000.64 543.517 997.594 542.56 995.564 540.72C993.279 538.586 992.856 535.715 991.926 533.066C990.995 530.49 990.064 527.913 989.387 525.19C988.795 522.688 988.203 519.523 989.98 517.241C992.179 514.444 997.34 513.634 1000.89 513.119C1007.32 512.162 1014.09 512.457 1020.27 510.47C1024.84 508.997 1028.64 506.421 1031.61 503.109C1034.82 499.503 1036.94 495.234 1038.97 491.038C1041.67 485.297 1044.47 479.703 1047.51 474.11C1060.46 450.189 1076.53 426.12 1078.99 399.255C1080.25 384.976 1078.99 370.624 1081.52 356.418C1081.61 355.903 1080.68 355.682 1080.51 356.197Z\",\n    fill: \"url(#paint15_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1088.8 363.633C1085.92 377.912 1087.28 392.485 1084.57 406.764C1081.86 421.117 1074.5 434.733 1067.39 447.761C1060.96 459.537 1053.94 471.167 1048.95 483.385C1044.97 493.1 1041.08 504.214 1028.22 507.232C1022.05 508.704 1015.62 508.263 1009.35 508.999C1005.12 509.514 999.287 510.544 996.664 513.783C994.464 516.506 995.395 520.26 996.41 523.204C997.933 527.915 1000.56 532.257 1002.5 536.747C1004.19 540.648 1005.46 543.371 1009.61 545.8C1015.45 549.26 1020.1 553.087 1024.67 557.798C1033.98 567.292 1041.67 577.891 1050.9 587.46C1059.78 596.734 1069.59 605.272 1078.48 614.619C1088.29 624.997 1097.43 635.964 1105.04 647.741C1106.74 650.39 1108.51 653.04 1109.95 655.837C1111.73 659.149 1112.83 662.756 1114.18 666.215C1116.8 672.913 1119.6 679.758 1119.43 686.971C1119.34 694.331 1117.23 701.544 1115.87 708.831C1115.03 713.174 1113.76 718.031 1115.03 722.3C1116.89 728.483 1123.49 732.531 1129.58 735.328C1137.96 739.156 1147.18 741.584 1156.23 743.719C1165.12 745.78 1174 747.473 1182.8 749.754C1197.94 753.729 1213 758.145 1227.81 763.003C1241.18 767.419 1254.04 771.983 1266.3 778.312C1276.46 783.538 1287.29 789.353 1299.3 790.383C1311.06 791.414 1322.23 786.703 1331.45 780.741C1341.43 774.338 1349.81 766.094 1356.24 756.894C1362.76 747.546 1366.39 737.831 1368.59 727.158C1370.88 715.603 1375.28 704.415 1379.42 693.374C1383.65 682.113 1387.29 670.778 1390.93 659.37C1394.99 646.71 1402.69 635.302 1409.04 623.452C1415.13 612.043 1419.53 600.046 1419.53 587.312C1419.44 574.358 1415.3 561.846 1409.97 549.848C1404.21 536.968 1397.11 524.823 1394.23 511.133C1391.27 497.149 1391.61 482.87 1392.71 468.811C1393.81 454.974 1395.84 441.137 1396.6 427.226C1396.94 420.675 1396.43 414.124 1398.37 407.721C1399.64 403.525 1401.76 399.477 1402.52 395.135C1404.04 386.082 1395.33 379.31 1386.95 375.335C1375.95 370.183 1363.01 369.521 1350.91 371.066C1334.75 373.127 1318.84 378.5 1302.26 377.764C1293.38 377.396 1284.75 373.937 1276.88 370.698C1256.74 362.308 1238.13 351.341 1219.35 340.816C1212.49 336.988 1205.56 332.646 1198.03 329.849C1187.11 325.727 1174.68 324.77 1162.92 324.476C1150.06 324.181 1137.11 325.065 1124.42 326.831C1114.61 328.229 1105.72 331.468 1099.55 338.534C1093.28 345.894 1090.66 354.947 1088.8 363.633C1088.72 364.148 1089.65 364.369 1089.73 363.853C1091.68 354.506 1094.55 344.496 1102 337.283C1110.21 329.334 1121.88 327.861 1133.47 326.757C1156.32 324.476 1183.39 323.298 1203.95 333.75C1220.96 342.361 1237.03 352.298 1253.95 361.056C1263 365.767 1272.23 370.257 1281.96 373.863C1288.81 376.44 1296 378.721 1303.53 378.795C1332.04 379.163 1362.92 362.381 1389.58 377.985C1395.08 381.224 1401.17 385.934 1401.59 392.117C1401.84 396.46 1399.64 400.802 1398.21 404.85C1394.31 415.891 1395.58 427.962 1394.57 439.444C1392.2 465.278 1387.38 491.776 1394.57 517.389C1398.21 530.27 1405.57 542.046 1410.73 554.485C1415.8 566.704 1419.27 579.51 1418.26 592.612C1416.23 618.373 1395.41 638.614 1388.81 663.271C1382.89 685.278 1371.47 706.108 1367.32 728.483C1363.26 750.417 1347.7 771.394 1325.87 783.097C1314.19 789.353 1302.01 791.487 1288.89 787.513C1276.88 783.833 1266.64 777.061 1255.31 772.056C1243.29 766.757 1230.18 762.929 1217.57 758.955C1204.37 754.833 1191 750.858 1177.47 747.62C1160.21 743.498 1140.92 741.216 1125.69 732.458C1122.3 730.47 1119 728.042 1117.14 724.803C1114.44 720.166 1115.79 714.719 1116.72 709.788C1117.82 703.753 1119.43 697.864 1120.1 691.755C1120.87 685.425 1119.94 679.537 1117.9 673.428C1116.04 667.908 1114.27 661.872 1111.47 656.646C1108.43 650.758 1104.54 645.091 1100.56 639.644C1093.2 629.487 1084.82 619.992 1076.02 610.865C1067.56 602.18 1058.17 594.084 1049.97 585.251C1041.17 575.757 1033.64 565.526 1024.41 556.325C1020.44 552.351 1016.55 548.744 1011.39 545.947C1008.25 544.181 1005.72 542.414 1004.45 539.25C1003.69 537.409 1002.92 535.496 1002.08 533.656C999.964 529.166 997.256 524.603 996.495 519.745C995.479 513.194 1001.99 510.912 1008.42 509.956C1019.25 508.41 1030.93 510.176 1039.22 502.595C1045.99 496.413 1048.1 487.433 1051.66 479.705C1063.08 454.827 1081.95 431.2 1086.09 404.188C1088.12 390.792 1087.19 377.249 1089.82 363.853C1089.9 363.338 1088.97 363.117 1088.8 363.633Z\",\n    fill: \"url(#paint16_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1097.18 371.065C1094.13 384.755 1094.98 398.887 1090.92 412.356C1086.85 425.899 1079.07 438.559 1072.13 451.145C1066.21 461.891 1060.8 472.711 1056.73 484.119C1053.01 494.571 1047.6 503.698 1033.89 505.023C1025.09 505.906 1010.2 503.477 1004.02 510.764C999.456 516.063 1005.46 524.896 1008.25 529.753C1010.54 533.728 1012.99 537.555 1014.77 541.677C1016.46 545.504 1019.25 547.786 1023.23 549.847C1035.58 556.25 1044.21 566.113 1051.91 576.565C1058.85 585.913 1065.36 595.334 1072.98 604.313C1081.44 614.323 1089.98 624.26 1098.02 634.564C1102.42 640.232 1106.65 645.973 1110.63 651.861C1112.49 654.584 1114.27 657.308 1115.96 660.031C1117.82 662.975 1118.75 666.213 1120.27 669.378C1122.98 675.119 1126.28 680.713 1126.7 686.97C1127.13 693.962 1125.86 701.028 1125.6 708.02C1125.43 711.995 1125.1 716.116 1127.3 719.723C1128.9 722.225 1131.36 724.286 1133.98 725.979C1141.34 730.69 1150.48 733.266 1159.11 735.548C1167.91 737.829 1176.96 739.522 1185.76 741.877C1200.14 745.705 1214.36 750.489 1228.15 755.641C1239.91 760.057 1251.67 764.4 1262.16 770.877C1271.38 776.544 1280.94 783.242 1292.28 785.23C1303.11 787.143 1313.43 782.948 1322.14 777.722C1331.96 771.834 1340.25 763.958 1346.68 755.2C1353.28 746.22 1357.34 736.652 1359.46 726.2C1361.57 715.748 1366.48 705.738 1371.13 695.949C1375.87 686.013 1381.11 676.076 1384.58 665.698C1386.36 660.325 1387.71 654.879 1390.08 649.579C1392.79 643.47 1396.17 637.655 1399.56 631.841C1405.74 621.021 1411.74 609.981 1413.6 597.836C1415.47 585.471 1413.01 573.106 1408.61 561.329C1403.7 548.449 1395.92 536.378 1391.94 523.276C1387.88 509.88 1387.46 495.969 1388.39 482.206C1389.24 468.736 1391.35 455.267 1392.45 441.798C1393.04 435.1 1392.54 428.181 1393.98 421.63C1394.99 416.773 1397.19 412.136 1398.04 407.278C1399.47 398.298 1392.37 391.306 1384.08 386.743C1373.67 381.001 1360.98 379.897 1349.05 381.222C1333.57 382.915 1318.76 387.847 1303.02 387.847C1294.48 387.847 1286.36 384.829 1278.83 381.664C1259.54 373.568 1241.77 362.821 1223.92 352.517C1216.89 348.469 1209.87 344.274 1202.51 340.667C1193.63 336.324 1183.31 335.368 1173.32 335.294C1160.97 335.22 1148.62 336.545 1136.43 338.312C1126.2 339.71 1115.79 340.888 1108.43 347.88C1101.66 354.21 1099.12 362.895 1097.18 371.065C1097.01 371.58 1098.02 371.801 1098.11 371.286C1100.22 362.38 1103.18 352.591 1111.39 346.408C1120.02 339.931 1133.13 339.416 1143.96 338.091C1156.4 336.545 1169.18 335.441 1181.7 336.472C1191.51 337.208 1199.63 340.005 1207.93 344.494C1224.76 353.621 1240.84 363.705 1257.84 372.611C1271.89 379.971 1288.22 389.171 1305.22 388.656C1332.47 387.847 1362.92 372.537 1387.38 389.981C1392.37 393.588 1397.02 398.298 1397.11 404.186C1397.19 408.823 1395.08 413.387 1393.81 417.803C1392.28 423.102 1392.11 428.255 1391.86 433.701C1391.52 440.252 1390.93 446.729 1390.17 453.28C1387.38 478.599 1383.4 504.728 1392.88 529.385C1397.53 541.53 1404.64 552.865 1408.78 565.23C1413.1 577.963 1414.62 591.286 1411.07 604.387C1407.68 616.752 1400.41 627.793 1394.14 639.201C1391.52 644.059 1388.98 648.917 1387.04 654.069C1385.09 659.074 1383.99 664.226 1382.13 669.231C1374.68 688.662 1361.82 706.916 1358.1 727.23C1354.13 748.428 1337.97 769.111 1316.39 779.783C1310.89 782.506 1304.8 784.788 1298.37 784.862C1292.19 784.935 1286.19 783.022 1280.77 780.593C1270.87 776.103 1262.67 769.405 1252.94 764.694C1241.51 759.174 1228.99 754.905 1216.89 750.783C1205.22 746.735 1193.46 742.834 1181.36 739.964C1172.31 737.829 1163.25 735.989 1154.37 733.413C1145.99 730.984 1136.43 728.04 1130.34 722.225C1126.87 718.84 1126.28 715.307 1126.28 710.891C1126.28 704.045 1127.3 697.274 1127.47 690.429C1127.63 684.541 1125.94 679.388 1123.32 673.942C1121.12 669.452 1119.6 664.521 1116.97 660.252C1103.44 638.465 1086.18 618.739 1069.34 598.867C1055.3 582.306 1045.74 560.446 1024.5 549.7C1021.96 548.449 1019.51 547.124 1017.73 545.136C1016.12 543.37 1015.53 541.162 1014.52 539.175C1012.57 535.274 1010.12 531.593 1008 527.766C1005.89 523.939 1003.26 519.523 1003.35 515.18C1003.43 509.292 1011.3 507.378 1016.88 506.789C1026.95 505.685 1038.12 507.672 1046.67 501.784C1054.03 496.632 1056.31 488.02 1059.02 480.513C1067.65 456.224 1086.26 434.953 1092.52 410.075C1095.74 397.341 1095.15 384.24 1098.02 371.507C1098.19 370.771 1097.26 370.55 1097.18 371.065Z\",\n    fill: \"url(#paint17_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1105.47 378.499C1102.08 391.6 1102.08 405.217 1096.5 417.803C1091 430.315 1083.38 442.165 1077.04 454.384C1074.25 459.757 1071.54 465.203 1069.42 470.797C1067.82 475.066 1066.72 479.556 1065.28 483.898C1063.76 488.462 1061.81 493.099 1058 496.558C1053.52 500.606 1047.43 502.005 1041.08 502.226C1031.78 502.594 1018.66 500.533 1011.64 507.378C1006.99 511.941 1011.22 519.375 1013.75 523.939C1016.04 528.06 1018.75 531.961 1021.37 535.862C1023.65 539.322 1025.26 543.002 1027.38 546.461C1029.58 549.994 1033.47 552.129 1037.44 553.969C1043.28 556.692 1048.19 559.93 1052.76 564.126C1061.56 572.296 1067.48 582.306 1073.15 592.242C1078.9 602.399 1085.42 612.189 1092.27 621.904C1100.31 633.313 1108.51 644.648 1116.38 656.056C1118.33 658.927 1120.27 661.724 1122.22 664.594C1123.91 667.097 1124.76 669.746 1126.28 672.322C1129.5 677.769 1133.39 682.332 1134.06 688.662C1134.74 695.434 1134.91 702.205 1136.18 708.903C1136.77 711.994 1138.04 714.571 1140.58 716.852C1146.42 722.152 1155.22 724.875 1163 727.157C1172.31 729.88 1181.95 731.794 1191.34 734.296C1204.46 737.756 1217.15 742.761 1229.42 747.986C1240.25 752.623 1250.99 757.187 1260.21 764.105C1267.57 769.626 1275.02 776.029 1284.24 779.12C1294.22 782.433 1303.7 779.268 1312.33 774.557C1322.23 769.11 1330.6 761.603 1337.12 753.212C1343.72 744.674 1348.37 735.179 1350.32 725.096C1352.09 715.601 1357.26 706.695 1362.16 698.157C1367.32 689.104 1372.99 680.272 1377.48 670.924C1382.21 661.208 1384.41 650.83 1389.49 641.188C1395.24 630.369 1402.27 619.991 1406.07 608.435C1409.88 596.879 1409.8 584.808 1406.67 573.179C1403.28 560.593 1396.85 549.184 1391.44 537.261C1385.6 524.38 1383.82 510.469 1384.16 496.705C1384.5 483.53 1386.53 470.429 1388.05 457.328C1388.81 450.703 1389.07 444.079 1389.66 437.381C1390.17 431.787 1392.2 426.562 1393.3 421.115C1397.61 400.727 1370.96 390.054 1351.33 390.864C1336.36 391.453 1322.06 396.458 1307.08 397.415C1297.78 398.077 1290.16 396.237 1281.79 392.778C1263.17 385.197 1246.17 374.598 1229.33 364.514C1222.05 360.172 1214.86 355.755 1207.42 351.634C1200.23 347.659 1193.2 345.377 1184.57 345.083C1172.31 344.641 1160.04 346.776 1148.11 348.837C1142.44 349.867 1136.86 350.898 1131.19 351.854C1126.45 352.664 1122.05 353.915 1118.24 356.491C1110.37 361.938 1107.58 370.623 1105.47 378.499C1105.3 379.014 1106.23 379.235 1106.4 378.72C1108.85 369.74 1112.24 359.804 1122.47 355.314C1127.63 353.032 1133.64 352.517 1139.14 351.486C1144.89 350.456 1150.65 349.352 1156.48 348.469C1168.25 346.629 1181.11 344.715 1193.03 346.997C1200.65 348.469 1207.08 352.591 1213.42 356.344C1229.67 365.839 1245.58 375.849 1262.33 384.681C1269.77 388.656 1277.47 392.41 1285.59 395.354C1293.55 398.224 1300.65 399.034 1309.28 398.224C1323.41 396.9 1336.95 392.336 1351.16 391.821C1363.77 391.306 1376.29 394.397 1385.18 402.346C1390 406.689 1393.21 411.694 1392.62 417.876C1392.2 422.881 1390.17 427.739 1389.15 432.744C1387.97 438.485 1388.14 444.3 1387.63 450.115C1387.04 456.371 1386.28 462.627 1385.51 468.883C1382.47 493.614 1380.61 518.197 1392.2 541.603C1397.95 553.159 1403.79 564.862 1406.5 577.301C1409.29 590.255 1407.77 603.135 1402.27 615.427C1397.36 626.32 1390.34 636.404 1385.34 647.297C1383.06 652.302 1381.71 657.455 1379.93 662.607C1378.41 666.949 1376.38 671.145 1374.18 675.193C1365.38 691.754 1352.6 707.799 1349.05 726.053C1345.07 746.735 1328.07 767.197 1306.49 776.692C1300.91 779.12 1295.07 780.813 1288.72 779.709C1283.65 778.826 1279.08 776.544 1274.85 773.968C1266.81 769.037 1260.21 762.413 1251.92 757.849C1241.18 751.961 1229.33 747.103 1217.74 742.687C1207.5 738.712 1197.1 735.106 1186.27 732.456C1176.87 730.174 1167.4 728.114 1158.26 725.096C1150.73 722.593 1140.24 718.913 1137.62 711.553C1135.33 705.149 1135.59 697.715 1135.08 691.091C1134.66 686.013 1133.47 682.112 1130.6 677.622C1127.63 673.058 1125.6 668.201 1122.56 663.784C1118.75 658.117 1114.77 652.45 1110.8 646.856C1103.18 636.11 1095.48 625.437 1088.04 614.691C1081.95 605.785 1076.53 596.585 1071.12 587.384C1065.79 578.258 1059.78 569.352 1051.4 562.139C1047.43 558.679 1043.2 556.029 1038.21 553.748C1032.54 551.098 1029.15 548.522 1026.61 543.37C1022.98 536.157 1017.56 529.68 1013.75 522.54C1011.89 519.081 1009.52 514.591 1010.62 510.69C1012.15 505.538 1020.18 503.992 1025.34 503.55C1035.16 502.741 1046.24 504.949 1055.04 499.87C1062.32 495.601 1064.94 487.873 1067.06 480.807C1070.44 469.693 1075.18 459.241 1080.93 448.863C1086.94 437.896 1093.88 427.077 1098.36 415.521C1103.01 403.671 1103.1 391.011 1106.23 378.867C1106.57 378.204 1105.55 377.984 1105.47 378.499Z\",\n    fill: \"url(#paint18_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1113.76 385.932C1111.81 392.336 1110.54 398.96 1108.77 405.363C1106.82 412.135 1103.86 418.391 1100.31 424.647C1093.88 436.056 1086.77 447.244 1081.61 459.094C1077.8 467.852 1076.7 477.2 1072.98 485.959C1071.12 490.228 1068.24 494.276 1063.59 496.631C1058.26 499.355 1051.91 499.355 1045.9 499.281C1037.02 499.06 1024.5 497.883 1018.24 504.948C1014.26 509.512 1017.82 516.21 1020.27 520.626C1024.5 528.281 1030.34 535.126 1035.08 542.56C1037.11 545.651 1038.29 549.258 1041 551.981C1044.38 555.293 1049.04 557.133 1053.52 559.12C1076.79 569.646 1083.72 591.8 1093.03 611.305C1098.28 622.272 1104.37 633.018 1110.88 643.469C1114.52 649.284 1118.33 655.025 1122.22 660.693C1124.33 663.71 1126.45 666.654 1128.57 669.672C1129.75 671.365 1130.51 673.132 1131.7 674.824C1134.15 678.357 1138.55 680.565 1140.49 684.466C1141 685.497 1140.92 686.38 1141.17 687.411C1141.51 688.735 1142.36 690.134 1142.86 691.459C1143.96 694.624 1144.64 697.936 1145.57 701.174C1146.59 704.781 1147.69 708.167 1150.65 710.89C1153.44 713.466 1157.16 715.306 1160.88 716.778C1169.94 720.532 1179.84 722.666 1189.4 725.022C1201.16 727.966 1212.41 731.867 1223.32 736.798C1229.08 739.448 1234.66 742.245 1240.16 745.336C1245.07 748.06 1250.14 750.636 1254.37 754.095C1261.23 759.836 1266.81 766.607 1274.51 771.465C1282.13 776.25 1289.57 776.838 1298.12 773.453C1308.78 769.257 1317.83 762.191 1325.02 754.169C1332.13 746.293 1337.63 737.093 1340.33 727.303C1341.35 723.402 1341.86 719.575 1343.47 715.895C1345.33 711.479 1347.86 707.283 1350.49 703.088C1355.99 694.403 1362.16 686.012 1367.83 677.401C1372.74 669.893 1376.21 662.606 1378.92 654.363C1382.81 642.513 1390.25 631.914 1396.01 620.726C1401.59 609.686 1404.8 598.204 1403.54 586.059C1402.27 573.767 1397.27 562.138 1391.78 550.803C1388.73 544.473 1385.43 538.291 1383.48 531.666C1381.54 525.042 1380.61 518.123 1380.27 511.278C1379.76 498.03 1381.71 484.855 1383.48 471.753C1384.33 465.276 1385.18 458.799 1385.6 452.249C1386.02 446.213 1387.46 440.399 1388.64 434.51C1390.59 424.795 1387.63 416.919 1379.25 410.148C1371.47 403.891 1361.23 401.094 1350.83 400.947C1336.7 400.8 1323.16 405.363 1309.28 406.909C1299.3 408.013 1291.69 406.983 1282.72 403.303C1264.95 396.089 1248.79 385.638 1232.8 375.849C1225.35 371.285 1217.99 366.648 1210.46 362.232C1204.46 358.773 1198.79 355.387 1191.43 354.725C1180.34 353.768 1168.92 356.491 1158.35 358.993C1152.76 360.318 1147.18 361.79 1141.59 363.042C1136.94 364.072 1131.86 364.587 1127.55 366.501C1119.17 370.328 1116.13 378.498 1113.76 385.932C1113.59 386.447 1114.52 386.668 1114.69 386.153C1117.74 376.511 1121.97 367.899 1134.23 365.544C1145.15 363.41 1155.72 360.466 1166.55 358.184C1176.62 356.049 1189.06 353.547 1199.04 357.374C1205.39 359.803 1211.14 363.778 1216.81 367.237C1232.63 376.879 1248.2 386.963 1264.7 395.795C1271.63 399.549 1278.74 403.155 1286.36 405.805C1294.14 408.528 1301.08 408.896 1309.45 407.94C1323.24 406.394 1336.78 401.83 1350.83 401.978C1363.01 402.125 1374.52 406.026 1382.3 414.343C1386.78 419.127 1388.98 424.353 1388.31 430.536C1387.8 435.762 1386.02 440.914 1385.18 446.14C1384.25 452.249 1384.16 458.431 1383.4 464.54C1382.64 470.797 1381.71 477.053 1380.95 483.383C1379.34 495.969 1378.32 508.776 1380.18 521.436C1382.05 533.874 1387.8 544.621 1393.13 556.103C1398.46 567.511 1402.86 579.508 1402.86 591.947C1402.86 605.196 1397.19 617.12 1390.59 628.749C1385.01 638.612 1379.85 648.18 1376.63 658.779C1374.18 666.949 1368.76 674.53 1363.86 681.743C1358.36 689.839 1352.52 697.715 1347.61 706.032C1345.58 709.418 1343.72 712.804 1342.28 716.41C1340.76 720.09 1340.33 723.844 1339.32 727.598C1336.27 738.27 1329.76 748.28 1321.55 756.597C1314.02 764.179 1303.62 772.054 1292.11 774.557C1281.45 776.838 1272.48 769.478 1265.8 763.295C1259.54 757.554 1254.04 752.108 1246.42 747.691C1235.51 741.435 1224.25 735.768 1212.33 731.131C1203.19 727.598 1193.8 725.095 1184.15 722.74C1174.68 720.385 1164.61 718.103 1156.32 713.466C1151.92 711.037 1149.21 708.167 1147.77 703.824C1146.84 701.248 1146.25 698.525 1145.57 695.875C1144.72 692.636 1143.29 689.545 1142.53 686.38C1141.68 683.068 1139.65 680.86 1137.03 678.357C1133.39 674.972 1131.36 671.218 1128.57 667.317C1120.61 656.35 1113.25 645.089 1106.48 633.607C1100.65 623.67 1095.4 613.513 1090.83 603.061C1086.94 594.155 1083.05 585.102 1077.12 577.006C1071.29 569.057 1063.59 562.359 1053.94 558.016C1048.95 555.808 1043.7 553.674 1040.57 549.405C1038.46 546.461 1037.11 543.001 1035.08 539.984C1030.25 532.844 1024.67 526.073 1020.78 518.565C1019.17 515.4 1017.31 511.426 1018.24 507.893C1019.51 503.035 1026.28 500.974 1031.27 500.311C1041.34 498.987 1052.17 501.857 1061.9 498.471C1069.76 495.748 1073.57 489.271 1075.77 482.573C1078.73 473.446 1080.59 464.467 1084.74 455.634C1090.41 443.563 1097.85 432.229 1104.2 420.452C1110.12 409.485 1111.73 397.709 1115.2 386.079C1114.86 385.638 1113.93 385.417 1113.76 385.932Z\",\n    fill: \"url(#paint19_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1122.05 393.367C1119.68 399.476 1117.74 405.733 1114.94 411.695C1111.98 417.951 1107.92 423.765 1104.2 429.654C1097.6 440.179 1091.17 451.219 1087.87 462.922C1085.58 471.092 1085.33 480.293 1080.34 487.727C1074.08 497.001 1062.15 496.633 1051.23 496.191C1042.6 495.823 1030.84 495.381 1025.18 502.374C1021.62 506.716 1024.41 512.825 1026.7 517.168C1030.76 524.896 1036.6 531.815 1041.93 538.954C1044.13 541.898 1046.41 544.843 1048.19 548.007C1050.3 551.688 1052.08 554.926 1055.97 557.576C1060.03 560.299 1064.86 561.992 1069.34 563.979C1074.92 566.482 1079.92 569.868 1084.15 573.916C1092.35 581.791 1097.09 591.728 1100.56 601.811C1103.94 611.674 1106.57 621.758 1110.46 631.547C1114.86 642.514 1120.27 653.113 1126.87 663.196C1130.17 668.201 1133.81 673.206 1137.45 677.991C1138.97 680.051 1141.76 681.082 1144.05 682.407C1148.11 684.836 1150.39 689.473 1152.68 693.3C1155.05 697.275 1156.99 701.838 1160.8 705.076C1167.4 710.67 1177.64 713.026 1186.18 715.234C1197.27 718.178 1208.26 720.68 1218.67 725.317C1230.18 730.396 1241.18 737.167 1250.57 744.822C1256.66 749.827 1260.55 756.746 1265.97 762.34C1270.53 766.977 1276.8 772.055 1284.41 771.025C1294.56 769.7 1304.55 762.34 1311.4 756.157C1319.52 748.797 1325.95 739.891 1329.76 730.249C1331.37 726.201 1331.79 721.932 1333.23 717.81C1334.5 714.056 1336.61 710.449 1338.9 707.064C1348.8 691.828 1363.01 678.653 1371.47 662.681C1373.33 659.148 1374.18 655.468 1375.45 651.714C1377.56 645.679 1380.69 639.938 1383.91 634.27C1390 623.451 1396.51 612.705 1398.29 600.56C1399.98 589.004 1397.27 577.522 1392.88 566.703C1387.88 554.337 1380.35 542.782 1377.9 529.754C1375.45 516.653 1376.72 503.33 1378.49 490.229C1380.27 477.128 1381.37 463.806 1383.91 450.778C1385.77 440.915 1385.94 432.451 1378.58 424.207C1372.23 417.068 1362.92 412.799 1352.69 411.695C1339.49 410.296 1326.63 414.123 1313.77 416.184C1307.51 417.215 1300.57 418.319 1294.22 417.288C1290.84 416.7 1287.54 415.596 1284.33 414.344C1267.07 407.499 1251.5 397.121 1236.27 387.479C1228.82 382.769 1221.46 377.984 1214.02 373.347C1208.94 370.182 1203.19 365.913 1197.01 364.589C1187.96 362.601 1177.72 365.545 1169.18 368.048C1158.94 371.066 1148.95 374.967 1138.38 377.248C1128.56 379.236 1125.1 385.565 1122.05 393.367C1121.88 393.883 1122.81 394.103 1122.98 393.588C1124.67 389.172 1126.45 384.167 1130.76 381.002C1134.83 377.984 1140.66 377.616 1145.57 376.218C1155.81 373.347 1165.71 369.446 1176.11 366.944C1185.25 364.736 1194.56 363.337 1202.93 367.827C1209.03 371.066 1214.78 374.819 1220.53 378.426C1235.93 388.215 1251.07 398.225 1267.23 407.058C1273.75 410.59 1280.43 413.976 1287.54 416.405C1295.92 419.202 1304.38 418.466 1313.09 417.068C1326.63 414.933 1340.17 410.738 1354.04 412.651C1365.89 414.344 1376.63 420.748 1381.71 430.39C1384.75 436.057 1384.25 442.166 1383.15 448.202C1382.21 453.501 1381.28 458.727 1380.78 464.174C1379.59 476.612 1377.14 488.978 1375.95 501.417C1374.85 513.34 1374.94 525.485 1378.49 537.041C1382.13 548.964 1389.41 559.858 1393.55 571.708C1397.95 584.294 1399.14 597.395 1394.74 610.128C1390.76 621.537 1383.48 631.768 1378.07 642.661C1374.18 650.537 1372.65 659.001 1367.83 666.582C1363.01 674.09 1357.26 681.155 1351.59 688.221C1346 695.214 1340.25 702.28 1335.85 709.861C1331.79 716.779 1331.2 724.287 1328.07 731.5C1323.67 741.804 1316.22 751.226 1306.91 758.66C1299.72 764.401 1286.95 773.307 1276.63 769.185C1268.42 765.873 1263.09 757.997 1258.1 751.814C1253.02 745.558 1247.01 740.921 1239.99 736.211C1230.68 729.954 1220.45 724.508 1209.53 720.754C1199.72 717.368 1189.23 715.454 1179.24 712.437C1174.42 711.038 1169.6 709.419 1165.28 707.064C1160.55 704.488 1158.09 700.881 1155.55 696.612C1153.27 692.785 1151.07 688.81 1148.62 685.056C1147.01 682.554 1143.46 681.229 1140.83 679.683C1136.94 677.402 1134.32 672.323 1131.78 668.864C1128.14 663.785 1124.76 658.486 1121.71 653.113C1115.87 642.808 1111.22 632.062 1107.5 621.022C1101.58 603.283 1097.94 583.852 1081.69 570.604C1077.8 567.439 1073.4 564.863 1068.66 562.802C1063.93 560.741 1058.85 558.974 1054.87 555.736C1051.32 552.865 1049.97 549.112 1047.68 545.579C1045.65 542.414 1043.28 539.396 1041 536.378C1035.92 529.68 1030.42 523.056 1026.78 515.696C1025.26 512.678 1023.65 508.924 1024.5 505.538C1025.51 501.122 1031.18 498.62 1035.67 497.663C1045.74 495.528 1056.06 498.473 1066.21 496.927C1074.59 495.602 1080.25 490.965 1083.22 484.194C1086.52 476.612 1086.85 468.369 1089.48 460.567C1093.62 448.202 1100.64 436.793 1107.75 425.606C1110.8 420.748 1113.93 415.964 1116.3 410.738C1118.84 405.144 1120.7 399.329 1122.81 393.662C1123.23 393.073 1122.22 392.852 1122.05 393.367Z\",\n    fill: \"url(#paint20_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1130.43 400.727C1126.53 405.806 1123.91 411.547 1120.27 416.773C1116.38 422.367 1111.98 427.666 1108.43 433.407C1102.42 443.123 1098.11 453.354 1096.16 464.32C1094.72 472.343 1094.13 482.132 1087.28 488.315C1079.24 495.602 1066.63 493.394 1056.31 492.952C1047.93 492.584 1037.19 492.952 1032.03 499.724C1028.56 504.213 1031.35 510.322 1033.64 514.739C1037.7 522.467 1043.53 529.386 1049.03 536.378C1051.57 539.616 1054.2 542.781 1056.56 546.094C1058.68 549.038 1060.12 552.276 1062.23 555.22C1067.9 563.243 1078.82 565.525 1087.61 569.941C1098.95 575.682 1106.65 584.956 1111.05 595.628C1114.86 604.902 1116.38 614.618 1117.9 624.26C1119.68 635.3 1122.56 646.194 1127.13 656.645C1130.93 665.183 1136.52 675.782 1143.62 681.965C1144.64 682.848 1145.74 683.143 1147.52 683.584C1149.46 684.026 1151.41 684.467 1153.18 685.203C1154.71 685.866 1155.55 686.97 1156.74 688C1161.31 691.607 1165.2 695.949 1170.02 699.262C1173.57 701.764 1177.89 703.31 1182.12 704.708C1193.46 708.388 1205.56 710.376 1216.72 714.571C1227.98 718.84 1237.37 725.391 1245.49 733.266C1248.37 736.063 1251.07 738.713 1253.1 742.025C1255.14 745.263 1256.91 748.576 1258.86 751.814C1262.07 756.893 1266.3 763.738 1273.07 765.725C1281.02 768.154 1291.09 761.309 1296.76 757.187C1305.98 750.563 1313.43 741.951 1318.25 732.457C1321.97 725.17 1322.31 717.074 1326.63 710.081C1335.85 694.993 1350.23 682.701 1361.23 668.643C1363.6 665.625 1365.8 662.607 1367.58 659.295C1369.35 655.909 1370.03 652.303 1371.38 648.77C1375.7 637.435 1383.23 627.278 1388.22 616.164C1393.21 604.976 1394.23 593.273 1391.44 581.497C1388.47 569.058 1381.54 558.091 1376.8 546.167C1371.64 533.213 1371.64 519.376 1373.25 505.906C1374.85 492.658 1376.88 479.336 1379 466.161C1380.69 455.415 1382.04 445.257 1374.85 435.689C1369.35 428.402 1360.89 423.544 1351.08 421.999C1328.74 418.466 1305.98 432.966 1284.58 424.575C1267.91 418.024 1252.94 407.646 1238.38 398.151C1230.85 393.22 1223.41 388.215 1215.79 383.357C1210.8 380.119 1205.56 376.291 1199.89 374.009C1192.61 371.065 1183.64 373.936 1176.71 376.365C1166.81 379.824 1157.67 384.535 1147.77 387.92C1143.96 389.245 1139.48 389.613 1136.18 391.748C1132.79 393.956 1131.19 397.268 1130.17 400.801C1130 401.316 1130.93 401.537 1131.1 401.022C1132.12 397.636 1133.64 394.324 1137.02 392.263C1139.9 390.57 1143.54 390.202 1146.67 389.172C1152.59 387.332 1158.18 384.756 1163.76 382.4C1173.91 378.131 1189.48 370.035 1200.82 375.482C1209.02 379.383 1216.47 384.903 1223.92 389.761C1234.07 396.458 1244.22 403.23 1254.63 409.633C1263.77 415.301 1273.16 420.968 1283.39 425.09C1286.69 426.415 1290.16 427.666 1293.8 428.108C1301.58 428.917 1310.04 427.151 1317.57 425.752C1333.99 422.661 1352.43 418.907 1366.73 429.138C1373.75 434.143 1378.66 441.651 1379.42 449.526C1380.18 457.181 1377.98 464.909 1377.05 472.49C1375.02 489.125 1370.88 505.833 1371.22 522.614C1371.38 530.71 1372.74 538.733 1375.78 546.388C1378.83 554.043 1383.14 561.329 1386.28 568.984C1389.49 576.786 1391.86 584.956 1392.03 593.347C1392.28 602.4 1389.74 611.011 1385.68 619.255C1382.13 626.468 1377.73 633.24 1374.09 640.453C1371.22 646.047 1369.95 652.008 1367.41 657.602C1362.84 667.465 1354.04 676.003 1346.59 684.247C1339.23 692.49 1331.2 700.734 1325.61 710.008C1323.33 713.835 1322.48 717.515 1321.38 721.637C1319.61 728.482 1316.22 734.959 1311.99 740.847C1307.42 747.104 1301.75 752.771 1295.07 757.334C1289.99 760.794 1281.19 766.682 1274.26 765.21C1268.76 764.032 1264.95 759.101 1262.16 755.2C1259.28 751.078 1256.91 746.736 1254.37 742.467C1248.87 733.413 1239.14 725.391 1229.5 719.723C1216.72 712.289 1202.17 709.492 1187.79 705.518C1180.85 703.604 1173.74 701.396 1168.41 696.906C1163.93 693.153 1159.87 688.884 1155.3 685.277C1153.69 684.026 1145.99 681.229 1144.3 682.333C1144.55 682.186 1144.64 681.891 1144.39 681.67C1133.39 669.747 1126.45 655.541 1122.3 640.747C1118.83 628.529 1117.99 615.869 1114.6 603.651C1111.47 592.463 1105.89 581.644 1095.74 573.989C1085.25 566.114 1068.24 564.274 1061.73 552.791C1056.99 544.401 1050.47 537.04 1044.47 529.238C1041.17 524.969 1037.87 520.627 1035.24 515.99C1033.13 512.31 1030.76 507.894 1031.27 503.625C1031.94 497.81 1039.39 494.792 1045.23 493.983C1052 493.026 1058.85 493.983 1065.62 494.277C1076.53 494.792 1087.02 492.731 1091.93 483.457C1094.47 478.599 1095.4 473.226 1096.33 468.001C1097.51 461.303 1098.87 454.752 1101.49 448.349C1105.13 439.663 1110.2 431.493 1115.96 423.765C1118.67 420.085 1121.46 416.552 1123.83 412.651C1126.11 408.75 1128.31 404.776 1131.1 401.169C1131.61 400.654 1130.76 400.286 1130.43 400.727Z\",\n    fill: \"url(#paint21_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1138.8 408.088C1125.6 418.54 1114.18 430.831 1109.02 445.92C1105.3 456.813 1106.65 468.884 1101.66 479.483C1095.4 492.732 1079.49 490.891 1065.96 490.008C1056.65 489.419 1040.32 489.567 1037.7 499.945C1035.75 507.599 1042.6 516.432 1047 522.467C1053.69 531.668 1061.64 540.058 1068.32 549.259C1071.2 553.16 1072.98 557.723 1076.62 561.182C1081.27 565.746 1087.87 568.248 1094.13 570.751C1101.66 573.695 1108.77 577.007 1114.52 582.38C1119.93 587.459 1123.66 593.641 1125.94 600.192C1131.19 614.692 1129.41 629.854 1131.19 644.796C1133.05 660.252 1138.29 675.414 1150.48 687.191C1150.65 686.97 1150.9 686.749 1151.07 686.528C1152.09 687.117 1155.64 686.381 1157.16 686.381C1159.36 686.381 1161.14 686.676 1163.08 687.265C1170.7 689.473 1177.13 694.036 1184.66 696.465C1200.73 701.691 1218.59 703.163 1232.88 712.069C1243.38 718.619 1249.64 728.777 1253.53 739.228C1256.07 746.073 1259.11 757.187 1267.07 760.794C1270.96 762.56 1275.1 760.72 1278.66 759.175C1285.59 756.157 1291.69 751.741 1296.85 746.736C1302.18 741.584 1306.58 735.695 1309.79 729.365C1312.33 724.36 1312.92 719.135 1314.87 713.982C1318.34 704.708 1327.64 696.612 1334.83 689.325C1342.87 681.229 1351.25 673.354 1358.44 664.742C1361.06 661.577 1363.69 658.265 1365.12 654.511C1366.22 651.714 1366.82 648.844 1367.92 646.12C1369.61 641.925 1371.81 637.803 1374.09 633.829C1382.21 619.329 1389.74 605.491 1387.38 588.931C1386.28 581.276 1383.48 573.916 1380.27 566.703C1376.71 558.827 1372.15 551.246 1370.12 542.855C1365.8 524.97 1370.71 506.79 1373.58 489.051C1375.95 474.478 1379.68 458.506 1369.86 445.405C1362.67 435.763 1350.49 431.494 1337.63 431.788C1328.83 431.935 1320.37 434.143 1311.82 435.689C1304.71 436.94 1296.59 438.633 1289.4 436.72C1279.84 434.217 1271.04 428.623 1262.92 423.692C1243.46 411.842 1225.61 398.078 1206.06 386.301C1203.36 384.682 1200.48 382.695 1197.1 382.18C1192.78 381.517 1188.21 382.842 1184.24 384.241C1172.22 388.583 1162.07 396.091 1150.31 400.801C1145.06 402.862 1140.75 403.23 1138.38 408.456C1138.12 408.971 1139.06 409.192 1139.31 408.677C1141.76 403.157 1149.8 402.126 1155.38 399.476C1161.05 396.753 1166.47 393.588 1172.14 390.718C1177.64 387.847 1183.39 384.977 1189.65 383.505C1194.64 382.4 1198.45 382.989 1202.68 385.345C1221.21 395.723 1237.79 408.898 1255.64 420.232C1264.44 425.826 1273.5 431.494 1283.31 435.542C1286.27 436.72 1289.32 437.897 1292.62 438.192C1300.74 439.075 1309.62 436.94 1317.49 435.468C1332.97 432.451 1350.4 429.948 1363.35 440.105C1378.41 451.955 1375.53 469.399 1373.25 485.077C1370.79 501.711 1366.05 518.419 1367.83 535.274C1369.52 551.835 1380.35 565.746 1384.84 581.644C1387.29 590.403 1387.71 599.456 1385.34 608.215C1383.23 616.09 1379 623.377 1374.85 630.664C1371.05 637.288 1367.24 644.059 1365.12 651.273C1363.94 655.247 1362.16 658.633 1359.46 662.092C1352.43 671.219 1343.63 679.242 1335.43 687.485C1328.24 694.698 1320.28 702.132 1315.38 710.818C1313.18 714.718 1312.84 719.061 1311.4 723.183C1308.95 730.175 1304.88 736.652 1299.81 742.467C1294.56 748.355 1288.22 753.655 1280.77 757.408C1275.36 760.132 1269.6 762.855 1264.61 758.292C1257.5 751.814 1255.64 741.731 1252.17 733.561C1247.94 723.624 1239.74 714.718 1229.33 709.272C1215.46 702.059 1199.04 700.513 1184.24 695.582C1176.96 693.153 1170.61 689.031 1163.34 686.528C1160.12 685.424 1156.32 685.498 1152.85 685.792C1152.25 685.866 1148.36 686.308 1150.31 687.412C1150.82 687.706 1151.24 687.117 1150.9 686.749C1138.89 675.194 1133.73 660.179 1131.95 644.943C1130.51 632.577 1131.53 620.138 1128.9 607.92C1126.36 596.291 1120.53 585.177 1109.7 577.743C1098.02 569.72 1080.34 568.175 1073.15 555.662C1068.24 547.198 1061.64 539.764 1055.3 532.109C1048.87 524.16 1040.83 515.254 1038.54 505.538C1037.36 500.386 1039.56 496.412 1044.8 493.615C1050.98 490.303 1058.76 490.671 1065.7 491.112C1076.95 491.848 1090.75 494.056 1098.87 485.371C1106.65 477.054 1105.64 464.468 1107.58 454.458C1111.22 436.131 1123.66 421.337 1139.31 409.045C1139.99 408.309 1139.22 407.72 1138.8 408.088Z\",\n    fill: \"url(#paint22_linear_1386_19896)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1147.26 415.374C1138.89 417.876 1131.02 420.379 1125.52 426.782C1120.95 432.082 1118.41 438.632 1117.06 445.109C1114.69 456.076 1116.72 469.03 1110.21 479.04C1102 491.553 1083.89 487.21 1070.52 486.548C1061.13 486.106 1045.82 487.799 1044.38 498.177C1043.11 506.862 1050.98 516.357 1056.14 523.129C1063.42 532.55 1071.71 541.309 1078.99 550.803C1081.95 554.704 1083.89 559.268 1087.28 562.948C1091.93 568.027 1098.53 571.044 1105.3 573.694C1113.08 576.712 1120.95 579.435 1127.3 584.514C1133.22 589.224 1137.45 595.333 1139.99 601.958C1151.15 631.252 1128.23 667.538 1156.99 691.974C1157.42 692.342 1158.09 691.753 1157.67 691.385C1156.06 689.766 1168.58 687.337 1170.11 687.264C1177.97 686.601 1186.6 690.208 1194.3 691.385C1211.06 693.888 1233.39 696.243 1244.22 709.197C1250.48 716.705 1250.74 726.936 1252.6 735.842C1253.53 740.331 1254.63 744.895 1256.57 749.164C1257.76 751.74 1259.37 755.052 1262.41 756.377C1266.13 757.996 1270.96 755.126 1274.09 753.58C1280.6 750.341 1286.27 745.925 1291.01 740.847C1295.58 735.989 1299.39 730.616 1302.09 724.801C1304.29 720.091 1304.46 714.865 1306.92 710.375C1311.31 702.131 1319.78 695.139 1326.88 688.588C1335.34 680.786 1344.14 673.279 1352.01 665.109C1354.89 662.165 1357.68 659.147 1359.88 655.761C1362.59 651.566 1363.26 646.561 1365.29 642.145C1371.98 627.645 1382.72 614.691 1383.06 598.498C1383.23 590.917 1381.37 583.41 1378.58 576.196C1375.53 568.247 1370.88 560.813 1368 552.864C1361.74 535.568 1366.65 517.388 1370.12 500.091C1372.99 485.591 1375.36 469.325 1366.39 456.003C1360.05 446.581 1348.71 441.944 1336.36 441.797C1328.15 441.724 1320.2 443.564 1312.25 445.036C1305.14 446.361 1296.68 448.421 1289.49 446.581C1280.52 444.373 1272.31 438.927 1264.87 434.363C1245.74 422.513 1228.23 408.823 1209.36 396.605C1203.44 392.778 1198.53 389.171 1190.84 391.453C1179.84 394.691 1170.61 402.346 1161.48 408.308C1156.82 411.252 1152.51 413.754 1147.26 415.374C1146.67 415.521 1146.92 416.404 1147.52 416.183C1158.01 413.018 1166.3 405.805 1175.18 400.211C1182.54 395.574 1193.03 388.361 1202.09 393.44C1210.13 397.93 1217.4 403.376 1224.85 408.602C1234.15 415.079 1243.38 421.63 1252.85 427.96C1261.65 433.774 1270.53 439.663 1280.26 444.226C1283.23 445.625 1286.44 447.023 1289.82 447.685C1295.75 448.863 1302.52 447.612 1308.35 446.581C1324.09 443.858 1341.6 438.927 1356.16 447.685C1371.81 457.033 1372.82 475.802 1370.62 490.67C1368.17 507.451 1362.33 524.085 1364.19 541.088C1365.89 556.986 1376.88 570.455 1380.52 585.986C1382.55 594.818 1382.3 603.798 1379.17 612.483C1376.38 620.358 1371.72 627.498 1367.66 634.932C1366.05 637.949 1364.45 640.967 1363.18 644.059C1361.99 646.929 1361.4 649.873 1360.22 652.744C1358.69 656.35 1355.73 659.515 1353.03 662.459C1345.58 670.556 1337.03 677.842 1328.74 685.35C1321.38 692.048 1313.6 698.819 1307.85 706.695C1305.73 709.565 1304.8 712.215 1304.04 715.527C1302.52 722.446 1299.05 728.996 1294.65 734.811C1289.91 741.067 1283.82 746.808 1276.54 751.004C1272.31 753.433 1265.03 758.217 1260.72 753.948C1257.5 750.783 1256.15 745.925 1255.05 741.951C1253.87 737.682 1253.02 733.413 1252.34 729.07C1250.74 719.87 1248.71 710.301 1240.08 704.045C1227.05 694.624 1209.28 692.637 1193.12 690.208C1185.76 689.104 1178.06 685.791 1170.53 686.233C1166.89 686.38 1162.83 687.337 1159.53 688.515C1157.92 689.104 1155.39 690.208 1156.99 691.901C1157.25 691.68 1157.42 691.533 1157.67 691.312C1131.78 669.304 1148.53 637.14 1143.29 610.127C1141 598.425 1134.66 587.531 1123.32 580.613C1110.37 572.737 1092.61 571.265 1084.74 557.943C1079.75 549.405 1072.89 541.897 1066.38 534.243C1059.1 525.631 1050.98 516.652 1046.84 506.494C1045.31 502.814 1044.21 498.472 1046.67 494.865C1050.9 488.682 1059.7 487.284 1067.23 487.358C1079.49 487.505 1094.47 491.995 1105.47 485.149C1115.7 478.672 1115.7 465.571 1116.64 455.708C1117.4 448.127 1118.58 440.399 1122.3 433.406C1124.33 429.505 1127.13 425.899 1130.93 423.176C1135.76 419.643 1141.76 418.023 1147.69 416.257C1148.19 416.036 1147.94 415.226 1147.26 415.374Z\",\n    fill: \"url(#paint23_linear_1386_19896)\"\n  })))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter0_f_1386_19896\",\n    x: 327.943,\n    y: -139.523,\n    width: 889.871,\n    height: 789.782,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"BackgroundImageFix\",\n    result: \"shape\"\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 100,\n    result: \"effect1_foregroundBlur_1386_19896\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_1386_19896\",\n    x1: 241.205,\n    y1: 0.947266,\n    x2: 241.205,\n    y2: 535.231,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint1_linear_1386_19896\",\n    x1: 244.691,\n    y1: 13.1562,\n    x2: 244.691,\n    y2: 529.973,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint2_linear_1386_19896\",\n    x1: 247.107,\n    y1: 25.3809,\n    x2: 247.107,\n    y2: 524.831,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint3_linear_1386_19896\",\n    x1: 248.634,\n    y1: 37.1455,\n    x2: 248.634,\n    y2: 519.807,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint4_linear_1386_19896\",\n    x1: 249.832,\n    y1: 48.7031,\n    x2: 249.832,\n    y2: 514.809,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint5_linear_1386_19896\",\n    x1: 250.708,\n    y1: 59.5752,\n    x2: 250.708,\n    y2: 509.985,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint6_linear_1386_19896\",\n    x1: 251.674,\n    y1: 69.3086,\n    x2: 251.674,\n    y2: 504.772,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint7_linear_1386_19896\",\n    x1: 252.541,\n    y1: 78.8135,\n    x2: 252.541,\n    y2: 499.884,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint8_linear_1386_19896\",\n    x1: 253.551,\n    y1: 88.2187,\n    x2: 253.551,\n    y2: 495.444,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint9_linear_1386_19896\",\n    x1: 254.09,\n    y1: 97.0449,\n    x2: 254.09,\n    y2: 490.518,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint10_linear_1386_19896\",\n    x1: 254.998,\n    y1: 106.287,\n    x2: 254.998,\n    y2: 485.799,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint11_linear_1386_19896\",\n    x1: 256.068,\n    y1: 115.026,\n    x2: 256.068,\n    y2: 481.142,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint12_linear_1386_19896\",\n    x1: 1198.79,\n    y1: 276.662,\n    x2: 1198.79,\n    y2: 810.946,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint13_linear_1386_19896\",\n    x1: 1202.28,\n    y1: 288.871,\n    x2: 1202.28,\n    y2: 805.688,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint14_linear_1386_19896\",\n    x1: 1204.7,\n    y1: 301.096,\n    x2: 1204.7,\n    y2: 800.546,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint15_linear_1386_19896\",\n    x1: 1206.22,\n    y1: 312.862,\n    x2: 1206.22,\n    y2: 795.524,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint16_linear_1386_19896\",\n    x1: 1207.42,\n    y1: 324.42,\n    x2: 1207.42,\n    y2: 790.525,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint17_linear_1386_19896\",\n    x1: 1208.3,\n    y1: 335.291,\n    x2: 1208.3,\n    y2: 785.701,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint18_linear_1386_19896\",\n    x1: 1209.26,\n    y1: 345.024,\n    x2: 1209.26,\n    y2: 780.488,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint19_linear_1386_19896\",\n    x1: 1210.13,\n    y1: 354.528,\n    x2: 1210.13,\n    y2: 775.599,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint20_linear_1386_19896\",\n    x1: 1211.14,\n    y1: 363.935,\n    x2: 1211.14,\n    y2: 771.159,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint21_linear_1386_19896\",\n    x1: 1211.68,\n    y1: 372.761,\n    x2: 1211.68,\n    y2: 766.233,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint22_linear_1386_19896\",\n    x1: 1212.59,\n    y1: 382.004,\n    x2: 1212.59,\n    y2: 761.516,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint23_linear_1386_19896\",\n    x1: 1213.66,\n    y1: 390.741,\n    x2: 1213.66,\n    y2: 756.857,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#BDEE60\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.989583,\n    stopColor: \"#005436\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_1386_19896\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 1440,\n    height: 810,\n    fill: \"white\",\n    transform: \"translate(0 0.945312)\"\n  })))));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBgLucid);\nexport default __webpack_public_path__ + \"static/media/bg_lucid.cd3bf3a4abd8f9b362bd3dce2908f2bb.svg\";\nexport { ForwardRef as ReactComponent };","import { Route } from 'react-router-dom'\nimport { useEffect } from 'react'\n\nimport { Row, Col, Button } from 'antd'\nimport Pools from './pools'\nimport { useAppRouter } from 'app/hooks/useAppRouter'\nimport { useUI } from '@senhub/providers'\nimport JupiterMarket from 'app/components/jupiterMarket'\n\nimport Background from 'app/static/images/bg_lucid.svg'\n\nconst View = () => {\n  const { appRoute } = useAppRouter()\n  const { setBackground } = useUI()\n\n  useEffect(() => {\n    setBackground({ light: Background, dark: Background })\n  }, [setBackground])\n\n  const onCreateNewToken = async () => {}\n\n  return (\n    <Row gutter={[24, 24]} align=\"middle\" justify=\"center\">\n      <Col style={{ maxWidth: 1200 }} span={24}>\n        <Button onClick={() => onCreateNewToken()}>\n          Create new Token for test\n        </Button>\n        <JupiterMarket />\n        <Route exact path={`${appRoute}`} component={Pools} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default View\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\nimport { PoolData } from 'app/lib'\n\n/**\n * Interface & Utility\n */\n\nexport type PoolsState = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: PoolsState = {}\n\n/**\n * Actions\n */\n\nexport const upsetPool = createAsyncThunk<\n  PoolsState,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const upsetPools = createAsyncThunk<\n  PoolsState,\n  PoolsState,\n  { state: any }\n>(`${NAME}/upsetPools`, async (pools) => {\n  return pools\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        upsetPools.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport main from 'app/model/main.controller'\nimport pools from 'app/model/pools.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n    pools,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import {\n  Fragment,\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { upsetPool, upsetPools } from 'app/model/pools.controller'\nimport { AppDispatch } from 'app/model'\nimport { useLucid } from 'app/hooks/useLucid'\n\n// Watch id\nlet watchId = 0\n\nconst PoolWatcher: FunctionComponent = (props) => {\n  const [loading, setLoading] = useState(true)\n  const dispatch = useDispatch<AppDispatch>()\n  const lucid = useLucid()\n\n  // First-time fetching\n  const fetchData = useCallback(async () => {\n    try {\n      let pools = await lucid.getPools()\n      await dispatch(upsetPools(pools)).unwrap()\n    } catch (er) {\n      return window.notify({\n        type: 'error',\n        description: 'Cannot fetch data of pools',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [dispatch, lucid])\n\n  // Watch account changes\n  const watchData = useCallback(async () => {\n    if (watchId) return console.warn('Already watched')\n    watchId = lucid.watch((er: string | null, re) => {\n      if (er) return console.error(er)\n      if (re) return dispatch(upsetPool({ address: re.address, data: re.data }))\n    }, [])\n  }, [dispatch, lucid])\n\n  useEffect(() => {\n    fetchData()\n    watchData()\n    // Unwatch (cancel socket)\n    return () => {\n      ;(async () => {\n        try {\n          await lucid.unwatch(watchId)\n        } catch (er) {}\n      })()\n      watchId = 0\n    }\n  }, [fetchData, lucid, watchData])\n\n  if (loading) return <div>Loading</div>\n  return <Fragment>{props.children}</Fragment>\n}\n\nexport default PoolWatcher\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  MintProvider,\n  AccountProvider,\n} from '@senhub/providers'\n\nimport View from 'app/view'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/light.less'\nimport 'app/static/styles/dark.less'\nimport PoolWatcher from './watcher/pool.watcher'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd={{ prefixCls: appId }}>\n      <WalletProvider>\n        <MintProvider>\n          <AccountProvider>\n            <Provider store={model}>\n              <PoolWatcher>\n                <View />\n              </PoolWatcher>\n            </Provider>\n          </AccountProvider>\n        </MintProvider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    val instanceof Buffer\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { Connection } from '@solana/web3.js'\nimport storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n\n/**\n * RPC Node\n */\nconst CLUSTERS: Record<Net, string[]> = {\n  devnet: [\n    'https://api.devnet.solana.com',\n    'https://psytrbhymqlkfrhudd.dev.genesysgo.net:8899/',\n  ],\n  testnet: ['https://api.testnet.solana.com'],\n  mainnet: [\n    'https://ssc-dao.genesysgo.net/',\n    'https://solana-api.projectserum.com',\n    'https://solitary-autumn-water.solana-mainnet.quiknode.pro/dcbac9d444818a20ac583541dec35b44c6840888/',\n  ],\n}\nconst getRPC = () => {\n  const rpcs = CLUSTERS[net]\n  const rpc = rpcs[Math.floor(Math.random() * rpcs.length)]\n  console.log('Debug OS RPC:', rpc)\n  return rpc\n}\nexport const rpc: string = getRPC()\n\n/**\n * Ping Solana cluster\n * @param nodeRpc - Solana's RPC cluster\n * @returns ping time\n */\nexport const pingCluster = async (nodeRpc: string): Promise<number> => {\n  const connection = new Connection(nodeRpc)\n  const start = Date.now()\n  await connection.getVersion()\n  const end = Date.now()\n  return end - start\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\n/**\n * Randomly choose an element in the input array\n * @param arr - Original array of elements\n * @returns\n */\nexport const randChoose = <T>(arr: T[]): T => {\n  const rand = Math.floor(Math.random() * arr.length)\n  return arr[rand]\n}\n\n/**\n * Randomize a subarray in the input array with a specific number of elements\n * @param arr - Original array of elements\n * @param num - Number of elements in randomized subarray\n * @returns\n */\nexport const randElements = <T>(arr: T[], num: number): T[] => {\n  if (arr.length < num) return [...arr]\n  const re: T[] = []\n  while (re.length < num) {\n    const el = randChoose(arr)\n    if (!re.includes(el)) re.push(el)\n  }\n  return re\n}\n"],"names":["DEFAULT_AVATARS","undefined","mintAddress","size","icon","name","reversed","props","avatars","setAvatars","useState","tokenProvider","useMint","pools","usePool","deriveAvatar","useCallback","async","token","findByAddress","address","logoURI","deriveAvatars","account","poolData","Object","values","find","mint_lpt","mint_a","mint_b","Promise","all","map","reverse","avatar","useEffect","length","Avatar","src","style","backgroundColor","border","display","whiteSpace","i","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","substring","deriveSymbols","symbols","onClick","active","Card","bodyStyle","padding","cursor","borderRadius","className","bordered","Boolean","Space","width","justifyContent","Typography","ellipsis","boxShadow","Row","gutter","align","Col","direction","type","LoadMore","callback","Fragment","overflow","useAllMintAddresses","allMintAddresses","setAllMintAddresses","getRecommendedMintAddresses","addresses","filter","includes","useSortMints","mints","sortedMints","setSortedMints","accounts","useAccount","mapMintAmounts","useMemo","mapMints","mint","Number","amount","toString","sortMints","mintAddresses","sort","a","b","amountA","amountB","LOCAL_STORAGE_ID","net","searching","value","onChange","disabled","visible","setVisible","keyword","setKeyword","offset","setOffset","recommendedMints","addRecommendMint","setRecommendedMints","getRecommendedMints","localStorage","push","slice","newMints","useRecommendedMint","searchedMints","loading","limit","setLoading","setSearchedMints","search","clearTimeout","setTimeout","useSearchedMints","onSelect","list","document","getElementById","scrollTop","Button","Modal","onCancel","footer","closable","centered","span","Input","placeholder","suffix","marginRight","e","target","xs","sm","md","maxHeight","id","justify","index","height","Empty","label","tooltip","primary","priColor","color","Tooltip","title","shape","level","marginTop","preffix","children","Spin","spinning","indicator","LoadingOutlined","DEFAULT_IDL","version","instructions","isMut","isSigner","args","kind","fields","errors","code","msg","DEFAULT_PROGRAMS","rent","web3","systemProgram","associatedTokenProgram","utils","tokenProgram","TOKEN_PROGRAM_ID","constructor","provider","programId","_provider","program","getPools","this","pool","totalLptFee","toNumber","publicKey","toBase58","getPoolPDAs","baseMint","poolPublicKey","mintPublicKey","baseMintPublicKey","treasurer","Buffer","from","toBuffer","stableMint","lptMint","treasury","owner","stableTreasury","baseTreasury","lptTreasury","getTokenAccounts","authority","walletPublicKey","poolPDAs","tokenAccount","baseTokenAccount","stableTokenAccount","lptTokenAccount","cheque","cert","initializePool","fee","stableAmount","baseAmount","PDAs","wallet","tokenAccounts","additionalComputeBudgetInstruction","ComputeBudgetProgram","units","additionalFee","transaction","Transaction","add","instruction","methods","txId","sendAndConfirm","mintStable","fetch","rpc","burnStable","addLiquidity","removeLiquidity","lpt_amount","borrow","repay","buy","stable_amount","base_amount","sell","watch","filters","connection","onProgramAccountChange","accountId","accountInfo","data","buf","coder","decode","error","unwatch","watchId","removeProgramAccountChangeListener","getAllJupiter","jupiter","getJupiterPDAs","jupiterPublicKey","mintTreasury","getTokenAccountsJupiter","initializeJupiter","signers","swapJupiter","amountIn","amountOut","listJupiter","Error","er","isAddress","Program","useProvider","useWallet","node","walletAddress","Connection","PublicKey","AnchorProvider","signTransaction","signAllTransactions","signedTransactions","transactions","signedTransaction","commitment","skipPreflight","getAnchorProvider","window","sentre","useLucid","LucidProgram","notifySuccess","content","notify","description","open","explorer","notifyError","console","log","message","useOracles","getDecimals","decimalizeMintAmount","decimals","BN","util","undecimalizeMintAmount","BigInt","decimalize","undecimalize","shared","appId","process","url","devnet","spltAddress","splataAddress","testnet","mainnet","manifest","development","staging","production","env","sol","setDecimals","fetchDecimals","buildResult","balance","useAccountBalance","accountAddress","lamports","useMintDecimals","DEFAULT_EMPTY_ADDRESS","useAccountBalanceByMintAddress","setAccountAddress","splt","deriveAssociatedAddress","useLucidOracles","calcLpForTokensZeroPriceImpact","tokenAmountIns","balanceIns","totalSupply","decimalIns","idx","reduce","totalBptOut","poolPairData","balanceIn","balanceOut","weightIn","decimalIn","swapFee","LpPrice","Bo","Ao","wi","Bi","f","Math","pow","spotPriceAfterSwapTokenInForExactBPTOut","calcDepositInfo","amountIns","lpOut","impactPrice","numTotalSupply","numBalanceIns","numAmountIns","balanceRatiosWithFee","Array","invariantRatioWithFees","invariantRatio","amountInWithoutFee","nonTaxableAmount","calcLPOutGivenExactTokensIn","toFixed","calcMintReceivesRemoveFullSide","lptAmount","lptSupply","reserves","lpt_rate","reserve","calcOutGivenInSwap","usePoolData","poolAddress","useSelector","state","forEach","toLowerCase","hoverable","margin","Divider","fontSize","selectedMint","onClose","mintsSearched","setMintsSearched","closeIcon","destroyOnClose","mintLabel","mintAvatar","timeoutId","forwardRef","ref","max","onValue","setError","setCursor","innerRef","useRef","onAmount","val","onError","test","parseFloat","current","setSelectionRange","selectionStart","configs","setAmount","receive","setReceive","lucid","background","textDecoration","textAlign","stableBalance","balanceNum","stableNum","numSwapFee","receiveAmount","position","minHeight","left","top","zIndex","paddingRight","paddingLeft","block","amountBN","setValue","Segmented","options","usePoolAmounts","amounts","setAmounts","lptFeeAmount","calcPrices","baseBalance","usePoolDay","date","floor","Date","getTime","startTime","usePoolPrices","poolAmounts","poolPrices","setPoolPrices","mintPrice","lptPrice","closeModal","setBaseAmount","estimatedLP","setEstimatedLP","mintBalance","baseBalanceOfAddress","lptBalance","numeric","format","fontWeight","tokeDecimals","lpt","flex","baseBN","poolAmount","ratio","usdReceive","tokenReceive","day","roi","useMyLiquidity","myLpt","lptLocked","setLptLocked","setBaseAmout","fetchDebt","accouts","debt","debtAccount","borrowAmount","String","CardValue","rank","activeKey","setActiveKey","totalFee","fee24h","usePoolFees","tvl","usePoolTvl","apr","useAPR","myLiquidity","Collapse","header","showArrow","ModalContent","setMint","price","setPrice","FEE","stableAmountBN","config","DEFAULT_AMOUNT","RowContent","total","setTotal","bestPoolAddress","bestPoolData","onJoin","amountOutBN","isBaseMint","err","fetchTotal","tokenInfo","ticket","extensions","coingeckoId","info","fetchCGK","wrap","minWidth","action","alignItems","ActionClaim","claim","setTvl","calcTVL","lg","keys","Image","IcoRank","alt","APP_ROUTE","jupiters","setJupiters","fetchJupiters","txid","onCreateJupiter","onClaimJupiter","appRoute","pathname","useLocation","history","useHistory","params","useParams","query","URLSearchParams","getQuery","queryId","get","getAllQuery","queries","key","pushHistory","path","newQuery","force","currentQuery","assign","newParams","useAppRouter","setBackground","useUI","light","Background","dark","maxWidth","onCreateNewToken","Route","exact","component","Pools","NAME","increaseCounter","createAsyncThunk","_","getState","main","counter","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","payload","upsetPool","upsetPools","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","dispatch","useDispatch","fetchData","unwrap","watchData","warn","re","Page","UIProvider","antd","prefixCls","WalletProvider","MintProvider","AccountProvider","Provider","store","model","appName","prototype","toJSON","serializableCheck","isSerializable","isArray","obj","proto","getPrototypeOf","isPlainObject","storage","getNetwork","chainId","getChainId","CLUSTERS","rpcs","random","getRPC","KEY","driver","convert","JSON","parse","set","getItem","setItem","stringify","clear","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","calls","time","cache","RequestQueue","resolveQueue","rejectQueue","resolve","reject","resolves","shift","rejects","SingleFlightCache","mapCache","delete","Map","DataLoader","instanceKey","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","singleFlight","getSingleFlight","newRequest","load","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","isFetch","request","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","asyncWait","ms","addressOrTxId","numbro"],"sourceRoot":""}